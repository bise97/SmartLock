
step_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800650c  0800650c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800650c  0800650c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800650c  0800650c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000019c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c77  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e8  00000000  00000000  00033cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  000365a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ecdd  00000000  00000000  00038600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159f4  00000000  00000000  000572dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b89c2  00000000  00000000  0006ccd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125693  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004774  00000000  00000000  001256e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006450 	.word	0x08006450

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006450 	.word	0x08006450

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <lcd_send_cmd>:

//extern UART_HandleTypeDef huart2;



void lcd_send_cmd(uint8_t cmd){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t mask = LCD_BACKLIGHT;
 800065a:	2308      	movs	r3, #8
 800065c:	73fb      	strb	r3, [r7, #15]
	lcd_send(cmd,mask);
 800065e:	7bfa      	ldrb	r2, [r7, #15]
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f815 	bl	8000694 <lcd_send>

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <lcd_write_char>:

void lcd_write_char(uint8_t c){
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
	uint8_t mask = Rs | LCD_BACKLIGHT;
 800067c:	2309      	movs	r3, #9
 800067e:	73fb      	strb	r3, [r7, #15]
	lcd_send(c,mask);
 8000680:	7bfa      	ldrb	r2, [r7, #15]
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f804 	bl	8000694 <lcd_send>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <lcd_send>:

void lcd_send(uint8_t d, uint8_t mask){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
	uint8_t d_h = d & 0xf0;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73fb      	strb	r3, [r7, #15]
	uint8_t d_l = (d << 4) & 0xf0;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	73bb      	strb	r3, [r7, #14]

	lcd_send4(d_h,mask);
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f80b 	bl	80006d4 <lcd_send4>
	lcd_send4(d_l,mask);
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f805 	bl	80006d4 <lcd_send4>

}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <lcd_send4>:

void lcd_send4(uint8_t d, uint8_t mask){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	uint8_t mask_en = mask | En;
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	73fb      	strb	r3, [r7, #15]

	data[0] = d | mask;
 80006ec:	79fa      	ldrb	r2, [r7, #7]
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	733b      	strb	r3, [r7, #12]
	data[1] = d | mask_en;
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(hi2c, LCD_I2C_SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <lcd_send4+0x60>)
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	f107 020c 	add.w	r2, r7, #12
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2302      	movs	r3, #2
 8000710:	214e      	movs	r1, #78	; 0x4e
 8000712:	f001 fc47 	bl	8001fa4 <HAL_I2C_Master_Transmit>
//	HAL_Delay(1);
	HAL_I2C_Master_Transmit(hi2c, LCD_I2C_SLAVE_ADDR, data, 1, HAL_MAX_DELAY);
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <lcd_send4+0x60>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f107 020c 	add.w	r2, r7, #12
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	214e      	movs	r1, #78	; 0x4e
 8000728:	f001 fc3c 	bl	8001fa4 <HAL_I2C_Master_Transmit>
//	HAL_Delay(1);
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000030 	.word	0x20000030

08000738 <lcd_write>:
//
//	return 0;
//
//}

void lcd_write(const char* s){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	while (*s) lcd_write_char(*s++);
 8000740:	e006      	b.n	8000750 <lcd_write+0x18>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff91 	bl	8000672 <lcd_write_char>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f4      	bne.n	8000742 <lcd_write+0xa>
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <lcd_clear>:

void lcd_clear(){
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
	lcd_send_cmd(LCD_CLEARDISPLAY);
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff72 	bl	8000650 <lcd_send_cmd>

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <lcd_set_cursor>:

int lcd_set_cursor(uint8_t row, uint8_t col){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	71bb      	strb	r3, [r7, #6]
	if(row > 1 || col > 15) return -1;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d802      	bhi.n	800078c <lcd_set_cursor+0x1c>
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d902      	bls.n	8000792 <lcd_set_cursor+0x22>
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	e019      	b.n	80007c6 <lcd_set_cursor+0x56>

	switch(row){
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <lcd_set_cursor+0x2e>
 8000798:	2b01      	cmp	r3, #1
 800079a:	d008      	beq.n	80007ae <lcd_set_cursor+0x3e>
 800079c:	e00f      	b.n	80007be <lcd_set_cursor+0x4e>
	case(0):
		lcd_send_cmd(LCD_SETDDRAMADDR | col);
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff52 	bl	8000650 <lcd_send_cmd>
		break;
 80007ac:	e00a      	b.n	80007c4 <lcd_set_cursor+0x54>
	case(1):
		lcd_send_cmd(LCD_SETDDRAMADDR | 0x40 | col);
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff4a 	bl	8000650 <lcd_send_cmd>
		break;
 80007bc:	e002      	b.n	80007c4 <lcd_set_cursor+0x54>
	default:
		return -1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e000      	b.n	80007c6 <lcd_set_cursor+0x56>
	}

	return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <lcd_init>:

void lcd_init(I2C_HandleTypeDef* handle){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	hi2c = handle;
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <lcd_init+0x90>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f001 f812 	bl	8001808 <HAL_Delay>

	lcd_send4(0x30,0x08);
 80007e4:	2108      	movs	r1, #8
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f7ff ff74 	bl	80006d4 <lcd_send4>
	HAL_Delay(5);
 80007ec:	2005      	movs	r0, #5
 80007ee:	f001 f80b 	bl	8001808 <HAL_Delay>
	lcd_send4(0x30,0x08);
 80007f2:	2108      	movs	r1, #8
 80007f4:	2030      	movs	r0, #48	; 0x30
 80007f6:	f7ff ff6d 	bl	80006d4 <lcd_send4>
	HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f001 f804 	bl	8001808 <HAL_Delay>
	lcd_send4(0x30,0x08);
 8000800:	2108      	movs	r1, #8
 8000802:	2030      	movs	r0, #48	; 0x30
 8000804:	f7ff ff66 	bl	80006d4 <lcd_send4>
	HAL_Delay(10);
 8000808:	200a      	movs	r0, #10
 800080a:	f000 fffd 	bl	8001808 <HAL_Delay>
	lcd_send4(0x20,0x08);
 800080e:	2108      	movs	r1, #8
 8000810:	2020      	movs	r0, #32
 8000812:	f7ff ff5f 	bl	80006d4 <lcd_send4>
	HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f000 fff6 	bl	8001808 <HAL_Delay>

	lcd_send_cmd(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800081c:	2028      	movs	r0, #40	; 0x28
 800081e:	f7ff ff17 	bl	8000650 <lcd_send_cmd>
	HAL_Delay(2);
 8000822:	2002      	movs	r0, #2
 8000824:	f000 fff0 	bl	8001808 <HAL_Delay>
	lcd_send_cmd(LCD_DISPLAYCONTROL | LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF);
 8000828:	2008      	movs	r0, #8
 800082a:	f7ff ff11 	bl	8000650 <lcd_send_cmd>
	HAL_Delay(2);
 800082e:	2002      	movs	r0, #2
 8000830:	f000 ffea 	bl	8001808 <HAL_Delay>
	lcd_send_cmd(LCD_CLEARDISPLAY);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff0b 	bl	8000650 <lcd_send_cmd>
	HAL_Delay(2);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 ffe4 	bl	8001808 <HAL_Delay>
	lcd_send_cmd(LCD_ENTRYMODESET | LCD_ENTRYRIGHT | LCD_ENTRYSHIFTDISABLE);
 8000840:	2006      	movs	r0, #6
 8000842:	f7ff ff05 	bl	8000650 <lcd_send_cmd>
	HAL_Delay(2);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 ffde 	bl	8001808 <HAL_Delay>
	lcd_send_cmd(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800084c:	200c      	movs	r0, #12
 800084e:	f7ff feff 	bl	8000650 <lcd_send_cmd>
	HAL_Delay(2);
 8000852:	2002      	movs	r0, #2
 8000854:	f000 ffd8 	bl	8001808 <HAL_Delay>

}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000030 	.word	0x20000030

08000864 <flag_compare_card>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t flag_compare_card(uint8_t * card_send){
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

		uint8_t flag = 0x00; //card errata -> 0x01; card corretta -> 0x00
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]
		int i = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]

		while(i<5 && flag != 0x01){
 8000874:	e00e      	b.n	8000894 <flag_compare_card+0x30>

			if(card_send[i] != card[i-1]){
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	3b01      	subs	r3, #1
 8000882:	490b      	ldr	r1, [pc, #44]	; (80008b0 <flag_compare_card+0x4c>)
 8000884:	5ccb      	ldrb	r3, [r1, r3]
 8000886:	429a      	cmp	r2, r3
 8000888:	d001      	beq.n	800088e <flag_compare_card+0x2a>
				flag = 0x01;
 800088a:	2301      	movs	r3, #1
 800088c:	73fb      	strb	r3, [r7, #15]
			}
			i=i+1;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
		while(i<5 && flag != 0x01){
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b04      	cmp	r3, #4
 8000898:	dc02      	bgt.n	80008a0 <flag_compare_card+0x3c>
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d1ea      	bne.n	8000876 <flag_compare_card+0x12>
		}
		return flag;
 80008a0:	7bfb      	ldrb	r3, [r7, #15]

}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000000 	.word	0x20000000

080008b4 <flag_compare_pin>:

uint8_t flag_compare_pin(uint8_t * pin_send){
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

		uint8_t flag = 0x00; //pin errato -> 0x01; pin corretto -> 0x00
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
		int i = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]

		while(i<5 && flag != 0x01){
 80008c4:	e00e      	b.n	80008e4 <flag_compare_pin+0x30>

			if(pin_send[i] != pass[i-1]){
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4413      	add	r3, r2
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	490b      	ldr	r1, [pc, #44]	; (8000900 <flag_compare_pin+0x4c>)
 80008d4:	5ccb      	ldrb	r3, [r1, r3]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d001      	beq.n	80008de <flag_compare_pin+0x2a>
				flag = 0x01;
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
			}
			i=i+1;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
		while(i<5 && flag != 0x01){
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	dc02      	bgt.n	80008f0 <flag_compare_pin+0x3c>
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d1ea      	bne.n	80008c6 <flag_compare_pin+0x12>
		}
		return flag;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000004 	.word	0x20000004
 8000904:	00000000 	.word	0x00000000

08000908 <buzzer_on>:

void buzzer_on(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

		htim3.Instance->CCR1 = 50; // ON
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <buzzer_on+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2232      	movs	r2, #50	; 0x32
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
		delay(4000); // wait for 400 ms
 8000914:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8000928 <buzzer_on+0x20>
 8000918:	f000 fec6 	bl	80016a8 <delay>
		htim3.Instance->CCR1 = 0; // OFF
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <buzzer_on+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	00000000 	.word	0x00000000
 800092c:	40af4000 	.word	0x40af4000
 8000930:	200000cc 	.word	0x200000cc
 8000934:	00000000 	.word	0x00000000

08000938 <buzzer_err>:

void buzzer_err(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

		htim3.Instance->CCR1 = 50; // ON
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <buzzer_err+0x68>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2232      	movs	r2, #50	; 0x32
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
		delay(1000); //wait for 100 ms
 8000944:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000998 <buzzer_err+0x60>
 8000948:	f000 feae 	bl	80016a8 <delay>
		htim3.Instance->CCR1 = 0; // OFF
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <buzzer_err+0x68>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
		delay(1000); // wait for 100 ms
 8000954:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000998 <buzzer_err+0x60>
 8000958:	f000 fea6 	bl	80016a8 <delay>
		htim3.Instance->CCR1 = 50; // ON
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <buzzer_err+0x68>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2232      	movs	r2, #50	; 0x32
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
		delay(1000); // wait for 100 ms
 8000964:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8000998 <buzzer_err+0x60>
 8000968:	f000 fe9e 	bl	80016a8 <delay>
		htim3.Instance->CCR1 = 0;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <buzzer_err+0x68>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
		delay(1000); // wait for 100 ms
 8000974:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8000998 <buzzer_err+0x60>
 8000978:	f000 fe96 	bl	80016a8 <delay>
		htim3.Instance->CCR1 = 50;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <buzzer_err+0x68>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2232      	movs	r2, #50	; 0x32
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
		delay(1000); // wait for 100 ms
 8000984:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8000998 <buzzer_err+0x60>
 8000988:	f000 fe8e 	bl	80016a8 <delay>
		htim3.Instance->CCR1 = 0;
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <buzzer_err+0x68>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2200      	movs	r2, #0
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	00000000 	.word	0x00000000
 800099c:	408f4000 	.word	0x408f4000
 80009a0:	200000cc 	.word	0x200000cc
 80009a4:	00000000 	.word	0x00000000

080009a8 <reset_lcd>:

void reset_lcd(){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

		lcd_clear();
 80009ac:	f7ff fed9 	bl	8000762 <lcd_clear>
		delay(1000); //wait 100 ms
 80009b0:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80009d0 <reset_lcd+0x28>
 80009b4:	f000 fe78 	bl	80016a8 <delay>
		lcd_write("   INSERISCI   ");
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <reset_lcd+0x30>)
 80009ba:	f7ff febd 	bl	8000738 <lcd_write>
		lcd_set_cursor(1, 0);
 80009be:	2100      	movs	r1, #0
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fed5 	bl	8000770 <lcd_set_cursor>
		lcd_write("   PIN O CARD   ");
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <reset_lcd+0x34>)
 80009c8:	f7ff feb6 	bl	8000738 <lcd_write>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	00000000 	.word	0x00000000
 80009d4:	408f4000 	.word	0x408f4000
 80009d8:	08006468 	.word	0x08006468
 80009dc:	08006478 	.word	0x08006478

080009e0 <open_door>:

void open_door(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

		lcd_clear();
 80009e4:	f7ff febd 	bl	8000762 <lcd_clear>
		delay(1000); // wait 100 ms
 80009e8:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8000a40 <open_door+0x60>
 80009ec:	f000 fe5c 	bl	80016a8 <delay>
		lcd_write("CARD/PIN: OK");
 80009f0:	4817      	ldr	r0, [pc, #92]	; (8000a50 <open_door+0x70>)
 80009f2:	f7ff fea1 	bl	8000738 <lcd_write>
		buzzer_on();
 80009f6:	f7ff ff87 	bl	8000908 <buzzer_on>
		//GREEN LED ON
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	4815      	ldr	r0, [pc, #84]	; (8000a54 <open_door+0x74>)
 8000a00:	f001 fa28 	bl	8001e54 <HAL_GPIO_WritePin>

		delay(10000); // wait 1 s
 8000a04:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000a48 <open_door+0x68>
 8000a08:	f000 fe4e 	bl	80016a8 <delay>
		lcd_set_cursor(1, 0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff feae 	bl	8000770 <lcd_set_cursor>
		lcd_write("APERTURA...");
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <open_door+0x78>)
 8000a16:	f7ff fe8f 	bl	8000738 <lcd_write>
		delay(1000); // wait 100 ms
 8000a1a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8000a40 <open_door+0x60>
 8000a1e:	f000 fe43 	bl	80016a8 <delay>

		//STEP MOTOR
		stepper_step_angle (80, 1, 13); //open the door: 1 -> ruota in senso orario
 8000a22:	210d      	movs	r1, #13
 8000a24:	2001      	movs	r0, #1
 8000a26:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000a5c <open_door+0x7c>
 8000a2a:	f000 fc8b 	bl	8001344 <stepper_step_angle>
		delay(10000); // wait 1 s
 8000a2e:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8000a48 <open_door+0x68>
 8000a32:	f000 fe39 	bl	80016a8 <delay>


}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	f3af 8000 	nop.w
 8000a40:	00000000 	.word	0x00000000
 8000a44:	408f4000 	.word	0x408f4000
 8000a48:	00000000 	.word	0x00000000
 8000a4c:	40c38800 	.word	0x40c38800
 8000a50:	0800648c 	.word	0x0800648c
 8000a54:	48000c00 	.word	0x48000c00
 8000a58:	0800649c 	.word	0x0800649c
 8000a5c:	42a00000 	.word	0x42a00000

08000a60 <close_door>:


void close_door(){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

		lcd_clear();
 8000a64:	f7ff fe7d 	bl	8000762 <lcd_clear>
		delay(1000);
 8000a68:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8000aa8 <close_door+0x48>
 8000a6c:	f000 fe1c 	bl	80016a8 <delay>
		lcd_set_cursor(1, 0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fe7c 	bl	8000770 <lcd_set_cursor>
		lcd_write("CHIUSURA...");
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <close_door+0x58>)
 8000a7a:	f7ff fe5d 	bl	8000738 <lcd_write>
		delay(1000); //wait 100 ms
 8000a7e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000aa8 <close_door+0x48>
 8000a82:	f000 fe11 	bl	80016a8 <delay>
		stepper_step_angle (80, 0, 13); //close the door: 0 -> ruota in senso antiorario
 8000a86:	210d      	movs	r1, #13
 8000a88:	2000      	movs	r0, #0
 8000a8a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000abc <close_door+0x5c>
 8000a8e:	f000 fc59 	bl	8001344 <stepper_step_angle>


		//GREEN LED OFF
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2101      	movs	r1, #1
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <close_door+0x60>)
 8000a98:	f001 f9dc 	bl	8001e54 <HAL_GPIO_WritePin>
		delay(10000);
 8000a9c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8000ab0 <close_door+0x50>
 8000aa0:	f000 fe02 	bl	80016a8 <delay>

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	00000000 	.word	0x00000000
 8000aac:	408f4000 	.word	0x408f4000
 8000ab0:	00000000 	.word	0x00000000
 8000ab4:	40c38800 	.word	0x40c38800
 8000ab8:	080064a8 	.word	0x080064a8
 8000abc:	42a00000 	.word	0x42a00000
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	00000000 	.word	0x00000000

08000ac8 <card_pin_error>:


void card_pin_error(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

		//RED LED ON
		buzzer_err();
 8000acc:	f7ff ff34 	bl	8000938 <buzzer_err>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4810      	ldr	r0, [pc, #64]	; (8000b18 <card_pin_error+0x50>)
 8000ad6:	f001 f9bd 	bl	8001e54 <HAL_GPIO_WritePin>
		lcd_clear();
 8000ada:	f7ff fe42 	bl	8000762 <lcd_clear>
		delay(1000); // wait for 100 ms
 8000ade:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000b08 <card_pin_error+0x40>
 8000ae2:	f000 fde1 	bl	80016a8 <delay>
		lcd_write("CARD/PIN: ERRORE");
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <card_pin_error+0x54>)
 8000ae8:	f7ff fe26 	bl	8000738 <lcd_write>
		delay(20000); // wait for 2 s
 8000aec:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8000b10 <card_pin_error+0x48>
 8000af0:	f000 fdda 	bl	80016a8 <delay>
		//RED LED OFF
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2104      	movs	r1, #4
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <card_pin_error+0x50>)
 8000afa:	f001 f9ab 	bl	8001e54 <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	f3af 8000 	nop.w
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	408f4000 	.word	0x408f4000
 8000b10:	00000000 	.word	0x00000000
 8000b14:	40d38800 	.word	0x40d38800
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	080064b4 	.word	0x080064b4

08000b20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

		cont = cont + 1;
 8000b28:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000b30:	6013      	str	r3, [r2, #0]

		//WRITE ON LCD "PIN: ****"
		if(recvbuffer[0] == 0x00){
 8000b32:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <HAL_UART_RxCpltCallback+0xf4>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d111      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x3e>
			switch(cont){
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d109      	bne.n	8000b56 <HAL_UART_RxCpltCallback+0x36>
			case 1:
					lcd_clear();
 8000b42:	f7ff fe0e 	bl	8000762 <lcd_clear>
					delay(1000);// wait 100 ms
 8000b46:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8000c00 <HAL_UART_RxCpltCallback+0xe0>
 8000b4a:	f000 fdad 	bl	80016a8 <delay>
					lcd_write("PIN: ");
 8000b4e:	4832      	ldr	r0, [pc, #200]	; (8000c18 <HAL_UART_RxCpltCallback+0xf8>)
 8000b50:	f7ff fdf2 	bl	8000738 <lcd_write>
					break;
 8000b54:	e004      	b.n	8000b60 <HAL_UART_RxCpltCallback+0x40>

			default:
					lcd_write("*");
 8000b56:	4831      	ldr	r0, [pc, #196]	; (8000c1c <HAL_UART_RxCpltCallback+0xfc>)
 8000b58:	f7ff fdee 	bl	8000738 <lcd_write>
					break;
 8000b5c:	e000      	b.n	8000b60 <HAL_UART_RxCpltCallback+0x40>
			}
		}
 8000b5e:	bf00      	nop

		if(cont == 5) {
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d13c      	bne.n	8000be2 <HAL_UART_RxCpltCallback+0xc2>

			switch(recvbuffer[0]){
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <HAL_UART_RxCpltCallback+0xf4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_UART_RxCpltCallback+0x56>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d008      	beq.n	8000b86 <HAL_UART_RxCpltCallback+0x66>
						break;
			case 0x01:
						flag_err = flag_compare_card(recvbuffer);
						break;
			default:
						break;
 8000b74:	e00f      	b.n	8000b96 <HAL_UART_RxCpltCallback+0x76>
						flag_err = flag_compare_pin(recvbuffer);
 8000b76:	4827      	ldr	r0, [pc, #156]	; (8000c14 <HAL_UART_RxCpltCallback+0xf4>)
 8000b78:	f7ff fe9c 	bl	80008b4 <flag_compare_pin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000b82:	701a      	strb	r2, [r3, #0]
						break;
 8000b84:	e007      	b.n	8000b96 <HAL_UART_RxCpltCallback+0x76>
						flag_err = flag_compare_card(recvbuffer);
 8000b86:	4823      	ldr	r0, [pc, #140]	; (8000c14 <HAL_UART_RxCpltCallback+0xf4>)
 8000b88:	f7ff fe6c 	bl	8000864 <flag_compare_card>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000b92:	701a      	strb	r2, [r3, #0]
						break;
 8000b94:	bf00      	nop
			}

			if(flag_err == 0x00){  //correct pin or card
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d110      	bne.n	8000bc0 <HAL_UART_RxCpltCallback+0xa0>
				open_door();
 8000b9e:	f7ff ff1f 	bl	80009e0 <open_door>
				lcd_clear();
 8000ba2:	f7ff fdde 	bl	8000762 <lcd_clear>
				delay(50000);// wait for 5 s
 8000ba6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8000c08 <HAL_UART_RxCpltCallback+0xe8>
 8000baa:	f000 fd7d 	bl	80016a8 <delay>
				close_door();
 8000bae:	f7ff ff57 	bl	8000a60 <close_door>
				delay(1000);//wait for 100 ms
 8000bb2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8000c00 <HAL_UART_RxCpltCallback+0xe0>
 8000bb6:	f000 fd77 	bl	80016a8 <delay>
				reset_lcd();
 8000bba:	f7ff fef5 	bl	80009a8 <reset_lcd>
 8000bbe:	e003      	b.n	8000bc8 <HAL_UART_RxCpltCallback+0xa8>

		}
		else { // wrong pin or card

				card_pin_error();
 8000bc0:	f7ff ff82 	bl	8000ac8 <card_pin_error>
				reset_lcd();
 8000bc4:	f7ff fef0 	bl	80009a8 <reset_lcd>
		}

		  HAL_UART_Transmit(&huart1, &send, 1, HAL_MAX_DELAY);
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4915      	ldr	r1, [pc, #84]	; (8000c24 <HAL_UART_RxCpltCallback+0x104>)
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <HAL_UART_RxCpltCallback+0x108>)
 8000bd2:	f004 fa09 	bl	8004fe8 <HAL_UART_Transmit>
		  cont = 0;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
		  flag_err = 0x00;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_UART_RxCpltCallback+0x100>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
		}
		  HAL_UART_Receive_IT(&huart1, &recvbuffer[cont], 1);  //rimettiamo il device in ricezione
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_UART_RxCpltCallback+0xf0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_UART_RxCpltCallback+0xf4>)
 8000be8:	4413      	add	r3, r2
 8000bea:	2201      	movs	r2, #1
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <HAL_UART_RxCpltCallback+0x108>)
 8000bf0:	f004 fa8e 	bl	8005110 <HAL_UART_Receive_IT>

}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	f3af 8000 	nop.w
 8000c00:	00000000 	.word	0x00000000
 8000c04:	408f4000 	.word	0x408f4000
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40e86a00 	.word	0x40e86a00
 8000c10:	200001a4 	.word	0x200001a4
 8000c14:	2000019c 	.word	0x2000019c
 8000c18:	080064c8 	.word	0x080064c8
 8000c1c:	080064d0 	.word	0x080064d0
 8000c20:	200001a8 	.word	0x200001a8
 8000c24:	200001a9 	.word	0x200001a9
 8000c28:	20000118 	.word	0x20000118

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fd84 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f826 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f9b8 	bl	8000fac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c3c:	f000 f880 	bl	8000d40 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c40:	f000 f8be 	bl	8000dc0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c44:	f000 f982 	bl	8000f4c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000c48:	f000 f908 	bl	8000e5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <main+0x44>)
 8000c4e:	f003 f935 	bl	8003ebc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c52:	2100      	movs	r1, #0
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <main+0x48>)
 8000c56:	f003 f9f5 	bl	8004044 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, recvbuffer, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4906      	ldr	r1, [pc, #24]	; (8000c78 <main+0x4c>)
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <main+0x50>)
 8000c60:	f004 fa56 	bl	8005110 <HAL_UART_Receive_IT>
  lcd_init(&hi2c1);
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <main+0x54>)
 8000c66:	f7ff fdb3 	bl	80007d0 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  reset_lcd();
 8000c6a:	f7ff fe9d 	bl	80009a8 <reset_lcd>


  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <main+0x42>
 8000c70:	20000080 	.word	0x20000080
 8000c74:	200000cc 	.word	0x200000cc
 8000c78:	2000019c 	.word	0x2000019c
 8000c7c:	20000118 	.word	0x20000118
 8000c80:	20000034 	.word	0x20000034

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09e      	sub	sp, #120	; 0x78
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f005 fbd4 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	223c      	movs	r2, #60	; 0x3c
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 fbc6 	bl	8006440 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cbc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cd4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cd8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fc70 	bl	80025c4 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cea:	f000 fa29 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fc98 	bl	8003640 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d16:	f000 fa13 	bl	8001140 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000d1a:	2321      	movs	r3, #33	; 0x21
 8000d1c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 febf 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d34:	f000 fa04 	bl	8001140 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3778      	adds	r7, #120	; 0x78
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <MX_I2C1_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <MX_I2C1_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d7c:	f001 f882 	bl	8001e84 <HAL_I2C_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 f9db 	bl	8001140 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d8e:	f001 fb81 	bl	8002494 <HAL_I2CEx_ConfigAnalogFilter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f000 f9d2 	bl	8001140 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000da0:	f001 fbc3 	bl	800252a <HAL_I2CEx_ConfigDigitalFilter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 f9c9 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000034 	.word	0x20000034
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	2000090e 	.word	0x2000090e

08000dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000de8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000dec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff-1;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000df6:	f06f 0201 	mvn.w	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e08:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000e0a:	f002 ffff 	bl	8003e0c <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e14:	f000 f994 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000e26:	f003 fb21 	bl	800446c <HAL_TIM_ConfigClockSource>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e30:	f000 f986 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_TIM2_Init+0x98>)
 8000e42:	f004 f803 	bl	8004e4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e4c:	f000 f978 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000080 	.word	0x20000080

08000e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000e90:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <MX_TIM3_Init+0xec>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1800-1;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000e96:	f240 7207 	movw	r2, #1799	; 0x707
 8000e9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000ea4:	2263      	movs	r2, #99	; 0x63
 8000ea6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eb4:	4823      	ldr	r0, [pc, #140]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000eb6:	f002 ffa9 	bl	8003e0c <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ec0:	f000 f93e 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481c      	ldr	r0, [pc, #112]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000ed2:	f003 facb 	bl	800446c <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000edc:	f000 f930 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ee0:	4818      	ldr	r0, [pc, #96]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000ee2:	f003 f84d 	bl	8003f80 <HAL_TIM_PWM_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000eec:	f000 f928 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4811      	ldr	r0, [pc, #68]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000f00:	f003 ffa4 	bl	8004e4c <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f0a:	f000 f919 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0e:	2360      	movs	r3, #96	; 0x60
 8000f10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000f26:	f003 f98d 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f30:	f000 f906 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_TIM3_Init+0xe8>)
 8000f36:	f000 faed 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000cc 	.word	0x200000cc
 8000f48:	40000400 	.word	0x40000400

08000f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_USART1_UART_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f90:	f003 ffdc 	bl	8004f4c <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 f8d1 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000118 	.word	0x20000118
 8000fa8:	40013800 	.word	0x40013800

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc2:	4b5c      	ldr	r3, [pc, #368]	; (8001134 <MX_GPIO_Init+0x188>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a5b      	ldr	r2, [pc, #364]	; (8001134 <MX_GPIO_Init+0x188>)
 8000fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b59      	ldr	r3, [pc, #356]	; (8001134 <MX_GPIO_Init+0x188>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b56      	ldr	r3, [pc, #344]	; (8001134 <MX_GPIO_Init+0x188>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a55      	ldr	r2, [pc, #340]	; (8001134 <MX_GPIO_Init+0x188>)
 8000fe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <MX_GPIO_Init+0x188>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff2:	4b50      	ldr	r3, [pc, #320]	; (8001134 <MX_GPIO_Init+0x188>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <MX_GPIO_Init+0x188>)
 8000ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <MX_GPIO_Init+0x188>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <MX_GPIO_Init+0x188>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a49      	ldr	r2, [pc, #292]	; (8001134 <MX_GPIO_Init+0x188>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b47      	ldr	r3, [pc, #284]	; (8001134 <MX_GPIO_Init+0x188>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <MX_GPIO_Init+0x188>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a43      	ldr	r2, [pc, #268]	; (8001134 <MX_GPIO_Init+0x188>)
 8001028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <MX_GPIO_Init+0x188>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <MX_GPIO_Init+0x188>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a3d      	ldr	r2, [pc, #244]	; (8001134 <MX_GPIO_Init+0x188>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <MX_GPIO_Init+0x188>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001052:	2200      	movs	r2, #0
 8001054:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001058:	4837      	ldr	r0, [pc, #220]	; (8001138 <MX_GPIO_Init+0x18c>)
 800105a:	f000 fefb 	bl	8001e54 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	211e      	movs	r1, #30
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fef5 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_led_Pin|red_led_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2105      	movs	r1, #5
 800106e:	4833      	ldr	r0, [pc, #204]	; (800113c <MX_GPIO_Init+0x190>)
 8001070:	f000 fef0 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8001074:	2336      	movs	r3, #54	; 0x36
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001078:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	482b      	ldr	r0, [pc, #172]	; (8001138 <MX_GPIO_Init+0x18c>)
 800108a:	f000 fd69 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800108e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001092:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4824      	ldr	r0, [pc, #144]	; (8001138 <MX_GPIO_Init+0x18c>)
 80010a8:	f000 fd5a 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 80010ac:	231e      	movs	r3, #30
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f000 fd4b 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010ca:	23e0      	movs	r3, #224	; 0xe0
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010da:	2305      	movs	r3, #5
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fd3a 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80010ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80010fe:	230e      	movs	r3, #14
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110c:	f000 fd28 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin red_led_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|red_led_Pin;
 8001110:	2305      	movs	r3, #5
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_GPIO_Init+0x190>)
 8001128:	f000 fd1a 	bl	8001b60 <HAL_GPIO_Init>

}
 800112c:	bf00      	nop
 800112e:	3730      	adds	r7, #48	; 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000
 8001138:	48001000 	.word	0x48001000
 800113c:	48000c00 	.word	0x48000c00

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>

0800114a <stepper_set_rpm>:
#include "stm32f3xx_hal.h"
#include "stepper_motor.h"
#include "timer.h"

void stepper_set_rpm (int rpm)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	delay(600000/stepsperrev/rpm); // rpm = n_giri(60") = (steps_angle/360) * n_step(1") * 60" = stepsperrev * 60 * 1/t_s --> t_s = 60s / stepsperrev / rpm
 8001152:	2292      	movs	r2, #146	; 0x92
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	fb92 f3f3 	sdiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f986 	bl	800046c <__aeabi_i2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	ec43 2b10 	vmov	d0, r2, r3
 8001168:	f000 fa9e 	bl	80016a8 <delay>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <stepper_half_drive>:

void stepper_half_drive (int step)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	switch (step){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b07      	cmp	r3, #7
 8001180:	f200 80dc 	bhi.w	800133c <stepper_half_drive+0x1c8>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <stepper_half_drive+0x18>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	080011ad 	.word	0x080011ad
 8001190:	080011df 	.word	0x080011df
 8001194:	08001211 	.word	0x08001211
 8001198:	08001243 	.word	0x08001243
 800119c:	08001275 	.word	0x08001275
 80011a0:	080012a7 	.word	0x080012a7
 80011a4:	080012d9 	.word	0x080012d9
 80011a8:	0800130b 	.word	0x0800130b
			case 0:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 80011ac:	2201      	movs	r2, #1
 80011ae:	2102      	movs	r1, #2
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f000 fe4e 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80011b8:	2200      	movs	r2, #0
 80011ba:	2104      	movs	r1, #4
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f000 fe48 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80011c4:	2200      	movs	r2, #0
 80011c6:	2108      	movs	r1, #8
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f000 fe42 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80011d0:	2200      	movs	r2, #0
 80011d2:	2110      	movs	r1, #16
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 fe3c 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 80011dc:	e0ae      	b.n	800133c <stepper_half_drive+0x1c8>

			case 1:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 80011de:	2201      	movs	r2, #1
 80011e0:	2102      	movs	r1, #2
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f000 fe35 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 80011ea:	2201      	movs	r2, #1
 80011ec:	2104      	movs	r1, #4
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f000 fe2f 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80011f6:	2200      	movs	r2, #0
 80011f8:	2108      	movs	r1, #8
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f000 fe29 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8001202:	2200      	movs	r2, #0
 8001204:	2110      	movs	r1, #16
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f000 fe23 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 800120e:	e095      	b.n	800133c <stepper_half_drive+0x1c8>

			case 2:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8001210:	2200      	movs	r2, #0
 8001212:	2102      	movs	r1, #2
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f000 fe1c 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 800121c:	2201      	movs	r2, #1
 800121e:	2104      	movs	r1, #4
 8001220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001224:	f000 fe16 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 8001228:	2200      	movs	r2, #0
 800122a:	2108      	movs	r1, #8
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f000 fe10 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8001234:	2200      	movs	r2, #0
 8001236:	2110      	movs	r1, #16
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f000 fe0a 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 8001240:	e07c      	b.n	800133c <stepper_half_drive+0x1c8>

			case 3:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8001242:	2200      	movs	r2, #0
 8001244:	2102      	movs	r1, #2
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fe03 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 800124e:	2201      	movs	r2, #1
 8001250:	2104      	movs	r1, #4
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f000 fdfd 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 800125a:	2201      	movs	r2, #1
 800125c:	2108      	movs	r1, #8
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f000 fdf7 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8001266:	2200      	movs	r2, #0
 8001268:	2110      	movs	r1, #16
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f000 fdf1 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 8001272:	e063      	b.n	800133c <stepper_half_drive+0x1c8>

			case 4:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8001274:	2200      	movs	r2, #0
 8001276:	2102      	movs	r1, #2
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f000 fdea 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8001280:	2200      	movs	r2, #0
 8001282:	2104      	movs	r1, #4
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f000 fde4 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 800128c:	2201      	movs	r2, #1
 800128e:	2108      	movs	r1, #8
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f000 fdde 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f000 fdd8 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 80012a4:	e04a      	b.n	800133c <stepper_half_drive+0x1c8>

			case 5:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80012a6:	2200      	movs	r2, #0
 80012a8:	2102      	movs	r1, #2
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f000 fdd1 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f000 fdcb 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 80012be:	2201      	movs	r2, #1
 80012c0:	2108      	movs	r1, #8
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f000 fdc5 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80012ca:	2201      	movs	r2, #1
 80012cc:	2110      	movs	r1, #16
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f000 fdbf 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 80012d6:	e031      	b.n	800133c <stepper_half_drive+0x1c8>

			case 6:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f000 fdb8 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2104      	movs	r1, #4
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f000 fdb2 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80012f0:	2200      	movs	r2, #0
 80012f2:	2108      	movs	r1, #8
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fdac 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80012fc:	2201      	movs	r2, #1
 80012fe:	2110      	movs	r1, #16
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f000 fda6 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 8001308:	e018      	b.n	800133c <stepper_half_drive+0x1c8>

			case 7:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 800130a:	2201      	movs	r2, #1
 800130c:	2102      	movs	r1, #2
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f000 fd9f 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8001316:	2200      	movs	r2, #0
 8001318:	2104      	movs	r1, #4
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f000 fd99 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 8001322:	2200      	movs	r2, #0
 8001324:	2108      	movs	r1, #8
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f000 fd93 	bl	8001e54 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 800132e:	2201      	movs	r2, #1
 8001330:	2110      	movs	r1, #16
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f000 fd8d 	bl	8001e54 <HAL_GPIO_WritePin>
				  break;
 800133a:	bf00      	nop

			}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <stepper_step_angle>:

void stepper_step_angle (float angle, int direction, int rpm)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	ed87 0a03 	vstr	s0, [r7, #12]
 800134e:	60b8      	str	r0, [r7, #8]
 8001350:	6079      	str	r1, [r7, #4]
	int numberofsequences = (int) ((angle*512)/360); // (512 : 360 = x : angle)
 8001352:	edd7 7a03 	vldr	s15, [r7, #12]
 8001356:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80013d8 <stepper_step_angle+0x94>
 800135a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800135e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80013dc <stepper_step_angle+0x98>
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 3a90 	vmov	r3, s15
 800136e:	613b      	str	r3, [r7, #16]

	for (int seq=0; seq < numberofsequences; seq++)
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	e027      	b.n	80013c6 <stepper_step_angle+0x82>
	{
		if (direction == 0) // ruota in senso antiorario
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10f      	bne.n	800139c <stepper_step_angle+0x58>
		{
			for (int step=7; step >= 0; step--)
 800137c:	2307      	movs	r3, #7
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	e008      	b.n	8001394 <stepper_step_angle+0x50>
			{
				stepper_half_drive(step);
 8001382:	69b8      	ldr	r0, [r7, #24]
 8001384:	f7ff fef6 	bl	8001174 <stepper_half_drive>
				stepper_set_rpm(rpm);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fede 	bl	800114a <stepper_set_rpm>
			for (int step=7; step >= 0; step--)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	3b01      	subs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	daf3      	bge.n	8001382 <stepper_step_angle+0x3e>
 800139a:	e011      	b.n	80013c0 <stepper_step_angle+0x7c>
			}

		}

		else if (direction == 1) //ruota in senso orario
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10e      	bne.n	80013c0 <stepper_step_angle+0x7c>
		{
			for (int step=0; step < 8; step++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e008      	b.n	80013ba <stepper_step_angle+0x76>
			{
				stepper_half_drive(step);
 80013a8:	6978      	ldr	r0, [r7, #20]
 80013aa:	f7ff fee3 	bl	8001174 <stepper_half_drive>
				stepper_set_rpm(rpm);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fecb 	bl	800114a <stepper_set_rpm>
			for (int step=0; step < 8; step++)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b07      	cmp	r3, #7
 80013be:	ddf3      	ble.n	80013a8 <stepper_step_angle+0x64>
	for (int seq=0; seq < numberofsequences; seq++)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3301      	adds	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbd3      	blt.n	8001376 <stepper_step_angle+0x32>
			}
		}
	}

}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	44000000 	.word	0x44000000
 80013dc:	43b40000 	.word	0x43b40000

080013e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_MspInit+0x44>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MspInit+0x44>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6193      	str	r3, [r2, #24]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_MspInit+0x44>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_MspInit+0x44>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_MspInit+0x44>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_MspInit+0x44>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001416:	2007      	movs	r0, #7
 8001418:	f000 faea 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_I2C_MspInit+0x7c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d127      	bne.n	800149a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_I2C_MspInit+0x80>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <HAL_I2C_MspInit+0x80>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_I2C_MspInit+0x80>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C1_SCL_Pin|LCD_I2C1_SDA__Pin;
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001466:	2312      	movs	r3, #18
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001472:	2304      	movs	r3, #4
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <HAL_I2C_MspInit+0x84>)
 800147e:	f000 fb6f 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_I2C_MspInit+0x80>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_I2C_MspInit+0x80>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_I2C_MspInit+0x80>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40005400 	.word	0x40005400
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d10c      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_TIM_Base_MspInit+0x5c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_TIM_Base_MspInit+0x5c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_TIM_Base_MspInit+0x5c>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014da:	e010      	b.n	80014fe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_TIM_Base_MspInit+0x60>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10b      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_TIM_Base_MspInit+0x5c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_TIM_Base_MspInit+0x5c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_TIM_Base_MspInit+0x5c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	40000400 	.word	0x40000400

08001514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_TIM_MspPostInit+0x64>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d11b      	bne.n	800156e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_TIM_MspPostInit+0x68>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_TIM_MspPostInit+0x68>)
 800153c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_TIM_MspPostInit+0x68>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154e:	2340      	movs	r3, #64	; 0x40
 8001550:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_TIM_MspPostInit+0x6c>)
 800156a:	f000 faf9 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40000400 	.word	0x40000400
 800157c:	40021000 	.word	0x40021000
 8001580:	48000800 	.word	0x48000800

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_UART_MspInit+0x8c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12f      	bne.n	8001606 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_UART_MspInit+0x90>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_UART_MspInit+0x90>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_UART_MspInit+0x90>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_UART_MspInit+0x90>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_UART_MspInit+0x90>)
 80015c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_UART_MspInit+0x90>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015d6:	2330      	movs	r3, #48	; 0x30
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e6:	2307      	movs	r3, #7
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <HAL_UART_MspInit+0x94>)
 80015f2:	f000 fab5 	bl	8001b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2025      	movs	r0, #37	; 0x25
 80015fc:	f000 fa03 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001600:	2025      	movs	r0, #37	; 0x25
 8001602:	f000 fa1c 	bl	8001a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40013800 	.word	0x40013800
 8001614:	40021000 	.word	0x40021000
 8001618:	48000800 	.word	0x48000800

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f8ae 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USART1_IRQHandler+0x10>)
 8001676:	f003 fd99 	bl	80051ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000118 	.word	0x20000118

08001684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <delay>:
 *      Author: biagi
 */
#include "timer.h"

void delay(double t) // 1 s --> t = 10000
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0b00 	vstr	d0, [r7]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <delay+0x3c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80016ba:	bf00      	nop
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <delay+0x3c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fec2 	bl	800044c <__aeabi_ui2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d0:	f7fe ffb4 	bl	800063c <__aeabi_dcmpgt>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <delay+0x14>
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000080 	.word	0x20000080

080016e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0b      	ldr	r4, [pc, #44]	; (8001734 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001712:	f7ff ffb7 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f004 fe6f 	bl	80063f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171a:	f7ff fa87 	bl	8000c2c <main>

0800171e <LoopForever>:

LoopForever:
    b LoopForever
 800171e:	e7fe      	b.n	800171e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001720:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800172c:	08006514 	.word	0x08006514
  ldr r2, =_sbss
 8001730:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001734:	200001b0 	.word	0x200001b0

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x28>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x28>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f94f 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fe42 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000

08001768 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f967 	bl	8001a5a <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f92f 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000010 	.word	0x20000010
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000010 	.word	0x20000010
 80017ec:	200001ac 	.word	0x200001ac

080017f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200001ac 	.word	0x200001ac

08001808 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000010 	.word	0x20000010

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff3e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff31 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2204      	movs	r2, #4
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e020      	b.n	8001ad8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 020e 	bic.w	r2, r2, #14
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d005      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e027      	b.n	8001b56 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 020e 	bic.w	r2, r2, #14
 8001b14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
    } 
  }
  return status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	e154      	b.n	8001e1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8146 	beq.w	8001e14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x40>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d017      	beq.n	8001c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d123      	bne.n	8001c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80a0 	beq.w	8001e14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cec:	4a53      	ldr	r2, [pc, #332]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d16:	d019      	beq.n	8001d4c <HAL_GPIO_Init+0x1ec>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a49      	ldr	r2, [pc, #292]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_GPIO_Init+0x1e8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00d      	beq.n	8001d44 <HAL_GPIO_Init+0x1e4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a47      	ldr	r2, [pc, #284]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1e0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_Init+0x1dc>
 8001d38:	2304      	movs	r3, #4
 8001d3a:	e008      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d40:	2303      	movs	r3, #3
 8001d42:	e004      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	f002 0203 	and.w	r2, r2, #3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4093      	lsls	r3, r2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d5e:	4937      	ldr	r1, [pc, #220]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dba:	4a25      	ldr	r2, [pc, #148]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f47f aea3 	bne.w	8001b70 <HAL_GPIO_Init+0x10>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800
 8001e48:	48000c00 	.word	0x48000c00
 8001e4c:	48001000 	.word	0x48001000
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e081      	b.n	8001f9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fabc 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e006      	b.n	8001f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d104      	bne.n	8001f1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69d9      	ldr	r1, [r3, #28]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	f040 80da 	bne.w	800217a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_I2C_Master_Transmit+0x30>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0d3      	b.n	800217c <HAL_I2C_Master_Transmit+0x1d8>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fdc:	f7ff fc08 	bl	80017f0 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2319      	movs	r3, #25
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f8f0 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0be      	b.n	800217c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2221      	movs	r2, #33	; 0x21
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2210      	movs	r2, #16
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	893a      	ldrh	r2, [r7, #8]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2bff      	cmp	r3, #255	; 0xff
 800202e:	d90e      	bls.n	800204e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	22ff      	movs	r2, #255	; 0xff
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	b2da      	uxtb	r2, r3
 800203c:	8979      	ldrh	r1, [r7, #10]
 800203e:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_I2C_Master_Transmit+0x1e0>)
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f9f6 	bl	8002438 <I2C_TransferConfig>
 800204c:	e06c      	b.n	8002128 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	b2da      	uxtb	r2, r3
 800205e:	8979      	ldrh	r1, [r7, #10]
 8002060:	4b48      	ldr	r3, [pc, #288]	; (8002184 <HAL_I2C_Master_Transmit+0x1e0>)
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f9e5 	bl	8002438 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800206e:	e05b      	b.n	8002128 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	6a39      	ldr	r1, [r7, #32]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f8ed 	bl	8002254 <I2C_WaitOnTXISFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e07b      	b.n	800217c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d034      	beq.n	8002128 <HAL_I2C_Master_Transmit+0x184>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d130      	bne.n	8002128 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f87f 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e04d      	b.n	800217c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2bff      	cmp	r3, #255	; 0xff
 80020e8:	d90e      	bls.n	8002108 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	22ff      	movs	r2, #255	; 0xff
 80020ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	2300      	movs	r3, #0
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f999 	bl	8002438 <I2C_TransferConfig>
 8002106:	e00f      	b.n	8002128 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002116:	b2da      	uxtb	r2, r3
 8002118:	8979      	ldrh	r1, [r7, #10]
 800211a:	2300      	movs	r3, #0
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f988 	bl	8002438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d19e      	bne.n	8002070 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	6a39      	ldr	r1, [r7, #32]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f8cc 	bl	80022d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e01a      	b.n	800217c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2220      	movs	r2, #32
 800214c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_I2C_Master_Transmit+0x1e4>)
 800215a:	400b      	ands	r3, r1
 800215c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800217a:	2302      	movs	r3, #2
  }
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	80002000 	.word	0x80002000
 8002188:	fe00e800 	.word	0xfe00e800

0800218c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d103      	bne.n	80021aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d007      	beq.n	80021c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	619a      	str	r2, [r3, #24]
  }
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e4:	e022      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d01e      	beq.n	800222c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7ff faff 	bl	80017f0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d113      	bne.n	800222c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f043 0220 	orr.w	r2, r3, #32
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e00f      	b.n	800224c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	429a      	cmp	r2, r3
 8002248:	d0cd      	beq.n	80021e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002260:	e02c      	b.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f870 	bl	800234c <I2C_IsAcknowledgeFailed>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e02a      	b.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d01e      	beq.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7ff fab7 	bl	80017f0 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d113      	bne.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e007      	b.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d1cb      	bne.n	8002262 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e0:	e028      	b.n	8002334 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f830 	bl	800234c <I2C_IsAcknowledgeFailed>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e026      	b.n	8002344 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7ff fa7b 	bl	80017f0 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d113      	bne.n	8002334 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f043 0220 	orr.w	r2, r3, #32
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e007      	b.n	8002344 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b20      	cmp	r3, #32
 8002340:	d1cf      	bne.n	80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b10      	cmp	r3, #16
 8002364:	d161      	bne.n	800242a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002374:	d02b      	beq.n	80023ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002384:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002386:	e022      	b.n	80023ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238e:	d01e      	beq.n	80023ce <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002390:	f7ff fa2e 	bl	80017f0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	429a      	cmp	r2, r3
 800239e:	d302      	bcc.n	80023a6 <I2C_IsAcknowledgeFailed+0x5a>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d113      	bne.n	80023ce <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e02e      	b.n	800242c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d1d5      	bne.n	8002388 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2210      	movs	r2, #16
 80023e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2220      	movs	r2, #32
 80023ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fecd 	bl	800218c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <I2C_IsAcknowledgeFailed+0xe8>)
 80023fe:	400b      	ands	r3, r1
 8002400:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0204 	orr.w	r2, r3, #4
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	fe00e800 	.word	0xfe00e800

08002438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	4613      	mov	r3, r2
 8002448:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <I2C_TransferConfig+0x58>)
 800245a:	430b      	orrs	r3, r1
 800245c:	43db      	mvns	r3, r3
 800245e:	ea02 0103 	and.w	r1, r2, r3
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002468:	7a7b      	ldrb	r3, [r7, #9]
 800246a:	041b      	lsls	r3, r3, #16
 800246c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	431a      	orrs	r2, r3
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	03ff63ff 	.word	0x03ff63ff

08002494 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d138      	bne.n	800251c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e032      	b.n	800251e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e000      	b.n	800251e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
  }
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	d139      	bne.n	80025b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800254a:	2302      	movs	r3, #2
 800254c:	e033      	b.n	80025b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2224      	movs	r2, #36	; 0x24
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800257c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f001 b823 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 817d 	beq.w	80028fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002600:	4bbc      	ldr	r3, [pc, #752]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b04      	cmp	r3, #4
 800260a:	d00c      	beq.n	8002626 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800260c:	4bb9      	ldr	r3, [pc, #740]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d15c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x10e>
 8002618:	4bb6      	ldr	r3, [pc, #728]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d155      	bne.n	80026d2 <HAL_RCC_OscConfig+0x10e>
 8002626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800263a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_RCC_OscConfig+0x94>
 8002652:	4ba8      	ldr	r3, [pc, #672]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	e015      	b.n	8002684 <HAL_RCC_OscConfig+0xc0>
 8002658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800266c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002670:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002674:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002680:	4b9c      	ldr	r3, [pc, #624]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002688:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800268c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002690:	fa92 f2a2 	rbit	r2, r2
 8002694:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002698:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800269c:	fab2 f282 	clz	r2, r2
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f042 0220 	orr.w	r2, r2, #32
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	f002 021f 	and.w	r2, r2, #31
 80026ac:	2101      	movs	r1, #1
 80026ae:	fa01 f202 	lsl.w	r2, r1, r2
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 811f 	beq.w	80028f8 <HAL_RCC_OscConfig+0x334>
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 8116 	bne.w	80028f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f000 bfaf 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12e>
 80026e4:	4b83      	ldr	r3, [pc, #524]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a82      	ldr	r2, [pc, #520]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e036      	b.n	8002760 <HAL_RCC_OscConfig+0x19c>
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x158>
 8002702:	4b7c      	ldr	r3, [pc, #496]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7b      	ldr	r2, [pc, #492]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b79      	ldr	r3, [pc, #484]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a78      	ldr	r2, [pc, #480]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e021      	b.n	8002760 <HAL_RCC_OscConfig+0x19c>
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x184>
 800272e:	4b71      	ldr	r3, [pc, #452]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a70      	ldr	r2, [pc, #448]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b6e      	ldr	r3, [pc, #440]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6d      	ldr	r2, [pc, #436]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0x19c>
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002760:	4b64      	ldr	r3, [pc, #400]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f023 020f 	bic.w	r2, r3, #15
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	495f      	ldr	r1, [pc, #380]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002776:	4313      	orrs	r3, r2
 8002778:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d059      	beq.n	800283e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7ff f831 	bl	80017f0 <HAL_GetTick>
 800278e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff f82c 	bl	80017f0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	; 0x64
 80027a2:	d902      	bls.n	80027aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	f000 bf43 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
 80027aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_OscConfig+0x218>
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e015      	b.n	8002808 <HAL_RCC_OscConfig+0x244>
 80027dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800280c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002810:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002814:	fa92 f2a2 	rbit	r2, r2
 8002818:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800281c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002820:	fab2 f282 	clz	r2, r2
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f042 0220 	orr.w	r2, r2, #32
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f002 021f 	and.w	r2, r2, #31
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ab      	beq.n	8002794 <HAL_RCC_OscConfig+0x1d0>
 800283c:	e05d      	b.n	80028fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe ffd7 	bl	80017f0 <HAL_GetTick>
 8002842:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe ffd2 	bl	80017f0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b64      	cmp	r3, #100	; 0x64
 8002856:	d902      	bls.n	800285e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	f000 bee9 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
 800285e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002862:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002872:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <HAL_RCC_OscConfig+0x2cc>
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e015      	b.n	80028bc <HAL_RCC_OscConfig+0x2f8>
 8002890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002894:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <HAL_RCC_OscConfig+0x330>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028d4:	fab2 f282 	clz	r2, r2
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f042 0220 	orr.w	r2, r2, #32
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f002 021f 	and.w	r2, r2, #31
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ab      	bne.n	8002848 <HAL_RCC_OscConfig+0x284>
 80028f0:	e003      	b.n	80028fa <HAL_RCC_OscConfig+0x336>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 817d 	beq.w	8002c0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002910:	4ba6      	ldr	r3, [pc, #664]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800291c:	4ba3      	ldr	r3, [pc, #652]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d172      	bne.n	8002a0e <HAL_RCC_OscConfig+0x44a>
 8002928:	4ba0      	ldr	r3, [pc, #640]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d16c      	bne.n	8002a0e <HAL_RCC_OscConfig+0x44a>
 8002934:	2302      	movs	r3, #2
 8002936:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002946:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0x3a0>
 800295e:	4b93      	ldr	r3, [pc, #588]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e013      	b.n	800298c <HAL_RCC_OscConfig+0x3c8>
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800297c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002988:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	2202      	movs	r2, #2
 800298e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002992:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800299e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f042 0220 	orr.w	r2, r2, #32
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f002 021f 	and.w	r2, r2, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCC_OscConfig+0x410>
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f000 be2e 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b75      	ldr	r3, [pc, #468]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	21f8      	movs	r1, #248	; 0xf8
 80029ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029f2:	fa91 f1a1 	rbit	r1, r1
 80029f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029fe:	fab1 f181 	clz	r1, r1
 8002a02:	b2c9      	uxtb	r1, r1
 8002a04:	408b      	lsls	r3, r1
 8002a06:	4969      	ldr	r1, [pc, #420]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0c:	e0fd      	b.n	8002c0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8088 	beq.w	8002b30 <HAL_RCC_OscConfig+0x56c>
 8002a20:	2301      	movs	r3, #1
 8002a22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	461a      	mov	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fed0 	bl	80017f0 <HAL_GetTick>
 8002a50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe fecb 	bl	80017f0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	f000 bde2 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4d8>
 8002a96:	4b45      	ldr	r3, [pc, #276]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e013      	b.n	8002ac4 <HAL_RCC_OscConfig+0x500>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ab4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002aca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ace:	fa92 f2a2 	rbit	r2, r2
 8002ad2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ad6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ada:	fab2 f282 	clz	r2, r2
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f042 0220 	orr.w	r2, r2, #32
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f002 021f 	and.w	r2, r2, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0af      	beq.n	8002a56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	21f8      	movs	r1, #248	; 0xf8
 8002b0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b14:	fa91 f1a1 	rbit	r1, r1
 8002b18:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b20:	fab1 f181 	clz	r1, r1
 8002b24:	b2c9      	uxtb	r1, r1
 8002b26:	408b      	lsls	r3, r1
 8002b28:	4920      	ldr	r1, [pc, #128]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
 8002b2e:	e06c      	b.n	8002c0a <HAL_RCC_OscConfig+0x646>
 8002b30:	2301      	movs	r3, #1
 8002b32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	461a      	mov	r2, r3
 8002b58:	2300      	movs	r3, #0
 8002b5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fe48 	bl	80017f0 <HAL_GetTick>
 8002b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b66:	f7fe fe43 	bl	80017f0 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d902      	bls.n	8002b7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	f000 bd5a 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d104      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5ec>
 8002ba6:	4b01      	ldr	r3, [pc, #4]	; (8002bac <HAL_RCC_OscConfig+0x5e8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e015      	b.n	8002bd8 <HAL_RCC_OscConfig+0x614>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bd4:	4bc8      	ldr	r3, [pc, #800]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bde:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002be2:	fa92 f2a2 	rbit	r2, r2
 8002be6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f042 0220 	orr.w	r2, r2, #32
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f002 021f 	and.w	r2, r2, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ad      	bne.n	8002b66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8110 	beq.w	8002e40 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d079      	beq.n	8002d24 <HAL_RCC_OscConfig+0x760>
 8002c30:	2301      	movs	r3, #1
 8002c32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4bab      	ldr	r3, [pc, #684]	; (8002efc <HAL_RCC_OscConfig+0x938>)
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	2301      	movs	r3, #1
 8002c58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fdc9 	bl	80017f0 <HAL_GetTick>
 8002c5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe fdc4 	bl	80017f0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d902      	bls.n	8002c7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	f000 bcdb 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c94:	2202      	movs	r2, #2
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cb8:	2202      	movs	r2, #2
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	fa93 f2a3 	rbit	r2, r3
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd4:	4b88      	ldr	r3, [pc, #544]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	6019      	str	r1, [r3, #0]
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f1a3 	rbit	r1, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cfa:	6019      	str	r1, [r3, #0]
  return result;
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0a0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x6a0>
 8002d22:	e08d      	b.n	8002e40 <HAL_RCC_OscConfig+0x87c>
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d50:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_OscConfig+0x938>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	461a      	mov	r2, r3
 8002d62:	2300      	movs	r3, #0
 8002d64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe fd43 	bl	80017f0 <HAL_GetTick>
 8002d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fe fd3e 	bl	80017f0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d902      	bls.n	8002d86 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f000 bc55 	b.w	8003630 <HAL_RCC_OscConfig+0x106c>
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d8e:	2202      	movs	r2, #2
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002db2:	2202      	movs	r2, #2
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fa93 f2a3 	rbit	r2, r3
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002df0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dfe:	2102      	movs	r1, #2
 8002e00:	6019      	str	r1, [r3, #0]
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f1a3 	rbit	r1, r3
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e18:	6019      	str	r1, [r3, #0]
  return result;
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d197      	bne.n	8002d70 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 81a1 	beq.w	8003198 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d116      	bne.n	8002e96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e68:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e72:	61d3      	str	r3, [r2, #28]
 8002e74:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e8e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCC_OscConfig+0x93c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_RCC_OscConfig+0x93c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_RCC_OscConfig+0x93c>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fc9f 	bl	80017f0 <HAL_GetTick>
 8002eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	e009      	b.n	8002ecc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fe fc9a 	bl	80017f0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	; 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e3b1      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCC_OscConfig+0x93c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCC_OscConfig+0x940>
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a02      	ldr	r2, [pc, #8]	; (8002ef8 <HAL_RCC_OscConfig+0x934>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e03c      	b.n	8002f70 <HAL_RCC_OscConfig+0x9ac>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	10908120 	.word	0x10908120
 8002f00:	40007000 	.word	0x40007000
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x96a>
 8002f14:	4bc1      	ldr	r3, [pc, #772]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4ac0      	ldr	r2, [pc, #768]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	4bbe      	ldr	r3, [pc, #760]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4abd      	ldr	r2, [pc, #756]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f26:	f023 0304 	bic.w	r3, r3, #4
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	e020      	b.n	8002f70 <HAL_RCC_OscConfig+0x9ac>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x994>
 8002f3e:	4bb7      	ldr	r3, [pc, #732]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4ab6      	ldr	r2, [pc, #728]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	4bb4      	ldr	r3, [pc, #720]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4ab3      	ldr	r2, [pc, #716]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6213      	str	r3, [r2, #32]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0x9ac>
 8002f58:	4bb0      	ldr	r3, [pc, #704]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4aaf      	ldr	r2, [pc, #700]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	4bad      	ldr	r3, [pc, #692]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4aac      	ldr	r2, [pc, #688]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8081 	beq.w	8003084 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fc35 	bl	80017f0 <HAL_GetTick>
 8002f86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fc30 	bl	80017f0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e345      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fac:	2202      	movs	r2, #2
 8002fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fea:	601a      	str	r2, [r3, #0]
  return result;
 8002fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ff4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d102      	bne.n	8003010 <HAL_RCC_OscConfig+0xa4c>
 800300a:	4b84      	ldr	r3, [pc, #528]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	e013      	b.n	8003038 <HAL_RCC_OscConfig+0xa74>
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	4b79      	ldr	r3, [pc, #484]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800303c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003040:	2102      	movs	r1, #2
 8003042:	6011      	str	r1, [r2, #0]
 8003044:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003048:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	fa92 f1a2 	rbit	r1, r2
 8003052:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003056:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800305a:	6011      	str	r1, [r2, #0]
  return result;
 800305c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003060:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	fab2 f282 	clz	r2, r2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f002 021f 	and.w	r2, r2, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d084      	beq.n	8002f8c <HAL_RCC_OscConfig+0x9c8>
 8003082:	e07f      	b.n	8003184 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7fe fbb4 	bl	80017f0 <HAL_GetTick>
 8003088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe fbaf 	bl	80017f0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e2c4      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030d2:	2202      	movs	r2, #2
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030ec:	601a      	str	r2, [r3, #0]
  return result;
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d102      	bne.n	8003112 <HAL_RCC_OscConfig+0xb4e>
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	e013      	b.n	800313a <HAL_RCC_OscConfig+0xb76>
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800311a:	2202      	movs	r2, #2
 800311c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	fa93 f2a3 	rbit	r2, r3
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003142:	2102      	movs	r1, #2
 8003144:	6011      	str	r1, [r2, #0]
 8003146:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800314a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	fa92 f1a2 	rbit	r1, r2
 8003154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003158:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800315c:	6011      	str	r1, [r2, #0]
  return result;
 800315e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003162:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	fab2 f282 	clz	r2, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	f002 021f 	and.w	r2, r2, #31
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f202 	lsl.w	r2, r1, r2
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d184      	bne.n	800308e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003184:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8242 	beq.w	800362e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_RCC_OscConfig+0xc58>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	f000 8213 	beq.w	80035de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 8162 	bne.w	800348e <HAL_RCC_OscConfig+0xeca>
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031ee:	601a      	str	r2, [r3, #0]
  return result;
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe faee 	bl	80017f0 <HAL_GetTick>
 8003214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003218:	e00c      	b.n	8003234 <HAL_RCC_OscConfig+0xc70>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe fae6 	bl	80017f0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1fd      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800323c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003262:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0xcba>
 8003278:	4bb0      	ldr	r3, [pc, #704]	; (800353c <HAL_RCC_OscConfig+0xf78>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	e027      	b.n	80032ce <HAL_RCC_OscConfig+0xd0a>
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	4b9c      	ldr	r3, [pc, #624]	; (800353c <HAL_RCC_OscConfig+0xf78>)
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032da:	6011      	str	r1, [r2, #0]
 80032dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	fa92 f1a2 	rbit	r1, r2
 80032ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032f2:	6011      	str	r1, [r2, #0]
  return result;
 80032f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	fab2 f282 	clz	r2, r2
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f042 0220 	orr.w	r2, r2, #32
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	f002 021f 	and.w	r2, r2, #31
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d182      	bne.n	8003220 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331a:	4b88      	ldr	r3, [pc, #544]	; (800353c <HAL_RCC_OscConfig+0xf78>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	430b      	orrs	r3, r1
 800333c:	497f      	ldr	r1, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0xf78>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800334a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800334e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	fa93 f2a3 	rbit	r2, r3
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003366:	601a      	str	r2, [r3, #0]
  return result;
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003370:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800337c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	461a      	mov	r2, r3
 8003384:	2301      	movs	r3, #1
 8003386:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fa32 	bl	80017f0 <HAL_GetTick>
 800338c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003390:	e009      	b.n	80033a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003392:	f7fe fa2d 	bl	80017f0 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e144      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033ca:	601a      	str	r2, [r3, #0]
  return result;
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe2c>
 80033ea:	4b54      	ldr	r3, [pc, #336]	; (800353c <HAL_RCC_OscConfig+0xf78>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	e027      	b.n	8003440 <HAL_RCC_OscConfig+0xe7c>
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	fa93 f2a3 	rbit	r2, r3
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800341e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f2a3 	rbit	r2, r3
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	4b3f      	ldr	r3, [pc, #252]	; (800353c <HAL_RCC_OscConfig+0xf78>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003444:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003452:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	fa92 f1a2 	rbit	r1, r2
 800345c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003460:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003464:	6011      	str	r1, [r2, #0]
  return result;
 8003466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800346a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	fab2 f282 	clz	r2, r2
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	f042 0220 	orr.w	r2, r2, #32
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	f002 021f 	and.w	r2, r2, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f202 	lsl.w	r2, r1, r2
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d082      	beq.n	8003392 <HAL_RCC_OscConfig+0xdce>
 800348c:	e0cf      	b.n	800362e <HAL_RCC_OscConfig+0x106a>
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003496:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800349a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034b2:	601a      	str	r2, [r3, #0]
  return result;
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	461a      	mov	r2, r3
 80034d0:	2300      	movs	r3, #0
 80034d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe f98c 	bl	80017f0 <HAL_GetTick>
 80034d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe f987 	bl	80017f0 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e09e      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	fa93 f2a3 	rbit	r2, r3
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003516:	601a      	str	r2, [r3, #0]
  return result;
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003520:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d104      	bne.n	8003540 <HAL_RCC_OscConfig+0xf7c>
 8003536:	4b01      	ldr	r3, [pc, #4]	; (800353c <HAL_RCC_OscConfig+0xf78>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	e029      	b.n	8003590 <HAL_RCC_OscConfig+0xfcc>
 800353c:	40021000 	.word	0x40021000
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800354c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800356e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f2a3 	rbit	r2, r3
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_OscConfig+0x1078>)
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003594:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003598:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	fa92 f1a2 	rbit	r1, r2
 80035ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035b4:	6011      	str	r1, [r2, #0]
  return result;
 80035b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	fab2 f282 	clz	r2, r2
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	f042 0220 	orr.w	r2, r2, #32
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	f002 021f 	and.w	r2, r2, #31
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f202 	lsl.w	r2, r1, r2
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d180      	bne.n	80034de <HAL_RCC_OscConfig+0xf1a>
 80035dc:	e027      	b.n	800362e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e01e      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_RCC_OscConfig+0x1078>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	429a      	cmp	r2, r3
 8003610:	d10b      	bne.n	800362a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003612:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003616:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b09e      	sub	sp, #120	; 0x78
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e162      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b90      	ldr	r3, [pc, #576]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d910      	bls.n	8003688 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b8d      	ldr	r3, [pc, #564]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	498b      	ldr	r1, [pc, #556]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b89      	ldr	r3, [pc, #548]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e14a      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b82      	ldr	r3, [pc, #520]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	497f      	ldr	r1, [pc, #508]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80dc 	beq.w	800386c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d13c      	bne.n	8003736 <HAL_RCC_ClockConfig+0xf6>
 80036bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xa6>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	e00f      	b.n	8003706 <HAL_RCC_ClockConfig+0xc6>
 80036e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	667b      	str	r3, [r7, #100]	; 0x64
 80036f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f8:	663b      	str	r3, [r7, #96]	; 0x60
 80036fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800370a:	65ba      	str	r2, [r7, #88]	; 0x58
 800370c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f002 021f 	and.w	r2, r2, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d17b      	bne.n	800382a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0f3      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d13c      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x178>
 800373e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <HAL_RCC_ClockConfig+0x128>
 8003762:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e00f      	b.n	8003788 <HAL_RCC_ClockConfig+0x148>
 8003768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
 8003776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003784:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378c:	63ba      	str	r2, [r7, #56]	; 0x38
 800378e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f002 021f 	and.w	r2, r2, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d13a      	bne.n	800382a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b2      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
 80037b8:	2302      	movs	r3, #2
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1a0>
 80037da:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e00d      	b.n	80037fc <HAL_RCC_ClockConfig+0x1bc>
 80037e0:	2302      	movs	r3, #2
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
 80037ec:	2302      	movs	r3, #2
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	2202      	movs	r2, #2
 80037fe:	61ba      	str	r2, [r7, #24]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	fa92 f2a2 	rbit	r2, r2
 8003806:	617a      	str	r2, [r7, #20]
  return result;
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	fab2 f282 	clz	r2, r2
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f042 0220 	orr.w	r2, r2, #32
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f002 021f 	and.w	r2, r2, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e079      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	491a      	ldr	r1, [pc, #104]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fd ffd8 	bl	80017f0 <HAL_GetTick>
 8003840:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fd ffd4 	bl	80017f0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e061      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d214      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4906      	ldr	r1, [pc, #24]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e040      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	491a      	ldr	r1, [pc, #104]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4912      	ldr	r1, [pc, #72]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038e2:	f000 f829 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038e6:	4601      	mov	r1, r0
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f0:	22f0      	movs	r2, #240	; 0xf0
 80038f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	fa92 f2a2 	rbit	r2, r2
 80038fa:	60fa      	str	r2, [r7, #12]
  return result;
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	fab2 f282 	clz	r2, r2
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	40d3      	lsrs	r3, r2
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x2ec>)
 8003908:	5cd3      	ldrb	r3, [r2, r3]
 800390a:	fa21 f303 	lsr.w	r3, r1, r3
 800390e:	4a08      	ldr	r2, [pc, #32]	; (8003930 <HAL_RCC_ClockConfig+0x2f0>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_RCC_ClockConfig+0x2f4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd ff26 	bl	8001768 <HAL_InitTick>
  
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3778      	adds	r7, #120	; 0x78
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	080064d4 	.word	0x080064d4
 8003930:	20000008 	.word	0x20000008
 8003934:	2000000c 	.word	0x2000000c

08003938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b08b      	sub	sp, #44	; 0x2c
 800393c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b04      	cmp	r3, #4
 8003960:	d002      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x30>
 8003962:	2b08      	cmp	r3, #8
 8003964:	d003      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x36>
 8003966:	e03c      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800396a:	623b      	str	r3, [r7, #32]
      break;
 800396c:	e03c      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003974:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003978:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	fa92 f2a2 	rbit	r2, r2
 8003980:	607a      	str	r2, [r7, #4]
  return result;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	fab2 f282 	clz	r2, r2
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	40d3      	lsrs	r3, r2
 800398c:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	220f      	movs	r2, #15
 800399c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	fa92 f2a2 	rbit	r2, r2
 80039a4:	60fa      	str	r2, [r7, #12]
  return result;
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	fab2 f282 	clz	r2, r2
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	40d3      	lsrs	r3, r2
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039c0:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	e004      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	623b      	str	r3, [r7, #32]
      break;
 80039e0:	e002      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80039e4:	623b      	str	r3, [r7, #32]
      break;
 80039e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e8:	6a3b      	ldr	r3, [r7, #32]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	372c      	adds	r7, #44	; 0x2c
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	080064ec 	.word	0x080064ec
 8003a04:	080064fc 	.word	0x080064fc
 8003a08:	003d0900 	.word	0x003d0900

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000008 	.word	0x20000008

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a2a:	f7ff ffef 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2e:	4601      	mov	r1, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	fa92 f2a2 	rbit	r2, r2
 8003a44:	603a      	str	r2, [r7, #0]
  return result;
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	40d3      	lsrs	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	080064e4 	.word	0x080064e4

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a6e:	f7ff ffcd 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	fa92 f2a2 	rbit	r2, r2
 8003a88:	603a      	str	r2, [r7, #0]
  return result;
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	40d3      	lsrs	r3, r2
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	080064e4 	.word	0x080064e4

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b092      	sub	sp, #72	; 0x48
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003abc:	2300      	movs	r3, #0
 8003abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80d4 	beq.w	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad0:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10e      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	61d3      	str	r3, [r2, #28]
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b45      	ldr	r3, [pc, #276]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d118      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a41      	ldr	r2, [pc, #260]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b12:	f7fd fe6d 	bl	80017f0 <HAL_GetTick>
 8003b16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	e008      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7fd fe69 	bl	80017f0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d901      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e169      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b38:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8084 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d07c      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	461a      	mov	r2, r3
 8003b82:	2301      	movs	r3, #1
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d04b      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fd fe19 	bl	80017f0 <HAL_GetTick>
 8003bbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd fe15 	bl	80017f0 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e113      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	2302      	movs	r3, #2
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	61fb      	str	r3, [r7, #28]
  return result;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d108      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c06:	4b01      	ldr	r3, [pc, #4]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	e00d      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
 8003c14:	10908100 	.word	0x10908100
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2202      	movs	r2, #2
 8003c2a:	613a      	str	r2, [r7, #16]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	fa92 f2a2 	rbit	r2, r2
 8003c32:	60fa      	str	r2, [r7, #12]
  return result;
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f002 021f 	and.w	r2, r2, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0b7      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c52:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	496a      	ldr	r1, [pc, #424]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6c:	4b66      	ldr	r3, [pc, #408]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c84:	4b60      	ldr	r3, [pc, #384]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f023 0203 	bic.w	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	495d      	ldr	r1, [pc, #372]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca2:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4956      	ldr	r1, [pc, #344]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cc0:	4b51      	ldr	r3, [pc, #324]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	494e      	ldr	r1, [pc, #312]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cde:	4b4a      	ldr	r3, [pc, #296]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f023 0210 	bic.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4947      	ldr	r1, [pc, #284]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003cfc:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	493f      	ldr	r1, [pc, #252]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f023 0220 	bic.w	r2, r3, #32
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4938      	ldr	r1, [pc, #224]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d38:	4b33      	ldr	r3, [pc, #204]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	4930      	ldr	r1, [pc, #192]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d56:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	4929      	ldr	r1, [pc, #164]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d74:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4921      	ldr	r1, [pc, #132]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	491a      	ldr	r1, [pc, #104]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	4912      	ldr	r1, [pc, #72]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	490b      	ldr	r1, [pc, #44]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3748      	adds	r7, #72	; 0x48
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000

08003e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e049      	b.n	8003eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd fb3c 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f000 fbd8 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e042      	b.n	8003f5a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <HAL_TIM_Base_Start+0xac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <HAL_TIM_Base_Start+0x5c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d013      	beq.n	8003f18 <HAL_TIM_Base_Start+0x5c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_TIM_Base_Start+0xb0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_TIM_Base_Start+0x5c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_TIM_Base_Start+0xb4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_TIM_Base_Start+0x5c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_TIM_Base_Start+0xb8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_TIM_Base_Start+0x5c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <HAL_TIM_Base_Start+0xbc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d115      	bne.n	8003f44 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <HAL_TIM_Base_Start+0xc0>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d015      	beq.n	8003f56 <HAL_TIM_Base_Start+0x9a>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f30:	d011      	beq.n	8003f56 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	e008      	b.n	8003f56 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40013400 	.word	0x40013400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	00010007 	.word	0x00010007

08003f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e049      	b.n	8004026 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f841 	bl	800402e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f000 fb1e 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <HAL_TIM_PWM_Start+0x24>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e03c      	b.n	80040e2 <HAL_TIM_PWM_Start+0x9e>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d109      	bne.n	8004082 <HAL_TIM_PWM_Start+0x3e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e02f      	b.n	80040e2 <HAL_TIM_PWM_Start+0x9e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d109      	bne.n	800409c <HAL_TIM_PWM_Start+0x58>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e022      	b.n	80040e2 <HAL_TIM_PWM_Start+0x9e>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d109      	bne.n	80040b6 <HAL_TIM_PWM_Start+0x72>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e015      	b.n	80040e2 <HAL_TIM_PWM_Start+0x9e>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d109      	bne.n	80040d0 <HAL_TIM_PWM_Start+0x8c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e008      	b.n	80040e2 <HAL_TIM_PWM_Start+0x9e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e097      	b.n	800421a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_PWM_Start+0xb6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f8:	e023      	b.n	8004142 <HAL_TIM_PWM_Start+0xfe>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d104      	bne.n	800410a <HAL_TIM_PWM_Start+0xc6>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	e01b      	b.n	8004142 <HAL_TIM_PWM_Start+0xfe>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d104      	bne.n	800411a <HAL_TIM_PWM_Start+0xd6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004118:	e013      	b.n	8004142 <HAL_TIM_PWM_Start+0xfe>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d104      	bne.n	800412a <HAL_TIM_PWM_Start+0xe6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004128:	e00b      	b.n	8004142 <HAL_TIM_PWM_Start+0xfe>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b10      	cmp	r3, #16
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Start+0xf6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004138:	e003      	b.n	8004142 <HAL_TIM_PWM_Start+0xfe>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2201      	movs	r2, #1
 8004148:	6839      	ldr	r1, [r7, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fe58 	bl	8004e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a33      	ldr	r2, [pc, #204]	; (8004224 <HAL_TIM_PWM_Start+0x1e0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_TIM_PWM_Start+0x13e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a32      	ldr	r2, [pc, #200]	; (8004228 <HAL_TIM_PWM_Start+0x1e4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00e      	beq.n	8004182 <HAL_TIM_PWM_Start+0x13e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a30      	ldr	r2, [pc, #192]	; (800422c <HAL_TIM_PWM_Start+0x1e8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_TIM_PWM_Start+0x13e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <HAL_TIM_PWM_Start+0x1ec>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_TIM_PWM_Start+0x13e>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <HAL_TIM_PWM_Start+0x1f0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_TIM_PWM_Start+0x142>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <HAL_TIM_PWM_Start+0x144>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <HAL_TIM_PWM_Start+0x1e0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d018      	beq.n	80041d8 <HAL_TIM_PWM_Start+0x194>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d013      	beq.n	80041d8 <HAL_TIM_PWM_Start+0x194>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a20      	ldr	r2, [pc, #128]	; (8004238 <HAL_TIM_PWM_Start+0x1f4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00e      	beq.n	80041d8 <HAL_TIM_PWM_Start+0x194>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_TIM_PWM_Start+0x1f8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d009      	beq.n	80041d8 <HAL_TIM_PWM_Start+0x194>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_TIM_PWM_Start+0x1e4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_TIM_PWM_Start+0x194>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_TIM_PWM_Start+0x1e8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d115      	bne.n	8004204 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	4b18      	ldr	r3, [pc, #96]	; (8004240 <HAL_TIM_PWM_Start+0x1fc>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	d015      	beq.n	8004216 <HAL_TIM_PWM_Start+0x1d2>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f0:	d011      	beq.n	8004216 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004202:	e008      	b.n	8004216 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e000      	b.n	8004218 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40013400 	.word	0x40013400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	00010007 	.word	0x00010007

08004244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800425e:	2302      	movs	r3, #2
 8004260:	e0ff      	b.n	8004462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b14      	cmp	r3, #20
 800426e:	f200 80f0 	bhi.w	8004452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042cd 	.word	0x080042cd
 800427c:	08004453 	.word	0x08004453
 8004280:	08004453 	.word	0x08004453
 8004284:	08004453 	.word	0x08004453
 8004288:	0800430d 	.word	0x0800430d
 800428c:	08004453 	.word	0x08004453
 8004290:	08004453 	.word	0x08004453
 8004294:	08004453 	.word	0x08004453
 8004298:	0800434f 	.word	0x0800434f
 800429c:	08004453 	.word	0x08004453
 80042a0:	08004453 	.word	0x08004453
 80042a4:	08004453 	.word	0x08004453
 80042a8:	0800438f 	.word	0x0800438f
 80042ac:	08004453 	.word	0x08004453
 80042b0:	08004453 	.word	0x08004453
 80042b4:	08004453 	.word	0x08004453
 80042b8:	080043d1 	.word	0x080043d1
 80042bc:	08004453 	.word	0x08004453
 80042c0:	08004453 	.word	0x08004453
 80042c4:	08004453 	.word	0x08004453
 80042c8:	08004411 	.word	0x08004411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fa24 	bl	8004720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e0a5      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa94 	bl	8004840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e084      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fafd 	bl	8004954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e064      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fb65 	bl	8004a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e043      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fbae 	bl	8004b38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0208 	orr.w	r2, r2, #8
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800440e:	e023      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fbf2 	bl	8004c00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	021a      	lsls	r2, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004450:	e002      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
      break;
 8004456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop

0800446c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_TIM_ConfigClockSource+0x1c>
 8004484:	2302      	movs	r3, #2
 8004486:	e0b6      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x18a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c4:	d03e      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0xd8>
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ca:	f200 8087 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x170>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	f000 8086 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x176>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d87f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
 80044dc:	2b70      	cmp	r3, #112	; 0x70
 80044de:	d01a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0xaa>
 80044e0:	2b70      	cmp	r3, #112	; 0x70
 80044e2:	d87b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
 80044e4:	2b60      	cmp	r3, #96	; 0x60
 80044e6:	d050      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x11e>
 80044e8:	2b60      	cmp	r3, #96	; 0x60
 80044ea:	d877      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
 80044ec:	2b50      	cmp	r3, #80	; 0x50
 80044ee:	d03c      	beq.n	800456a <HAL_TIM_ConfigClockSource+0xfe>
 80044f0:	2b50      	cmp	r3, #80	; 0x50
 80044f2:	d873      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d058      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x13e>
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d86f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
 80044fc:	2b30      	cmp	r3, #48	; 0x30
 80044fe:	d064      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15e>
 8004500:	2b30      	cmp	r3, #48	; 0x30
 8004502:	d86b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
 8004504:	2b20      	cmp	r3, #32
 8004506:	d060      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15e>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d867      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05c      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15e>
 8004510:	2b10      	cmp	r3, #16
 8004512:	d05a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15e>
 8004514:	e062      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f000 fc4b 	bl	8004dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e04f      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f000 fc34 	bl	8004dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004566:	609a      	str	r2, [r3, #8]
      break;
 8004568:	e03c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fba8 	bl	8004ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2150      	movs	r1, #80	; 0x50
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fc01 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 8004588:	e02c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	461a      	mov	r2, r3
 8004598:	f000 fbc7 	bl	8004d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2160      	movs	r1, #96	; 0x60
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fbf1 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 80045a8:	e01c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 fb88 	bl	8004ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fbe1 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 80045c8:	e00c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 fbd8 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 80045da:	e003      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a3c      	ldr	r2, [pc, #240]	; (8004704 <TIM_Base_SetConfig+0x104>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a39      	ldr	r2, [pc, #228]	; (8004708 <TIM_Base_SetConfig+0x108>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a38      	ldr	r2, [pc, #224]	; (800470c <TIM_Base_SetConfig+0x10c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x38>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a37      	ldr	r2, [pc, #220]	; (8004710 <TIM_Base_SetConfig+0x110>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2d      	ldr	r2, [pc, #180]	; (8004704 <TIM_Base_SetConfig+0x104>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01b      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d017      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <TIM_Base_SetConfig+0x108>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a29      	ldr	r2, [pc, #164]	; (800470c <TIM_Base_SetConfig+0x10c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00f      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a28      	ldr	r2, [pc, #160]	; (8004710 <TIM_Base_SetConfig+0x110>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00b      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a27      	ldr	r2, [pc, #156]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a26      	ldr	r2, [pc, #152]	; (8004718 <TIM_Base_SetConfig+0x118>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a25      	ldr	r2, [pc, #148]	; (800471c <TIM_Base_SetConfig+0x11c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d108      	bne.n	800469c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a10      	ldr	r2, [pc, #64]	; (8004704 <TIM_Base_SetConfig+0x104>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00f      	beq.n	80046e8 <TIM_Base_SetConfig+0xe8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <TIM_Base_SetConfig+0x110>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_Base_SetConfig+0xe8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_Base_SetConfig+0xe8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0f      	ldr	r2, [pc, #60]	; (8004718 <TIM_Base_SetConfig+0x118>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_Base_SetConfig+0xe8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a0e      	ldr	r2, [pc, #56]	; (800471c <TIM_Base_SetConfig+0x11c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	615a      	str	r2, [r3, #20]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40013400 	.word	0x40013400
 8004714:	40014000 	.word	0x40014000
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800

08004720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f023 0302 	bic.w	r3, r3, #2
 800476c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a2c      	ldr	r2, [pc, #176]	; (800482c <TIM_OC1_SetConfig+0x10c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00f      	beq.n	80047a0 <TIM_OC1_SetConfig+0x80>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <TIM_OC1_SetConfig+0x110>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00b      	beq.n	80047a0 <TIM_OC1_SetConfig+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <TIM_OC1_SetConfig+0x114>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_OC1_SetConfig+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <TIM_OC1_SetConfig+0x118>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_OC1_SetConfig+0x80>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a28      	ldr	r2, [pc, #160]	; (800483c <TIM_OC1_SetConfig+0x11c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d10c      	bne.n	80047ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 0308 	bic.w	r3, r3, #8
 80047a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f023 0304 	bic.w	r3, r3, #4
 80047b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <TIM_OC1_SetConfig+0x10c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00f      	beq.n	80047e2 <TIM_OC1_SetConfig+0xc2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <TIM_OC1_SetConfig+0x110>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <TIM_OC1_SetConfig+0xc2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <TIM_OC1_SetConfig+0x114>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_OC1_SetConfig+0xc2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <TIM_OC1_SetConfig+0x118>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_OC1_SetConfig+0xc2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <TIM_OC1_SetConfig+0x11c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d111      	bne.n	8004806 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800

08004840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0210 	bic.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0320 	bic.w	r3, r3, #32
 800488e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a28      	ldr	r2, [pc, #160]	; (8004940 <TIM_OC2_SetConfig+0x100>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_OC2_SetConfig+0x6c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a27      	ldr	r2, [pc, #156]	; (8004944 <TIM_OC2_SetConfig+0x104>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10d      	bne.n	80048c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <TIM_OC2_SetConfig+0x100>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00f      	beq.n	80048f0 <TIM_OC2_SetConfig+0xb0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <TIM_OC2_SetConfig+0x104>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <TIM_OC2_SetConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a1b      	ldr	r2, [pc, #108]	; (8004948 <TIM_OC2_SetConfig+0x108>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <TIM_OC2_SetConfig+0xb0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a1a      	ldr	r2, [pc, #104]	; (800494c <TIM_OC2_SetConfig+0x10c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC2_SetConfig+0xb0>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a19      	ldr	r2, [pc, #100]	; (8004950 <TIM_OC2_SetConfig+0x110>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d113      	bne.n	8004918 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40013400 	.word	0x40013400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800

08004954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <TIM_OC3_SetConfig+0xfc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC3_SetConfig+0x6a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <TIM_OC3_SetConfig+0x100>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10d      	bne.n	80049da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <TIM_OC3_SetConfig+0xfc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00f      	beq.n	8004a02 <TIM_OC3_SetConfig+0xae>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1b      	ldr	r2, [pc, #108]	; (8004a54 <TIM_OC3_SetConfig+0x100>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <TIM_OC3_SetConfig+0xae>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1a      	ldr	r2, [pc, #104]	; (8004a58 <TIM_OC3_SetConfig+0x104>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_OC3_SetConfig+0xae>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <TIM_OC3_SetConfig+0x108>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_OC3_SetConfig+0xae>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <TIM_OC3_SetConfig+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d113      	bne.n	8004a2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	621a      	str	r2, [r3, #32]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40013400 	.word	0x40013400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800

08004a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <TIM_OC4_SetConfig+0xc0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00f      	beq.n	8004ae8 <TIM_OC4_SetConfig+0x84>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <TIM_OC4_SetConfig+0xc4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <TIM_OC4_SetConfig+0x84>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	; (8004b2c <TIM_OC4_SetConfig+0xc8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <TIM_OC4_SetConfig+0x84>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <TIM_OC4_SetConfig+0xcc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_OC4_SetConfig+0x84>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <TIM_OC4_SetConfig+0xd0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d109      	bne.n	8004afc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800

08004b38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a17      	ldr	r2, [pc, #92]	; (8004bec <TIM_OC5_SetConfig+0xb4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00f      	beq.n	8004bb2 <TIM_OC5_SetConfig+0x7a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a16      	ldr	r2, [pc, #88]	; (8004bf0 <TIM_OC5_SetConfig+0xb8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_OC5_SetConfig+0x7a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <TIM_OC5_SetConfig+0xbc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_OC5_SetConfig+0x7a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <TIM_OC5_SetConfig+0xc0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC5_SetConfig+0x7a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <TIM_OC5_SetConfig+0xc4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d109      	bne.n	8004bc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	621a      	str	r2, [r3, #32]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40013400 	.word	0x40013400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	051b      	lsls	r3, r3, #20
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <TIM_OC6_SetConfig+0xb8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_OC6_SetConfig+0x7c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <TIM_OC6_SetConfig+0xbc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <TIM_OC6_SetConfig+0x7c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC6_SetConfig+0xc0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_OC6_SetConfig+0x7c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <TIM_OC6_SetConfig+0xc4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_OC6_SetConfig+0x7c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a14      	ldr	r2, [pc, #80]	; (8004cc8 <TIM_OC6_SetConfig+0xc8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d109      	bne.n	8004c90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	029b      	lsls	r3, r3, #10
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40013400 	.word	0x40013400
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40014800 	.word	0x40014800

08004ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 030a 	bic.w	r3, r3, #10
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b087      	sub	sp, #28
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0210 	bic.w	r2, r3, #16
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	031b      	lsls	r3, r3, #12
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f043 0307 	orr.w	r3, r3, #7
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	021a      	lsls	r2, r3, #8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	609a      	str	r2, [r3, #8]
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2201      	movs	r2, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e063      	b.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2b      	ldr	r2, [pc, #172]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d108      	bne.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d018      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed6:	d013      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10c      	bne.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40014000 	.word	0x40014000

08004f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e040      	b.n	8004fe0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fb08 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	; 0x24
 8004f78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fc0c 	bl	80057a8 <UART_SetConfig>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e022      	b.n	8004fe0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fdd6 	bl	8005b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fe5d 	bl	8005c98 <UART_CheckIdleState>
 8004fde:	4603      	mov	r3, r0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	f040 8082 	bne.w	8005106 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_Transmit+0x26>
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07a      	b.n	8005108 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_UART_Transmit+0x38>
 800501c:	2302      	movs	r3, #2
 800501e:	e073      	b.n	8005108 <HAL_UART_Transmit+0x120>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2221      	movs	r2, #33	; 0x21
 8005034:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005036:	f7fc fbdb 	bl	80017f0 <HAL_GetTick>
 800503a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005054:	d108      	bne.n	8005068 <HAL_UART_Transmit+0x80>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	e003      	b.n	8005070 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005078:	e02d      	b.n	80050d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2200      	movs	r2, #0
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fe50 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e039      	b.n	8005108 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	881a      	ldrh	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a6:	b292      	uxth	r2, r2
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	3302      	adds	r3, #2
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	e008      	b.n	80050c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	b292      	uxth	r2, r2
 80050bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1cb      	bne.n	800507a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fe1c 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e005      	b.n	8005108 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005122:	2b20      	cmp	r3, #32
 8005124:	d13d      	bne.n	80051a2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Receive_IT+0x22>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e036      	b.n	80051a4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Receive_IT+0x34>
 8005140:	2302      	movs	r3, #2
 8005142:	e02f      	b.n	80051a4 <HAL_UART_Receive_IT+0x94>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d018      	beq.n	8005192 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	613b      	str	r3, [r7, #16]
   return(result);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	69f9      	ldr	r1, [r7, #28]
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	61bb      	str	r3, [r7, #24]
   return(result);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e6      	bne.n	8005160 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	461a      	mov	r2, r3
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fe8b 	bl	8005eb4 <UART_Start_Receive_IT>
 800519e:	4603      	mov	r3, r0
 80051a0:	e000      	b.n	80051a4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3728      	adds	r7, #40	; 0x28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b0ba      	sub	sp, #232	; 0xe8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80051da:	4013      	ands	r3, r2
 80051dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d115      	bne.n	8005214 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 82a3 	beq.w	8005750 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
      }
      return;
 8005212:	e29d      	b.n	8005750 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8117 	beq.w	800544c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800521e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800522a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800522e:	4b85      	ldr	r3, [pc, #532]	; (8005444 <HAL_UART_IRQHandler+0x298>)
 8005230:	4013      	ands	r3, r2
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 810a 	beq.w	800544c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d011      	beq.n	8005268 <HAL_UART_IRQHandler+0xbc>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525e:	f043 0201 	orr.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d011      	beq.n	8005298 <HAL_UART_IRQHandler+0xec>
 8005274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2202      	movs	r2, #2
 8005286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528e:	f043 0204 	orr.w	r2, r3, #4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d011      	beq.n	80052c8 <HAL_UART_IRQHandler+0x11c>
 80052a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2204      	movs	r2, #4
 80052b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052be:	f043 0202 	orr.w	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d017      	beq.n	8005304 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2208      	movs	r2, #8
 80052f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fa:	f043 0208 	orr.w	r2, r3, #8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530c:	2b00      	cmp	r3, #0
 800530e:	d012      	beq.n	8005336 <HAL_UART_IRQHandler+0x18a>
 8005310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00c      	beq.n	8005336 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8209 	beq.w	8005754 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00d      	beq.n	800536a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800534e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005386:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800538a:	2b00      	cmp	r3, #0
 800538c:	d04f      	beq.n	800542e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fe28 	bl	8005fe4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d141      	bne.n	8005426 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1d9      	bne.n	80053a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d013      	beq.n	800541e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <HAL_UART_IRQHandler+0x29c>)
 80053fc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	4618      	mov	r0, r3
 8005404:	f7fc fb6e 	bl	8001ae4 <HAL_DMA_Abort_IT>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d017      	beq.n	800543e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005418:	4610      	mov	r0, r2
 800541a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541c:	e00f      	b.n	800543e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9ac 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	e00b      	b.n	800543e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9a8 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	e007      	b.n	800543e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f9a4 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800543c:	e18a      	b.n	8005754 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543e:	bf00      	nop
    return;
 8005440:	e188      	b.n	8005754 <HAL_UART_IRQHandler+0x5a8>
 8005442:	bf00      	nop
 8005444:	04000120 	.word	0x04000120
 8005448:	080060ab 	.word	0x080060ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005450:	2b01      	cmp	r3, #1
 8005452:	f040 8143 	bne.w	80056dc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 813c 	beq.w	80056dc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8135 	beq.w	80056dc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2210      	movs	r2, #16
 8005478:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	f040 80b1 	bne.w	80055ec <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005496:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 815c 	beq.w	8005758 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054aa:	429a      	cmp	r2, r3
 80054ac:	f080 8154 	bcs.w	8005758 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	f000 8085 	beq.w	80055d0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1da      	bne.n	80054c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005534:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005538:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800553c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e1      	bne.n	8005510 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800555c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005570:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005572:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005576:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800557e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e3      	bne.n	800554c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800559e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a0:	f023 0310 	bic.w	r3, r3, #16
 80055a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e4      	bne.n	8005590 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fc fa51 	bl	8001a72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f8d3 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055ea:	e0b5      	b.n	8005758 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a7 	beq.w	800575c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800560e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80a2 	beq.w	800575c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800563a:	647b      	str	r3, [r7, #68]	; 0x44
 800563c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e4      	bne.n	8005618 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	623b      	str	r3, [r7, #32]
   return(result);
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005672:	633a      	str	r2, [r7, #48]	; 0x30
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e3      	bne.n	800564e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 0310 	bic.w	r3, r3, #16
 80056ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	69b9      	ldr	r1, [r7, #24]
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	617b      	str	r3, [r7, #20]
   return(result);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e4      	bne.n	8005698 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f85b 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056da:	e03f      	b.n	800575c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <HAL_UART_IRQHandler+0x55a>
 80056e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fe6f 	bl	80063e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005704:	e02d      	b.n	8005762 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01c      	beq.n	8005760 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
    }
    return;
 800572e:	e017      	b.n	8005760 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_UART_IRQHandler+0x5b6>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00c      	beq.n	8005762 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fcc4 	bl	80060d6 <UART_EndTransmit_IT>
    return;
 800574e:	e008      	b.n	8005762 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005750:	bf00      	nop
 8005752:	e006      	b.n	8005762 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005754:	bf00      	nop
 8005756:	e004      	b.n	8005762 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005758:	bf00      	nop
 800575a:	e002      	b.n	8005762 <HAL_UART_IRQHandler+0x5b6>
      return;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005760:	bf00      	nop
  }

}
 8005762:	37e8      	adds	r7, #232	; 0xe8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057d6:	f023 030c 	bic.w	r3, r3, #12
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	6979      	ldr	r1, [r7, #20]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4aa8      	ldr	r2, [pc, #672]	; (8005ac4 <UART_SetConfig+0x31c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d120      	bne.n	800586a <UART_SetConfig+0xc2>
 8005828:	4ba7      	ldr	r3, [pc, #668]	; (8005ac8 <UART_SetConfig+0x320>)
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b03      	cmp	r3, #3
 8005832:	d817      	bhi.n	8005864 <UART_SetConfig+0xbc>
 8005834:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0x94>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	0800584d 	.word	0x0800584d
 8005840:	08005859 	.word	0x08005859
 8005844:	0800585f 	.word	0x0800585f
 8005848:	08005853 	.word	0x08005853
 800584c:	2301      	movs	r3, #1
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e0b5      	b.n	80059be <UART_SetConfig+0x216>
 8005852:	2302      	movs	r3, #2
 8005854:	77fb      	strb	r3, [r7, #31]
 8005856:	e0b2      	b.n	80059be <UART_SetConfig+0x216>
 8005858:	2304      	movs	r3, #4
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e0af      	b.n	80059be <UART_SetConfig+0x216>
 800585e:	2308      	movs	r3, #8
 8005860:	77fb      	strb	r3, [r7, #31]
 8005862:	e0ac      	b.n	80059be <UART_SetConfig+0x216>
 8005864:	2310      	movs	r3, #16
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e0a9      	b.n	80059be <UART_SetConfig+0x216>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a97      	ldr	r2, [pc, #604]	; (8005acc <UART_SetConfig+0x324>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d124      	bne.n	80058be <UART_SetConfig+0x116>
 8005874:	4b94      	ldr	r3, [pc, #592]	; (8005ac8 <UART_SetConfig+0x320>)
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800587c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005880:	d011      	beq.n	80058a6 <UART_SetConfig+0xfe>
 8005882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005886:	d817      	bhi.n	80058b8 <UART_SetConfig+0x110>
 8005888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800588c:	d011      	beq.n	80058b2 <UART_SetConfig+0x10a>
 800588e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005892:	d811      	bhi.n	80058b8 <UART_SetConfig+0x110>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <UART_SetConfig+0xf8>
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d006      	beq.n	80058ac <UART_SetConfig+0x104>
 800589e:	e00b      	b.n	80058b8 <UART_SetConfig+0x110>
 80058a0:	2300      	movs	r3, #0
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e08b      	b.n	80059be <UART_SetConfig+0x216>
 80058a6:	2302      	movs	r3, #2
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e088      	b.n	80059be <UART_SetConfig+0x216>
 80058ac:	2304      	movs	r3, #4
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	e085      	b.n	80059be <UART_SetConfig+0x216>
 80058b2:	2308      	movs	r3, #8
 80058b4:	77fb      	strb	r3, [r7, #31]
 80058b6:	e082      	b.n	80059be <UART_SetConfig+0x216>
 80058b8:	2310      	movs	r3, #16
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e07f      	b.n	80059be <UART_SetConfig+0x216>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a83      	ldr	r2, [pc, #524]	; (8005ad0 <UART_SetConfig+0x328>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d124      	bne.n	8005912 <UART_SetConfig+0x16a>
 80058c8:	4b7f      	ldr	r3, [pc, #508]	; (8005ac8 <UART_SetConfig+0x320>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80058d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058d4:	d011      	beq.n	80058fa <UART_SetConfig+0x152>
 80058d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058da:	d817      	bhi.n	800590c <UART_SetConfig+0x164>
 80058dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058e0:	d011      	beq.n	8005906 <UART_SetConfig+0x15e>
 80058e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058e6:	d811      	bhi.n	800590c <UART_SetConfig+0x164>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <UART_SetConfig+0x14c>
 80058ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058f0:	d006      	beq.n	8005900 <UART_SetConfig+0x158>
 80058f2:	e00b      	b.n	800590c <UART_SetConfig+0x164>
 80058f4:	2300      	movs	r3, #0
 80058f6:	77fb      	strb	r3, [r7, #31]
 80058f8:	e061      	b.n	80059be <UART_SetConfig+0x216>
 80058fa:	2302      	movs	r3, #2
 80058fc:	77fb      	strb	r3, [r7, #31]
 80058fe:	e05e      	b.n	80059be <UART_SetConfig+0x216>
 8005900:	2304      	movs	r3, #4
 8005902:	77fb      	strb	r3, [r7, #31]
 8005904:	e05b      	b.n	80059be <UART_SetConfig+0x216>
 8005906:	2308      	movs	r3, #8
 8005908:	77fb      	strb	r3, [r7, #31]
 800590a:	e058      	b.n	80059be <UART_SetConfig+0x216>
 800590c:	2310      	movs	r3, #16
 800590e:	77fb      	strb	r3, [r7, #31]
 8005910:	e055      	b.n	80059be <UART_SetConfig+0x216>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6f      	ldr	r2, [pc, #444]	; (8005ad4 <UART_SetConfig+0x32c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d124      	bne.n	8005966 <UART_SetConfig+0x1be>
 800591c:	4b6a      	ldr	r3, [pc, #424]	; (8005ac8 <UART_SetConfig+0x320>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005928:	d011      	beq.n	800594e <UART_SetConfig+0x1a6>
 800592a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800592e:	d817      	bhi.n	8005960 <UART_SetConfig+0x1b8>
 8005930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005934:	d011      	beq.n	800595a <UART_SetConfig+0x1b2>
 8005936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800593a:	d811      	bhi.n	8005960 <UART_SetConfig+0x1b8>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <UART_SetConfig+0x1a0>
 8005940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005944:	d006      	beq.n	8005954 <UART_SetConfig+0x1ac>
 8005946:	e00b      	b.n	8005960 <UART_SetConfig+0x1b8>
 8005948:	2300      	movs	r3, #0
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e037      	b.n	80059be <UART_SetConfig+0x216>
 800594e:	2302      	movs	r3, #2
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e034      	b.n	80059be <UART_SetConfig+0x216>
 8005954:	2304      	movs	r3, #4
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e031      	b.n	80059be <UART_SetConfig+0x216>
 800595a:	2308      	movs	r3, #8
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e02e      	b.n	80059be <UART_SetConfig+0x216>
 8005960:	2310      	movs	r3, #16
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e02b      	b.n	80059be <UART_SetConfig+0x216>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a5b      	ldr	r2, [pc, #364]	; (8005ad8 <UART_SetConfig+0x330>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d124      	bne.n	80059ba <UART_SetConfig+0x212>
 8005970:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <UART_SetConfig+0x320>)
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005978:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800597c:	d011      	beq.n	80059a2 <UART_SetConfig+0x1fa>
 800597e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005982:	d817      	bhi.n	80059b4 <UART_SetConfig+0x20c>
 8005984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005988:	d011      	beq.n	80059ae <UART_SetConfig+0x206>
 800598a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800598e:	d811      	bhi.n	80059b4 <UART_SetConfig+0x20c>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <UART_SetConfig+0x1f4>
 8005994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005998:	d006      	beq.n	80059a8 <UART_SetConfig+0x200>
 800599a:	e00b      	b.n	80059b4 <UART_SetConfig+0x20c>
 800599c:	2300      	movs	r3, #0
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e00d      	b.n	80059be <UART_SetConfig+0x216>
 80059a2:	2302      	movs	r3, #2
 80059a4:	77fb      	strb	r3, [r7, #31]
 80059a6:	e00a      	b.n	80059be <UART_SetConfig+0x216>
 80059a8:	2304      	movs	r3, #4
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	e007      	b.n	80059be <UART_SetConfig+0x216>
 80059ae:	2308      	movs	r3, #8
 80059b0:	77fb      	strb	r3, [r7, #31]
 80059b2:	e004      	b.n	80059be <UART_SetConfig+0x216>
 80059b4:	2310      	movs	r3, #16
 80059b6:	77fb      	strb	r3, [r7, #31]
 80059b8:	e001      	b.n	80059be <UART_SetConfig+0x216>
 80059ba:	2310      	movs	r3, #16
 80059bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c6:	d15c      	bne.n	8005a82 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d827      	bhi.n	8005a1e <UART_SetConfig+0x276>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x22c>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	08005a01 	.word	0x08005a01
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	08005a1f 	.word	0x08005a1f
 80059e4:	08005a0f 	.word	0x08005a0f
 80059e8:	08005a1f 	.word	0x08005a1f
 80059ec:	08005a1f 	.word	0x08005a1f
 80059f0:	08005a1f 	.word	0x08005a1f
 80059f4:	08005a17 	.word	0x08005a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fe f814 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80059fc:	61b8      	str	r0, [r7, #24]
        break;
 80059fe:	e013      	b.n	8005a28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a00:	f7fe f832 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8005a04:	61b8      	str	r0, [r7, #24]
        break;
 8005a06:	e00f      	b.n	8005a28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a08:	4b34      	ldr	r3, [pc, #208]	; (8005adc <UART_SetConfig+0x334>)
 8005a0a:	61bb      	str	r3, [r7, #24]
        break;
 8005a0c:	e00c      	b.n	8005a28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0e:	f7fd ff93 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 8005a12:	61b8      	str	r0, [r7, #24]
        break;
 8005a14:	e008      	b.n	8005a28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1a:	61bb      	str	r3, [r7, #24]
        break;
 8005a1c:	e004      	b.n	8005a28 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	77bb      	strb	r3, [r7, #30]
        break;
 8005a26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8084 	beq.w	8005b38 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	005a      	lsls	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	441a      	add	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b0f      	cmp	r3, #15
 8005a4c:	d916      	bls.n	8005a7c <UART_SetConfig+0x2d4>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d212      	bcs.n	8005a7c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f023 030f 	bic.w	r3, r3, #15
 8005a5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	89fb      	ldrh	r3, [r7, #14]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	89fa      	ldrh	r2, [r7, #14]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	e05d      	b.n	8005b38 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	77bb      	strb	r3, [r7, #30]
 8005a80:	e05a      	b.n	8005b38 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d836      	bhi.n	8005af6 <UART_SetConfig+0x34e>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x2e8>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ab5 	.word	0x08005ab5
 8005a94:	08005abd 	.word	0x08005abd
 8005a98:	08005ae1 	.word	0x08005ae1
 8005a9c:	08005af7 	.word	0x08005af7
 8005aa0:	08005ae7 	.word	0x08005ae7
 8005aa4:	08005af7 	.word	0x08005af7
 8005aa8:	08005af7 	.word	0x08005af7
 8005aac:	08005af7 	.word	0x08005af7
 8005ab0:	08005aef 	.word	0x08005aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab4:	f7fd ffb6 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8005ab8:	61b8      	str	r0, [r7, #24]
        break;
 8005aba:	e021      	b.n	8005b00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abc:	f7fd ffd4 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8005ac0:	61b8      	str	r0, [r7, #24]
        break;
 8005ac2:	e01d      	b.n	8005b00 <UART_SetConfig+0x358>
 8005ac4:	40013800 	.word	0x40013800
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	40004400 	.word	0x40004400
 8005ad0:	40004800 	.word	0x40004800
 8005ad4:	40004c00 	.word	0x40004c00
 8005ad8:	40005000 	.word	0x40005000
 8005adc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <UART_SetConfig+0x3a8>)
 8005ae2:	61bb      	str	r3, [r7, #24]
        break;
 8005ae4:	e00c      	b.n	8005b00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae6:	f7fd ff27 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 8005aea:	61b8      	str	r0, [r7, #24]
        break;
 8005aec:	e008      	b.n	8005b00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af2:	61bb      	str	r3, [r7, #24]
        break;
 8005af4:	e004      	b.n	8005b00 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	77bb      	strb	r3, [r7, #30]
        break;
 8005afe:	bf00      	nop
    }

    if (pclk != 0U)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	085a      	lsrs	r2, r3, #1
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	441a      	add	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b0f      	cmp	r3, #15
 8005b20:	d908      	bls.n	8005b34 <UART_SetConfig+0x38c>
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b28:	d204      	bcs.n	8005b34 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	e001      	b.n	8005b38 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b44:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	007a1200 	.word	0x007a1200

08005b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c52:	d10a      	bne.n	8005c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca8:	f7fb fda2 	bl	80017f0 <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d10e      	bne.n	8005cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f82d 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e023      	b.n	8005d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d10e      	bne.n	8005d06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f817 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e00d      	b.n	8005d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b09c      	sub	sp, #112	; 0x70
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3a:	e0a5      	b.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	f000 80a1 	beq.w	8005e88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d46:	f7fb fd53 	bl	80017f0 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d302      	bcc.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x32>
 8005d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d13e      	bne.n	8005dda <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d70:	667b      	str	r3, [r7, #100]	; 0x64
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e6      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	663b      	str	r3, [r7, #96]	; 0x60
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dae:	64ba      	str	r2, [r7, #72]	; 0x48
 8005db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e5      	bne.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e067      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d04f      	beq.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df6:	d147      	bne.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
 8005e22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e6      	bne.n	8005e02 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	613b      	str	r3, [r7, #16]
   return(result);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e54:	623a      	str	r2, [r7, #32]
 8005e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	69f9      	ldr	r1, [r7, #28]
 8005e5a:	6a3a      	ldr	r2, [r7, #32]
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e5      	bne.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e010      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69da      	ldr	r2, [r3, #28]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	f43f af4a 	beq.w	8005d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3770      	adds	r7, #112	; 0x70
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b091      	sub	sp, #68	; 0x44
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee6:	d10e      	bne.n	8005f06 <UART_Start_Receive_IT+0x52>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <UART_Start_Receive_IT+0x48>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005efa:	e01a      	b.n	8005f32 <UART_Start_Receive_IT+0x7e>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	22ff      	movs	r2, #255	; 0xff
 8005f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f04:	e015      	b.n	8005f32 <UART_Start_Receive_IT+0x7e>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10d      	bne.n	8005f2a <UART_Start_Receive_IT+0x76>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <UART_Start_Receive_IT+0x6c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f1e:	e008      	b.n	8005f32 <UART_Start_Receive_IT+0x7e>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	227f      	movs	r2, #127	; 0x7f
 8005f24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f28:	e003      	b.n	8005f32 <UART_Start_Receive_IT+0x7e>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2222      	movs	r2, #34	; 0x22
 8005f3e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f60:	637a      	str	r2, [r7, #52]	; 0x34
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7c:	d107      	bne.n	8005f8e <UART_Start_Receive_IT+0xda>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d103      	bne.n	8005f8e <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a14      	ldr	r2, [pc, #80]	; (8005fdc <UART_Start_Receive_IT+0x128>)
 8005f8a:	665a      	str	r2, [r3, #100]	; 0x64
 8005f8c:	e002      	b.n	8005f94 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <UART_Start_Receive_IT+0x12c>)
 8005f92:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	69f9      	ldr	r1, [r7, #28]
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e6      	bne.n	8005f9c <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3744      	adds	r7, #68	; 0x44
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	08006287 	.word	0x08006287
 8005fe0:	0800612b 	.word	0x0800612b

08005fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b095      	sub	sp, #84	; 0x54
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600a:	643b      	str	r3, [r7, #64]	; 0x40
 800600c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	61fb      	str	r3, [r7, #28]
   return(result);
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	64bb      	str	r3, [r7, #72]	; 0x48
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800603e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e5      	bne.n	800601e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006056:	2b01      	cmp	r3, #1
 8006058:	d118      	bne.n	800608c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	60bb      	str	r3, [r7, #8]
   return(result);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0310 	bic.w	r3, r3, #16
 800606e:	647b      	str	r3, [r7, #68]	; 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6979      	ldr	r1, [r7, #20]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	613b      	str	r3, [r7, #16]
   return(result);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e6      	bne.n	800605a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800609e:	bf00      	nop
 80060a0:	3754      	adds	r7, #84	; 0x54
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fb57 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b088      	sub	sp, #32
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff fb23 	bl	8005768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006122:	bf00      	nop
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b096      	sub	sp, #88	; 0x58
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006138:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006140:	2b22      	cmp	r3, #34	; 0x22
 8006142:	f040 8094 	bne.w	800626e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800614c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006150:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006154:	b2d9      	uxtb	r1, r3
 8006156:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800615a:	b2da      	uxtb	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	400a      	ands	r2, r1
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d177      	bne.n	800627e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061a2:	653b      	str	r3, [r7, #80]	; 0x50
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ac:	647b      	str	r3, [r7, #68]	; 0x44
 80061ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e6      	bne.n	800618e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	623b      	str	r3, [r7, #32]
   return(result);
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061e0:	633a      	str	r2, [r7, #48]	; 0x30
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006204:	2b01      	cmp	r3, #1
 8006206:	d12e      	bne.n	8006266 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	60fb      	str	r3, [r7, #12]
   return(result);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	69b9      	ldr	r1, [r7, #24]
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	617b      	str	r3, [r7, #20]
   return(result);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e6      	bne.n	800620e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	d103      	bne.n	8006256 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2210      	movs	r2, #16
 8006254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fa96 	bl	8005790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006264:	e00b      	b.n	800627e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fa fc5a 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 800626c:	e007      	b.n	800627e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0208 	orr.w	r2, r2, #8
 800627c:	619a      	str	r2, [r3, #24]
}
 800627e:	bf00      	nop
 8006280:	3758      	adds	r7, #88	; 0x58
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b096      	sub	sp, #88	; 0x58
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006294:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629c:	2b22      	cmp	r3, #34	; 0x22
 800629e:	f040 8094 	bne.w	80063ca <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80062b2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80062b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062ba:	4013      	ands	r3, r2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	1c9a      	adds	r2, r3, #2
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d177      	bne.n	80063da <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006308:	643b      	str	r3, [r7, #64]	; 0x40
 800630a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800630e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3308      	adds	r3, #8
 8006322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	61fb      	str	r3, [r7, #28]
   return(result);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	64bb      	str	r3, [r7, #72]	; 0x48
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800633c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e5      	bne.n	800631c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006360:	2b01      	cmp	r3, #1
 8006362:	d12e      	bne.n	80063c2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60bb      	str	r3, [r7, #8]
   return(result);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	647b      	str	r3, [r7, #68]	; 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e6      	bne.n	800636a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d103      	bne.n	80063b2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2210      	movs	r2, #16
 80063b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff f9e8 	bl	8005790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063c0:	e00b      	b.n	80063da <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fa fbac 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 80063c8:	e007      	b.n	80063da <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0208 	orr.w	r2, r2, #8
 80063d8:	619a      	str	r2, [r3, #24]
}
 80063da:	bf00      	nop
 80063dc:	3758      	adds	r7, #88	; 0x58
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <__libc_init_array>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4d0d      	ldr	r5, [pc, #52]	; (8006430 <__libc_init_array+0x38>)
 80063fc:	4c0d      	ldr	r4, [pc, #52]	; (8006434 <__libc_init_array+0x3c>)
 80063fe:	1b64      	subs	r4, r4, r5
 8006400:	10a4      	asrs	r4, r4, #2
 8006402:	2600      	movs	r6, #0
 8006404:	42a6      	cmp	r6, r4
 8006406:	d109      	bne.n	800641c <__libc_init_array+0x24>
 8006408:	4d0b      	ldr	r5, [pc, #44]	; (8006438 <__libc_init_array+0x40>)
 800640a:	4c0c      	ldr	r4, [pc, #48]	; (800643c <__libc_init_array+0x44>)
 800640c:	f000 f820 	bl	8006450 <_init>
 8006410:	1b64      	subs	r4, r4, r5
 8006412:	10a4      	asrs	r4, r4, #2
 8006414:	2600      	movs	r6, #0
 8006416:	42a6      	cmp	r6, r4
 8006418:	d105      	bne.n	8006426 <__libc_init_array+0x2e>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006420:	4798      	blx	r3
 8006422:	3601      	adds	r6, #1
 8006424:	e7ee      	b.n	8006404 <__libc_init_array+0xc>
 8006426:	f855 3b04 	ldr.w	r3, [r5], #4
 800642a:	4798      	blx	r3
 800642c:	3601      	adds	r6, #1
 800642e:	e7f2      	b.n	8006416 <__libc_init_array+0x1e>
 8006430:	0800650c 	.word	0x0800650c
 8006434:	0800650c 	.word	0x0800650c
 8006438:	0800650c 	.word	0x0800650c
 800643c:	08006510 	.word	0x08006510

08006440 <memset>:
 8006440:	4402      	add	r2, r0
 8006442:	4603      	mov	r3, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

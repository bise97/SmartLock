
proj_csd_input_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fec  08004fec  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ff4  08004ff4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200000a4  080050a0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080050a0  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c11  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245a  00000000  00000000  00030ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00033140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176de  00000000  00000000  00034eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001171d  00000000  00000000  0004c596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009039f  00000000  00000000  0005dcb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  000ee0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f74 	.word	0x08004f74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08004f74 	.word	0x08004f74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <print_byte_to_hex>:
void print(char*str){
	for(int i = 0; i < strlen(str); i++) HAL_UART_Transmit(&huart2, (uint8_t*) &str[i], 1, HAL_MAX_DELAY);
}


void print_byte_to_hex(uint8_t byte){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	char c[6];
	sprintf(c,"0x%.2x ",byte);
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	4907      	ldr	r1, [pc, #28]	; (80005b4 <print_byte_to_hex+0x30>)
 8000596:	4618      	mov	r0, r3
 8000598:	f004 f87e 	bl	8004698 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) c, 5, HAL_MAX_DELAY);
 800059c:	f107 0108 	add.w	r1, r7, #8
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	2205      	movs	r2, #5
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <print_byte_to_hex+0x34>)
 80005a8:	f003 f819 	bl	80035de <HAL_UART_Transmit>
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08004f8c 	.word	0x08004f8c
 80005b8:	200001a4 	.word	0x200001a4

080005bc <print_lf>:

void print_lf(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	2201      	movs	r2, #1
 80005c6:	4903      	ldr	r1, [pc, #12]	; (80005d4 <print_lf+0x18>)
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <print_lf+0x1c>)
 80005ca:	f003 f808 	bl	80035de <HAL_UART_Transmit>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08004f94 	.word	0x08004f94
 80005d8:	200001a4 	.word	0x200001a4

080005dc <print_error>:

void print_error(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"error\n", 6, HAL_MAX_DELAY);
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	2206      	movs	r2, #6
 80005e6:	4903      	ldr	r1, [pc, #12]	; (80005f4 <print_error+0x18>)
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <print_error+0x1c>)
 80005ea:	f002 fff8 	bl	80035de <HAL_UART_Transmit>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08004f98 	.word	0x08004f98
 80005f8:	200001a4 	.word	0x200001a4

080005fc <resetRowPins>:
  {'7','8','9','C'},
  {'*','0','#','D'}
};


void resetRowPins(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++) HAL_GPIO_WritePin(portsR[i], pinsR[i], GPIO_PIN_RESET);
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	e00e      	b.n	8000626 <resetRowPins+0x2a>
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <resetRowPins+0x3c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000610:	4a0a      	ldr	r2, [pc, #40]	; (800063c <resetRowPins+0x40>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f001 fbf8 	bl	8001e10 <HAL_GPIO_WritePin>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b03      	cmp	r3, #3
 800062a:	dded      	ble.n	8000608 <resetRowPins+0xc>
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000000 	.word	0x20000000
 800063c:	20000010 	.word	0x20000010

08000640 <scanRows>:

int scanRows(GPIO_TypeDef* port, uint16_t GPIO_Pin){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	807b      	strh	r3, [r7, #2]
	int r = -1;
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	60fb      	str	r3, [r7, #12]

	while(r < 3 && HAL_GPIO_ReadPin(port, GPIO_Pin) == GPIO_PIN_RESET){
 8000652:	e00e      	b.n	8000672 <scanRows+0x32>
		r++;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(portsR[r], pinsR[r], GPIO_PIN_SET);
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <scanRows+0x6c>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <scanRows+0x70>)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	f001 fbcf 	bl	8001e10 <HAL_GPIO_WritePin>
	while(r < 3 && HAL_GPIO_ReadPin(port, GPIO_Pin) == GPIO_PIN_RESET){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b02      	cmp	r3, #2
 8000676:	dc07      	bgt.n	8000688 <scanRows+0x48>
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	4619      	mov	r1, r3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f001 fbaf 	bl	8001de0 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0e5      	beq.n	8000654 <scanRows+0x14>
	}

	if(HAL_GPIO_ReadPin(port, GPIO_Pin) == GPIO_PIN_RESET) r = -1;
 8000688:	887b      	ldrh	r3, [r7, #2]
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f001 fba7 	bl	8001de0 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d102      	bne.n	800069e <scanRows+0x5e>
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	60fb      	str	r3, [r7, #12]

	resetRowPins();
 800069e:	f7ff ffad 	bl	80005fc <resetRowPins>
	return r;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000010 	.word	0x20000010

080006b4 <getKey>:

uint8_t getKey(int row, int col){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	return keyMap[row][col];
 80006be:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <getKey+0x24>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	441a      	add	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000020 	.word	0x20000020

080006dc <findKey>:

uint8_t findKey(GPIO_TypeDef* port_col, uint16_t GPIO_Pin_col){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	807b      	strh	r3, [r7, #2]
	int row,col = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]

	row = scanRows(port_col,GPIO_Pin_col);
 80006ec:	887b      	ldrh	r3, [r7, #2]
 80006ee:	4619      	mov	r1, r3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffa5 	bl	8000640 <scanRows>
 80006f6:	60b8      	str	r0, [r7, #8]
	if(row == -1) return 0x00;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006fe:	d104      	bne.n	800070a <findKey+0x2e>
 8000700:	2300      	movs	r3, #0
 8000702:	e016      	b.n	8000732 <findKey+0x56>

	while(GPIO_Pin_col != pinsC[col] && col < 4) col++;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <findKey+0x60>)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000712:	887a      	ldrh	r2, [r7, #2]
 8000714:	429a      	cmp	r2, r3
 8000716:	d002      	beq.n	800071e <findKey+0x42>
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b03      	cmp	r3, #3
 800071c:	ddf2      	ble.n	8000704 <findKey+0x28>
	if(col >= 4) return 0x00;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b03      	cmp	r3, #3
 8000722:	dd01      	ble.n	8000728 <findKey+0x4c>
 8000724:	2300      	movs	r3, #0
 8000726:	e004      	b.n	8000732 <findKey+0x56>

	return getKey(row,col);
 8000728:	68f9      	ldr	r1, [r7, #12]
 800072a:	68b8      	ldr	r0, [r7, #8]
 800072c:	f7ff ffc2 	bl	80006b4 <getKey>
 8000730:	4603      	mov	r3, r0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000018 	.word	0x20000018

08000740 <enter_wait_state>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enter_wait_state(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	disable_rfid_sensor = 1;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <enter_wait_state+0x20>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800074a:	2017      	movs	r0, #23
 800074c:	f001 f917 	bl	800197e <HAL_NVIC_DisableIRQ>
	HAL_UART_Receive_IT(&huart1, &data_from_output_board, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	4904      	ldr	r1, [pc, #16]	; (8000764 <enter_wait_state+0x24>)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <enter_wait_state+0x28>)
 8000756:	f002 ffd4 	bl	8003702 <HAL_UART_Receive_IT>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200001f4 	.word	0x200001f4
 8000764:	20000030 	.word	0x20000030
 8000768:	20000160 	.word	0x20000160

0800076c <exit_wait_state>:

void exit_wait_state(){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	disable_rfid_sensor = 0;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <exit_wait_state+0x1c>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
	num_char = 0;
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <exit_wait_state+0x20>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800077c:	2017      	movs	r0, #23
 800077e:	f001 f8f0 	bl	8001962 <HAL_NVIC_EnableIRQ>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001f4 	.word	0x200001f4
 800078c:	200001f0 	.word	0x200001f0

08000790 <send_byte_to_output_board>:

void send_byte_to_output_board(uint8_t* pData, int len){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	while(HAL_UART_Transmit(&huart1, pData, len, HAL_MAX_DELAY) != HAL_OK);
 800079a:	bf00      	nop
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <send_byte_to_output_board+0x2c>)
 80007a8:	f002 ff19 	bl	80035de <HAL_UART_Transmit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f4      	bne.n	800079c <send_byte_to_output_board+0xc>
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000160 	.word	0x20000160

080007c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	uint8_t key;
	uint8_t flag = FLAG_PIN;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73bb      	strb	r3, [r7, #14]

	currentms = HAL_GetTick();
 80007ce:	f000 ffa1 	bl	8001714 <HAL_GetTick>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <HAL_GPIO_EXTI_Callback+0xfc>)
 80007d8:	601a      	str	r2, [r3, #0]

	if(currentms-previousms>300){
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <HAL_GPIO_EXTI_Callback+0xfc>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x100>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007e8:	dd64      	ble.n	80008b4 <HAL_GPIO_EXTI_Callback+0xf4>
		previousms = currentms;
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <HAL_GPIO_EXTI_Callback+0xfc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x100>)
 80007f0:	6013      	str	r3, [r2, #0]

		switch(GPIO_Pin){
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007f8:	d00d      	beq.n	8000816 <HAL_GPIO_EXTI_Callback+0x56>
 80007fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007fe:	dc2a      	bgt.n	8000856 <HAL_GPIO_EXTI_Callback+0x96>
 8000800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000804:	d00f      	beq.n	8000826 <HAL_GPIO_EXTI_Callback+0x66>
 8000806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800080a:	dc24      	bgt.n	8000856 <HAL_GPIO_EXTI_Callback+0x96>
 800080c:	2b20      	cmp	r3, #32
 800080e:	d01a      	beq.n	8000846 <HAL_GPIO_EXTI_Callback+0x86>
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	d010      	beq.n	8000836 <HAL_GPIO_EXTI_Callback+0x76>
 8000814:	e01f      	b.n	8000856 <HAL_GPIO_EXTI_Callback+0x96>
		case C0_PIN:
			key = findKey(C0_PORT, GPIO_Pin);
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	4619      	mov	r1, r3
 800081a:	482a      	ldr	r0, [pc, #168]	; (80008c4 <HAL_GPIO_EXTI_Callback+0x104>)
 800081c:	f7ff ff5e 	bl	80006dc <findKey>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
			break;
 8000824:	e01a      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x9c>
		case C1_PIN:
			key = findKey(C1_PORT, GPIO_Pin);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	4619      	mov	r1, r3
 800082a:	4826      	ldr	r0, [pc, #152]	; (80008c4 <HAL_GPIO_EXTI_Callback+0x104>)
 800082c:	f7ff ff56 	bl	80006dc <findKey>
 8000830:	4603      	mov	r3, r0
 8000832:	73fb      	strb	r3, [r7, #15]
			break;
 8000834:	e012      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x9c>
		case C2_PIN:
			key = findKey(C2_PORT, GPIO_Pin);
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	4619      	mov	r1, r3
 800083a:	4822      	ldr	r0, [pc, #136]	; (80008c4 <HAL_GPIO_EXTI_Callback+0x104>)
 800083c:	f7ff ff4e 	bl	80006dc <findKey>
 8000840:	4603      	mov	r3, r0
 8000842:	73fb      	strb	r3, [r7, #15]
			break;
 8000844:	e00a      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x9c>
		case C3_PIN:
			key = findKey(C3_PORT, GPIO_Pin);
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	4619      	mov	r1, r3
 800084a:	481e      	ldr	r0, [pc, #120]	; (80008c4 <HAL_GPIO_EXTI_Callback+0x104>)
 800084c:	f7ff ff46 	bl	80006dc <findKey>
 8000850:	4603      	mov	r3, r0
 8000852:	73fb      	strb	r3, [r7, #15]
			break;
 8000854:	e002      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x9c>
		default:
			print_error();
 8000856:	f7ff fec1 	bl	80005dc <print_error>
			return;
 800085a:	e02b      	b.n	80008b4 <HAL_GPIO_EXTI_Callback+0xf4>
		}

		if(key == 0x00){
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d102      	bne.n	8000868 <HAL_GPIO_EXTI_Callback+0xa8>
			print_error();
 8000862:	f7ff febb 	bl	80005dc <print_error>
			return;
 8000866:	e025      	b.n	80008b4 <HAL_GPIO_EXTI_Callback+0xf4>
		}

		if(num_char == 0) {
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x108>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d105      	bne.n	800087c <HAL_GPIO_EXTI_Callback+0xbc>
			send_byte_to_output_board(&flag,1);
 8000870:	f107 030e 	add.w	r3, r7, #14
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff8a 	bl	8000790 <send_byte_to_output_board>
		}
		send_byte_to_output_board(&key,1);
 800087c:	f107 030f 	add.w	r3, r7, #15
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff84 	bl	8000790 <send_byte_to_output_board>
		HAL_UART_Transmit(&huart2, &key, 1, HAL_MAX_DELAY);
 8000888:	f107 010f 	add.w	r1, r7, #15
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	2201      	movs	r2, #1
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <HAL_GPIO_EXTI_Callback+0x10c>)
 8000894:	f002 fea3 	bl	80035de <HAL_UART_Transmit>

		num_char++;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x108>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x108>)
 80008a0:	6013      	str	r3, [r2, #0]
		disable_rfid_sensor = 1;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x110>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
		if(num_char == 4) enter_wait_state();
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x108>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d101      	bne.n	80008b4 <HAL_GPIO_EXTI_Callback+0xf4>
 80008b0:	f7ff ff46 	bl	8000740 <enter_wait_state>

	}
}
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200001e8 	.word	0x200001e8
 80008c0:	200001ec 	.word	0x200001ec
 80008c4:	40020800 	.word	0x40020800
 80008c8:	200001f0 	.word	0x200001f0
 80008cc:	200001a4 	.word	0x200001a4
 80008d0:	200001f4 	.word	0x200001f4

080008d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	print_lf();
 80008dc:	f7ff fe6e 	bl	80005bc <print_lf>
	print_byte_to_hex(data_from_output_board);
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_UART_RxCpltCallback+0x2c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe4d 	bl	8000584 <print_byte_to_hex>
	if(data_from_output_board == ACK) exit_wait_state();
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_UART_RxCpltCallback+0x2c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <HAL_UART_RxCpltCallback+0x22>
 80008f2:	f7ff ff3b 	bl	800076c <exit_wait_state>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000030 	.word	0x20000030

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 fe9d 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f839 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000912:	f000 f979 	bl	8000c08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000916:	f000 f94d 	bl	8000bb4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800091a:	f000 f89f 	bl	8000a5c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800091e:	f000 f91f 	bl	8000b60 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000922:	f000 f8d1 	bl	8000ac8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init(&hspi2, &htim2);
 8000926:	4914      	ldr	r1, [pc, #80]	; (8000978 <main+0x74>)
 8000928:	4814      	ldr	r0, [pc, #80]	; (800097c <main+0x78>)
 800092a:	f000 fa95 	bl	8000e58 <MFRC522_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(!disable_rfid_sensor){
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <main+0x7c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1fb      	bne.n	800092e <main+0x2a>
		  if(!MFRC522_Check(str)){
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fab9 	bl	8000eb0 <MFRC522_Check>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f4      	bne.n	800092e <main+0x2a>
			uint8_t flag = FLAG_CARD;
 8000944:	2301      	movs	r3, #1
 8000946:	70fb      	strb	r3, [r7, #3]

			send_byte_to_output_board(&flag, 1);
 8000948:	1cfb      	adds	r3, r7, #3
 800094a:	2101      	movs	r1, #1
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff1f 	bl	8000790 <send_byte_to_output_board>

			for(int i = 0; i < 4 ; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	e009      	b.n	800096c <main+0x68>
				send_byte_to_output_board(&str[i], 1);
 8000958:	1d3a      	adds	r2, r7, #4
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	2101      	movs	r1, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff15 	bl	8000790 <send_byte_to_output_board>
			for(int i = 0; i < 4 ; i++) {
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	2b03      	cmp	r3, #3
 8000970:	ddf2      	ble.n	8000958 <main+0x54>
//				print_byte_to_hex(str[i]);
			}
//			print_lf();

			enter_wait_state();
 8000972:	f7ff fee5 	bl	8000740 <enter_wait_state>
	  if(!disable_rfid_sensor){
 8000976:	e7da      	b.n	800092e <main+0x2a>
 8000978:	20000118 	.word	0x20000118
 800097c:	200000c0 	.word	0x200000c0
 8000980:	200001f4 	.word	0x200001f4

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	; 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	2230      	movs	r2, #48	; 0x30
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fe78 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <SystemClock_Config+0xd0>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a28      	ldr	r2, [pc, #160]	; (8000a54 <SystemClock_Config+0xd0>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
 80009b8:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <SystemClock_Config+0xd0>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <SystemClock_Config+0xd4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <SystemClock_Config+0xd4>)
 80009d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <SystemClock_Config+0xd4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ec:	2310      	movs	r3, #16
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009f8:	2310      	movs	r3, #16
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a06:	2307      	movs	r3, #7
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fa30 	bl	8001e74 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a1a:	f000 f9c3 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	230f      	movs	r3, #15
 8000a20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2302      	movs	r3, #2
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fc92 	bl	8002364 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a46:	f000 f9ad 	bl	8000da4 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	; 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <MX_SPI2_Init+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a90:	2228      	movs	r2, #40	; 0x28
 8000a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000aae:	f001 fe79 	bl	80027a4 <HAL_SPI_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ab8:	f000 f974 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000c0 	.word	0x200000c0
 8000ac4:	40003800 	.word	0x40003800

08000ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000aee:	2253      	movs	r2, #83	; 0x53
 8000af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000b0e:	f002 fa7b 	bl	8003008 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b18:	f000 f944 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000b2a:	f002 fabc 	bl	80030a6 <HAL_TIM_ConfigClockSource>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b34:	f000 f936 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_TIM2_Init+0x94>)
 8000b46:	f002 fc8f 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f928 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000118 	.word	0x20000118

08000b60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_USART1_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b98:	f002 fcd4 	bl	8003544 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f8ff 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000160 	.word	0x20000160
 8000bb0:	40011000 	.word	0x40011000

08000bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART2_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bec:	f002 fcaa 	bl	8003544 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f8d5 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001a4 	.word	0x200001a4
 8000c04:	40004400 	.word	0x40004400

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a5b      	ldr	r2, [pc, #364]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b59      	ldr	r3, [pc, #356]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a54      	ldr	r2, [pc, #336]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a4d      	ldr	r2, [pc, #308]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a46      	ldr	r2, [pc, #280]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <MX_GPIO_Init+0x18c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rfid_reset_GPIO_Port, rfid_reset_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2101      	movs	r1, #1
 8000c92:	4841      	ldr	r0, [pc, #260]	; (8000d98 <MX_GPIO_Init+0x190>)
 8000c94:	f001 f8bc 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|r0_keypad_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	21a0      	movs	r1, #160	; 0xa0
 8000c9c:	483f      	ldr	r0, [pc, #252]	; (8000d9c <MX_GPIO_Init+0x194>)
 8000c9e:	f001 f8b7 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rfid_nss_GPIO_Port, rfid_nss_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca8:	483d      	ldr	r0, [pc, #244]	; (8000da0 <MX_GPIO_Init+0x198>)
 8000caa:	f001 f8b1 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(r2_keypad_GPIO_Port, r2_keypad_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4839      	ldr	r0, [pc, #228]	; (8000d98 <MX_GPIO_Init+0x190>)
 8000cb4:	f001 f8ac 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, r3_keypad_Pin|r1_keypad_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2150      	movs	r1, #80	; 0x50
 8000cbc:	4838      	ldr	r0, [pc, #224]	; (8000da0 <MX_GPIO_Init+0x198>)
 8000cbe:	f001 f8a7 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin rfid_irq_Pin */
  GPIO_InitStruct.Pin = B1_Pin|rfid_irq_Pin;
 8000cc2:	f242 0302 	movw	r3, #8194	; 0x2002
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482f      	ldr	r0, [pc, #188]	; (8000d98 <MX_GPIO_Init+0x190>)
 8000cda:	f000 fefd 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : rfid_reset_Pin r2_keypad_Pin */
  GPIO_InitStruct.Pin = rfid_reset_Pin|r2_keypad_Pin;
 8000cde:	2381      	movs	r3, #129	; 0x81
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4828      	ldr	r0, [pc, #160]	; (8000d98 <MX_GPIO_Init+0x190>)
 8000cf6:	f000 feef 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin r0_keypad_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|r0_keypad_Pin;
 8000cfa:	23a0      	movs	r3, #160	; 0xa0
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4822      	ldr	r0, [pc, #136]	; (8000d9c <MX_GPIO_Init+0x194>)
 8000d12:	f000 fee1 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : c3_keypad_Pin c2_keypad_Pin c1_keypad_Pin c0_keypad_Pin */
  GPIO_InitStruct.Pin = c3_keypad_Pin|c2_keypad_Pin|c1_keypad_Pin|c0_keypad_Pin;
 8000d16:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <MX_GPIO_Init+0x190>)
 8000d2e:	f000 fed3 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : rfid_nss_Pin */
  GPIO_InitStruct.Pin = rfid_nss_Pin;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(rfid_nss_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <MX_GPIO_Init+0x198>)
 8000d4c:	f000 fec4 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : r3_keypad_Pin r1_keypad_Pin */
  GPIO_InitStruct.Pin = r3_keypad_Pin|r1_keypad_Pin;
 8000d50:	2350      	movs	r3, #80	; 0x50
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <MX_GPIO_Init+0x198>)
 8000d68:	f000 feb6 	bl	8001ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2017      	movs	r0, #23
 8000d72:	f000 fdda 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d76:	2017      	movs	r0, #23
 8000d78:	f000 fdf3 	bl	8001962 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2028      	movs	r0, #40	; 0x28
 8000d82:	f000 fdd2 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d86:	2028      	movs	r0, #40	; 0x28
 8000d88:	f000 fdeb 	bl	8001962 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <SPI1_WriteReg>:
//	uint32_t time = __HAL_TIM_GET_COUNTER(htim);
//	while(__HAL_TIM_GET_COUNTER(htim) - time < us);
//	HAL_TIM_Base_Stop(htim);
//}

void SPI1_WriteReg(uint8_t address, uint8_t value){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71bb      	strb	r3, [r7, #6]

	uint8_t data_send[2];

	data_send[0] = address;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	733b      	strb	r3, [r7, #12]
	data_send[1] = value;
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <SPI1_WriteReg+0x4c>)
 8000dd0:	f001 f81e 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, data_send, 2, HAL_MAX_DELAY);
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <SPI1_WriteReg+0x50>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f107 010c 	add.w	r1, r7, #12
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	2202      	movs	r2, #2
 8000de2:	f001 fd68 	bl	80028b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <SPI1_WriteReg+0x4c>)
 8000dee:	f001 f80f 	bl	8001e10 <HAL_GPIO_WritePin>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	200001f8 	.word	0x200001f8

08000e04 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[2], data_rcv[2];

	data_send[0] = address;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	733b      	strb	r3, [r7, #12]
	data_send[1] = 0x00;
 8000e12:	2300      	movs	r3, #0
 8000e14:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <SPI1_ReadReg+0x4c>)
 8000e1e:	f000 fff7 	bl	8001e10 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, data_send, data_rcv, 2, HAL_MAX_DELAY);
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <SPI1_ReadReg+0x50>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f107 0208 	add.w	r2, r7, #8
 8000e2a:	f107 010c 	add.w	r1, r7, #12
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2302      	movs	r3, #2
 8000e36:	f001 fe7a 	bl	8002b2e <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <SPI1_ReadReg+0x4c>)
 8000e42:	f000 ffe5 	bl	8001e10 <HAL_GPIO_WritePin>


	return data_rcv[1];
 8000e46:	7a7b      	ldrb	r3, [r7, #9]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40020400 	.word	0x40020400
 8000e54:	200001f8 	.word	0x200001f8

08000e58 <MFRC522_Init>:

void MFRC522_Init(SPI_HandleTypeDef* handle_spi, TIM_HandleTypeDef* handle_timer) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	hspi = handle_spi;
 8000e62:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <MFRC522_Init+0x50>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]
	htim = handle_timer;
 8000e68:	4a10      	ldr	r2, [pc, #64]	; (8000eac <MFRC522_Init+0x54>)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	6013      	str	r3, [r2, #0]


	MFRC522_Reset();
 8000e6e:	f000 f8b5 	bl	8000fdc <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000e72:	218d      	movs	r1, #141	; 0x8d
 8000e74:	202a      	movs	r0, #42	; 0x2a
 8000e76:	f000 f832 	bl	8000ede <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000e7a:	213e      	movs	r1, #62	; 0x3e
 8000e7c:	202b      	movs	r0, #43	; 0x2b
 8000e7e:	f000 f82e 	bl	8000ede <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8000e82:	211e      	movs	r1, #30
 8000e84:	202d      	movs	r0, #45	; 0x2d
 8000e86:	f000 f82a 	bl	8000ede <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	202c      	movs	r0, #44	; 0x2c
 8000e8e:	f000 f826 	bl	8000ede <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	2015      	movs	r0, #21
 8000e96:	f000 f822 	bl	8000ede <MFRC522_WriteRegister>
	MFRC522_AntennaOn();										// Open the antenna
 8000e9a:	f000 f88a 	bl	8000fb2 <MFRC522_AntennaOn>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001f8 	.word	0x200001f8
 8000eac:	200001fc 	.word	0x200001fc

08000eb0 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t * id) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);					// Find cards, return card type
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	2026      	movs	r0, #38	; 0x26
 8000ebc:	f000 f896 	bl	8000fec <MFRC522_Request>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes											// Command card into hibernation
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <MFRC522_Check+0x24>
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f98b 	bl	80011e6 <MFRC522_Anticoll>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <MFRC522_WriteRegister>:


void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;																		// Address format: 0XXXXXX0
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000ef8:	71fb      	strb	r3, [r7, #7]
    SPI1_WriteReg(addr, val);
 8000efa:	79ba      	ldrb	r2, [r7, #6]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff55 	bl	8000db0 <SPI1_WriteReg>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff68 	bl	8000e04 <SPI1_ReadReg>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ffda 	bl	8000f0e <MFRC522_ReadRegister>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffb8 	bl	8000ede <MFRC522_WriteRegister>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460a      	mov	r2, r1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	4613      	mov	r3, r2
 8000f84:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ffc0 	bl	8000f0e <MFRC522_ReadRegister>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b25a      	sxtb	r2, r3
 8000f92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff9a 	bl	8000ede <MFRC522_WriteRegister>
} 
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000fb8:	2014      	movs	r0, #20
 8000fba:	f7ff ffa8 	bl	8000f0e <MFRC522_ReadRegister>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <MFRC522_AntennaOn+0x22>
 8000fcc:	2103      	movs	r1, #3
 8000fce:	2014      	movs	r0, #20
 8000fd0:	f7ff ffb7 	bl	8000f42 <MFRC522_SetBitMask>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <MFRC522_Reset>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Reset(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ff7b 	bl	8000ede <MFRC522_WriteRegister>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t * TagType) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																				// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);											// TxLastBists = BitFramingReg[2..0]
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	200d      	movs	r0, #13
 8000ffc:	f7ff ff6f 	bl	8000ede <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2201      	movs	r2, #1
 8001010:	6839      	ldr	r1, [r7, #0]
 8001012:	200c      	movs	r0, #12
 8001014:	f000 f80f 	bl	8001036 <MFRC522_ToCard>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <MFRC522_Request+0x3c>
 8001022:	89bb      	ldrh	r3, [r7, #12]
 8001024:	2b10      	cmp	r3, #16
 8001026:	d001      	beq.n	800102c <MFRC522_Request+0x40>
 8001028:	2302      	movs	r3, #2
 800102a:	73fb      	strb	r3, [r7, #15]

	return status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t * sendData, uint8_t sendLen, uint8_t * backData, uint16_t * backLen) {
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b087      	sub	sp, #28
 800103a:	af00      	add	r7, sp, #0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	4613      	mov	r3, r2
 8001046:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001048:	2302      	movs	r3, #2
 800104a:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800104c:	2300      	movs	r3, #0
 800104e:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001050:	2300      	movs	r3, #0
 8001052:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	2b0c      	cmp	r3, #12
 8001058:	d006      	beq.n	8001068 <MFRC522_ToCard+0x32>
 800105a:	2b0e      	cmp	r3, #14
 800105c:	d109      	bne.n	8001072 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800105e:	2312      	movs	r3, #18
 8001060:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001062:	2310      	movs	r3, #16
 8001064:	757b      	strb	r3, [r7, #21]
			break;
 8001066:	e005      	b.n	8001074 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001068:	2377      	movs	r3, #119	; 0x77
 800106a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800106c:	2330      	movs	r3, #48	; 0x30
 800106e:	757b      	strb	r3, [r7, #21]
			break;
 8001070:	e000      	b.n	8001074 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8001072:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001074:	7dbb      	ldrb	r3, [r7, #22]
 8001076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	2002      	movs	r0, #2
 8001080:	f7ff ff2d 	bl	8000ede <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	2004      	movs	r0, #4
 8001088:	f7ff ff75 	bl	8000f76 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	200a      	movs	r0, #10
 8001090:	f7ff ff57 	bl	8000f42 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001094:	2100      	movs	r1, #0
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ff21 	bl	8000ede <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800109c:	2300      	movs	r3, #0
 800109e:	827b      	strh	r3, [r7, #18]
 80010a0:	e00a      	b.n	80010b8 <MFRC522_ToCard+0x82>
 80010a2:	8a7b      	ldrh	r3, [r7, #18]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	2009      	movs	r0, #9
 80010ae:	f7ff ff16 	bl	8000ede <MFRC522_WriteRegister>
 80010b2:	8a7b      	ldrh	r3, [r7, #18]
 80010b4:	3301      	adds	r3, #1
 80010b6:	827b      	strh	r3, [r7, #18]
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	8a7a      	ldrh	r2, [r7, #18]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3ef      	bcc.n	80010a2 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4619      	mov	r1, r3
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff ff09 	bl	8000ede <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);					// StartSend=1,transmission of data starts 
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d103      	bne.n	80010da <MFRC522_ToCard+0xa4>
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	200d      	movs	r0, #13
 80010d6:	f7ff ff34 	bl	8000f42 <MFRC522_SetBitMask>
	// Waiting to receive data to complete

	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80010da:	2004      	movs	r0, #4
 80010dc:	f7ff ff17 	bl	8000f0e <MFRC522_ReadRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	753b      	strb	r3, [r7, #20]

	} while (!(n&0x01) && !(n&waitIRq));
 80010e4:	7d3b      	ldrb	r3, [r7, #20]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <MFRC522_ToCard+0xc4>
 80010ee:	7d3a      	ldrb	r2, [r7, #20]
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	4013      	ands	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0ef      	beq.n	80010da <MFRC522_ToCard+0xa4>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);												// StartSend=0
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	200d      	movs	r0, #13
 80010fe:	f7ff ff3a 	bl	8000f76 <MFRC522_ClearBitMask>

	if(n&waitIRq && !(n&0x01))  {
 8001102:	7d3a      	ldrb	r2, [r7, #20]
 8001104:	7d7b      	ldrb	r3, [r7, #21]
 8001106:	4013      	ands	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d066      	beq.n	80011dc <MFRC522_ToCard+0x1a6>
 800110e:	7d3b      	ldrb	r3, [r7, #20]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d161      	bne.n	80011dc <MFRC522_ToCard+0x1a6>
		print_byte_to_hex(0xFF);
 8001118:	20ff      	movs	r0, #255	; 0xff
 800111a:	f7ff fa33 	bl	8000584 <print_byte_to_hex>
		print_lf();
 800111e:	f7ff fa4d 	bl	80005bc <print_lf>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001122:	2006      	movs	r0, #6
 8001124:	f7ff fef3 	bl	8000f0e <MFRC522_ReadRegister>
 8001128:	4603      	mov	r3, r0
 800112a:	f003 031b 	and.w	r3, r3, #27
 800112e:	2b00      	cmp	r3, #0
 8001130:	d152      	bne.n	80011d8 <MFRC522_ToCard+0x1a2>
			print_byte_to_hex(0xAA);
 8001132:	20aa      	movs	r0, #170	; 0xaa
 8001134:	f7ff fa26 	bl	8000584 <print_byte_to_hex>
			print_lf();
 8001138:	f7ff fa40 	bl	80005bc <print_lf>
			status = MI_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001140:	7d3a      	ldrb	r2, [r7, #20]
 8001142:	7dbb      	ldrb	r3, [r7, #22]
 8001144:	4013      	ands	r3, r2
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MFRC522_ToCard+0x11e>
 8001150:	2301      	movs	r3, #1
 8001152:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b0c      	cmp	r3, #12
 8001158:	d140      	bne.n	80011dc <MFRC522_ToCard+0x1a6>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800115a:	200a      	movs	r0, #10
 800115c:	f7ff fed7 	bl	8000f0e <MFRC522_ReadRegister>
 8001160:	4603      	mov	r3, r0
 8001162:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001164:	200c      	movs	r0, #12
 8001166:	f7ff fed2 	bl	8000f0e <MFRC522_ReadRegister>
 800116a:	4603      	mov	r3, r0
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n - 1) * 8 + lastBits; else *backLen = n * 8;
 8001172:	7c7b      	ldrb	r3, [r7, #17]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <MFRC522_ToCard+0x15a>
 8001178:	7d3b      	ldrb	r3, [r7, #20]
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	b29a      	uxth	r2, r3
 8001182:	7c7b      	ldrb	r3, [r7, #17]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b29a      	uxth	r2, r3
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	801a      	strh	r2, [r3, #0]
 800118e:	e005      	b.n	800119c <MFRC522_ToCard+0x166>
 8001190:	7d3b      	ldrb	r3, [r7, #20]
 8001192:	b29b      	uxth	r3, r3
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	b29a      	uxth	r2, r3
 8001198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119a:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800119c:	7d3b      	ldrb	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <MFRC522_ToCard+0x170>
 80011a2:	2301      	movs	r3, #1
 80011a4:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 80011a6:	7d3b      	ldrb	r3, [r7, #20]
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d901      	bls.n	80011b0 <MFRC522_ToCard+0x17a>
 80011ac:	2310      	movs	r3, #16
 80011ae:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80011b0:	2300      	movs	r3, #0
 80011b2:	827b      	strh	r3, [r7, #18]
 80011b4:	e00a      	b.n	80011cc <MFRC522_ToCard+0x196>
 80011b6:	8a7b      	ldrh	r3, [r7, #18]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	18d4      	adds	r4, r2, r3
 80011bc:	2009      	movs	r0, #9
 80011be:	f7ff fea6 	bl	8000f0e <MFRC522_ReadRegister>
 80011c2:	4603      	mov	r3, r0
 80011c4:	7023      	strb	r3, [r4, #0]
 80011c6:	8a7b      	ldrh	r3, [r7, #18]
 80011c8:	3301      	adds	r3, #1
 80011ca:	827b      	strh	r3, [r7, #18]
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	8a7a      	ldrh	r2, [r7, #18]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ef      	bcc.n	80011b6 <MFRC522_ToCard+0x180>
 80011d6:	e001      	b.n	80011dc <MFRC522_ToCard+0x1a6>
			}
		} else status = MI_ERR;
 80011d8:	2302      	movs	r3, #2
 80011da:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}

080011e6 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t * serNum) {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af02      	add	r7, sp, #8
 80011ec:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 80011f2:	2100      	movs	r1, #0
 80011f4:	200d      	movs	r0, #13
 80011f6:	f7ff fe72 	bl	8000ede <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2293      	movs	r2, #147	; 0x93
 80011fe:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	2220      	movs	r2, #32
 8001206:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001208:	f107 030a 	add.w	r3, r7, #10
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	200c      	movs	r0, #12
 8001216:	f7ff ff0e 	bl	8001036 <MFRC522_ToCard>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d118      	bne.n	8001256 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001224:	2300      	movs	r3, #0
 8001226:	73bb      	strb	r3, [r7, #14]
 8001228:	e009      	b.n	800123e <MFRC522_Anticoll+0x58>
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	4053      	eors	r3, r2
 8001236:	737b      	strb	r3, [r7, #13]
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	3301      	adds	r3, #1
 800123c:	73bb      	strb	r3, [r7, #14]
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d9f2      	bls.n	800122a <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	7b7a      	ldrb	r2, [r7, #13]
 800124e:	429a      	cmp	r2, r3
 8001250:	d001      	beq.n	8001256 <MFRC522_Anticoll+0x70>
 8001252:	2302      	movs	r3, #2
 8001254:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x4c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800129e:	2007      	movs	r0, #7
 80012a0:	f000 fb38 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a28      	ldr	r2, [pc, #160]	; (8001370 <HAL_SPI_MspInit+0xc0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d14a      	bne.n	8001368 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001326:	230c      	movs	r3, #12
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001336:	2305      	movs	r3, #5
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <HAL_SPI_MspInit+0xc8>)
 8001342:	f000 fbc9 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001358:	2305      	movs	r3, #5
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <HAL_SPI_MspInit+0xcc>)
 8001364:	f000 fbb8 	bl	8001ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40003800 	.word	0x40003800
 8001374:	40023800 	.word	0x40023800
 8001378:	40020800 	.word	0x40020800
 800137c:	40020400 	.word	0x40020400

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d10d      	bne.n	80013ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_TIM_Base_MspInit+0x3c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_TIM_Base_MspInit+0x3c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_TIM_Base_MspInit+0x3c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a36      	ldr	r2, [pc, #216]	; (80014b8 <HAL_UART_MspInit+0xf8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d135      	bne.n	800144e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	4b35      	ldr	r3, [pc, #212]	; (80014bc <HAL_UART_MspInit+0xfc>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a34      	ldr	r2, [pc, #208]	; (80014bc <HAL_UART_MspInit+0xfc>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <HAL_UART_MspInit+0xfc>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_UART_MspInit+0xfc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <HAL_UART_MspInit+0xfc>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_UART_MspInit+0xfc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800141a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800142c:	2307      	movs	r3, #7
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4822      	ldr	r0, [pc, #136]	; (80014c0 <HAL_UART_MspInit+0x100>)
 8001438:	f000 fb4e 	bl	8001ad8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2025      	movs	r0, #37	; 0x25
 8001442:	f000 fa72 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001446:	2025      	movs	r0, #37	; 0x25
 8001448:	f000 fa8b 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800144c:	e030      	b.n	80014b0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_UART_MspInit+0x104>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d12b      	bne.n	80014b0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_UART_MspInit+0xfc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a16      	ldr	r2, [pc, #88]	; (80014bc <HAL_UART_MspInit+0xfc>)
 8001462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_UART_MspInit+0xfc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_UART_MspInit+0xfc>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_UART_MspInit+0xfc>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_UART_MspInit+0xfc>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001490:	230c      	movs	r3, #12
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a0:	2307      	movs	r3, #7
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_UART_MspInit+0x100>)
 80014ac:	f000 fb14 	bl	8001ad8 <HAL_GPIO_Init>
}
 80014b0:	bf00      	nop
 80014b2:	3730      	adds	r7, #48	; 0x30
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40004400 	.word	0x40004400

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f8ea 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(c3_keypad_Pin);
 8001520:	2020      	movs	r0, #32
 8001522:	f000 fc8f 	bl	8001e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(c2_keypad_Pin);
 8001526:	2040      	movs	r0, #64	; 0x40
 8001528:	f000 fc8c 	bl	8001e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(c1_keypad_Pin);
 800152c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001530:	f000 fc88 	bl	8001e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(c0_keypad_Pin);
 8001534:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001538:	f000 fc84 	bl	8001e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <USART1_IRQHandler+0x10>)
 8001546:	f002 f90d 	bl	8003764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000160 	.word	0x20000160

08001554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001558:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800155c:	f000 fc72 	bl	8001e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f003 f84e 	bl	8004634 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20018000 	.word	0x20018000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20000200 	.word	0x20000200
 80015cc:	20000218 	.word	0x20000218

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015fa:	490e      	ldr	r1, [pc, #56]	; (8001634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001610:	4c0b      	ldr	r4, [pc, #44]	; (8001640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161e:	f7ff ffd7 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f003 f80d 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff f96d 	bl	8000904 <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800162c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001638:	08004ffc 	.word	0x08004ffc
  ldr r2, =_sbss
 800163c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001640:	20000218 	.word	0x20000218

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_Init+0x40>)
 8001652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_Init+0x40>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x40>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f94f 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fdf0 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f975 	bl	800199a <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f92f 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000034 	.word	0x20000034
 80016e4:	2000003c 	.word	0x2000003c
 80016e8:	20000038 	.word	0x20000038

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000003c 	.word	0x2000003c
 8001710:	20000204 	.word	0x20000204

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000204 	.word	0x20000204

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <__NVIC_EnableIRQ+0x38>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db12      	blt.n	8001804 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	490a      	ldr	r1, [pc, #40]	; (8001810 <__NVIC_DisableIRQ+0x44>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	3320      	adds	r3, #32
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f8:	f3bf 8f4f 	dsb	sy
}
 80017fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017fe:	f3bf 8f6f 	isb	sy
}
 8001802:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff05 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff1a 	bl	8001774 <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff0d 	bl	8001790 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff1d 	bl	80017cc <__NVIC_DisableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff94 	bl	80018d0 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fea8 	bl	8001714 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d008      	beq.n	80019e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e052      	b.n	8001a8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0216 	bic.w	r2, r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d103      	bne.n	8001a14 <HAL_DMA_Abort+0x62>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0208 	bic.w	r2, r2, #8
 8001a22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	e013      	b.n	8001a5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a36:	f7ff fe6d 	bl	8001714 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d90c      	bls.n	8001a5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e015      	b.n	8001a8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e4      	bne.n	8001a36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	223f      	movs	r2, #63	; 0x3f
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e00c      	b.n	8001aca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e159      	b.n	8001da8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 8148 	bne.w	8001da2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d017      	beq.n	8001bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d123      	bne.n	8001c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80a2 	beq.w	8001da2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b54      	ldr	r3, [pc, #336]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7a:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_GPIO_Init+0x2ec>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a49      	ldr	r2, [pc, #292]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x202>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a48      	ldr	r2, [pc, #288]	; (8001dcc <HAL_GPIO_Init+0x2f4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x1fe>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a47      	ldr	r2, [pc, #284]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a46      	ldr	r2, [pc, #280]	; (8001dd4 <HAL_GPIO_Init+0x2fc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x1f6>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a45      	ldr	r2, [pc, #276]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x1f2>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e008      	b.n	8001cdc <HAL_GPIO_Init+0x204>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x204>
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e004      	b.n	8001cdc <HAL_GPIO_Init+0x204>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_Init+0x204>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x204>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cec:	4935      	ldr	r1, [pc, #212]	; (8001dc4 <HAL_GPIO_Init+0x2ec>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d72:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9c:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3301      	adds	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	f67f aea2 	bls.w	8001af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fcac 	bl	80007c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e267      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d075      	beq.n	8001f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e92:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b85      	ldr	r3, [pc, #532]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e242      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x74>
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a75      	ldr	r2, [pc, #468]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b70      	ldr	r3, [pc, #448]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6f      	ldr	r2, [pc, #444]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6c      	ldr	r2, [pc, #432]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a68      	ldr	r2, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fbf2 	bl	8001714 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fbee 	bl	8001714 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e207      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fbde 	bl	8001714 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fbda 	bl	8001714 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1f3      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1c7      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4937      	ldr	r1, [pc, #220]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x244>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff fb93 	bl	8001714 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fb8f 	bl	8001714 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1a8      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4925      	ldr	r1, [pc, #148]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x244>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff fb72 	bl	8001714 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff fb6e 	bl	8001714 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e187      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d036      	beq.n	80020cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_RCC_OscConfig+0x248>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff fb52 	bl	8001714 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fb4e 	bl	8001714 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e167      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x200>
 8002092:	e01b      	b.n	80020cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x248>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7ff fb3b 	bl	8001714 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e00e      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a2:	f7ff fb37 	bl	8001714 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d907      	bls.n	80020c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e150      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	42470000 	.word	0x42470000
 80020bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ea      	bne.n	80020a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8097 	beq.w	8002208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a7c      	ldr	r2, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b7a      	ldr	r3, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b77      	ldr	r3, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a73      	ldr	r2, [pc, #460]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7ff faf7 	bl	8001714 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7ff faf3 	bl	8001714 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e10c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x2ea>
 8002150:	4b64      	ldr	r3, [pc, #400]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a63      	ldr	r2, [pc, #396]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x30c>
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a5e      	ldr	r2, [pc, #376]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a5b      	ldr	r2, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 8002180:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a57      	ldr	r2, [pc, #348]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a54      	ldr	r2, [pc, #336]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0304 	bic.w	r3, r3, #4
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff fab8 	bl	8001714 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7ff fab4 	bl	8001714 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0cb      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ee      	beq.n	80021a8 <HAL_RCC_OscConfig+0x334>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7ff faa2 	bl	8001714 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff fa9e 	bl	8001714 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0b5      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ee      	bne.n	80021d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a1 	beq.w	8002354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d05c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d141      	bne.n	80022aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fa72 	bl	8001714 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff fa6e 	bl	8001714 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e087      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	3b01      	subs	r3, #1
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	491b      	ldr	r1, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fa47 	bl	8001714 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fa43 	bl	8001714 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e05c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x416>
 80022a8:	e054      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fa30 	bl	8001714 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff fa2c 	bl	8001714 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e045      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
 80022d6:	e03d      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e038      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d028      	beq.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d121      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11a      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002328:	4293      	cmp	r3, r2
 800232a:	d111      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cc      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90c      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d044      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d119      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e067      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7ff f95e 	bl	8001714 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7ff f95a 	bl	8001714 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20c      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f8be 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00
 8002520:	40023800 	.word	0x40023800
 8002524:	08004fa0 	.word	0x08004fa0
 8002528:	20000034 	.word	0x20000034
 800252c:	20000038 	.word	0x20000038

08002530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002534:	b094      	sub	sp, #80	; 0x50
 8002536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
 800253c:	2300      	movs	r3, #0
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002540:	2300      	movs	r3, #0
 8002542:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002548:	4b79      	ldr	r3, [pc, #484]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d00d      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 8002554:	2b08      	cmp	r3, #8
 8002556:	f200 80e1 	bhi.w	800271c <HAL_RCC_GetSysClockFreq+0x1ec>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x34>
 800255e:	2b04      	cmp	r3, #4
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x3a>
 8002562:	e0db      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_GetSysClockFreq+0x204>)
 8002566:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002568:	e0db      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256a:	4b73      	ldr	r3, [pc, #460]	; (8002738 <HAL_RCC_GetSysClockFreq+0x208>)
 800256c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800256e:	e0d8      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b6d      	ldr	r3, [pc, #436]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	2200      	movs	r2, #0
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002590:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025a2:	4622      	mov	r2, r4
 80025a4:	462b      	mov	r3, r5
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4621      	mov	r1, r4
 80025bc:	1a51      	subs	r1, r2, r1
 80025be:	6139      	str	r1, [r7, #16]
 80025c0:	4629      	mov	r1, r5
 80025c2:	eb63 0301 	sbc.w	r3, r3, r1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d4:	4659      	mov	r1, fp
 80025d6:	018b      	lsls	r3, r1, #6
 80025d8:	4651      	mov	r1, sl
 80025da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025de:	4651      	mov	r1, sl
 80025e0:	018a      	lsls	r2, r1, #6
 80025e2:	4651      	mov	r1, sl
 80025e4:	ebb2 0801 	subs.w	r8, r2, r1
 80025e8:	4659      	mov	r1, fp
 80025ea:	eb63 0901 	sbc.w	r9, r3, r1
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002602:	4690      	mov	r8, r2
 8002604:	4699      	mov	r9, r3
 8002606:	4623      	mov	r3, r4
 8002608:	eb18 0303 	adds.w	r3, r8, r3
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	462b      	mov	r3, r5
 8002610:	eb49 0303 	adc.w	r3, r9, r3
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002622:	4629      	mov	r1, r5
 8002624:	024b      	lsls	r3, r1, #9
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800262c:	4621      	mov	r1, r4
 800262e:	024a      	lsls	r2, r1, #9
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002636:	2200      	movs	r2, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
 800263a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800263c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002640:	f7fd fe1e 	bl	8000280 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4613      	mov	r3, r2
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800264c:	e058      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	4618      	mov	r0, r3
 8002658:	4611      	mov	r1, r2
 800265a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002668:	4642      	mov	r2, r8
 800266a:	464b      	mov	r3, r9
 800266c:	f04f 0000 	mov.w	r0, #0
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	0159      	lsls	r1, r3, #5
 8002676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267a:	0150      	lsls	r0, r2, #5
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4641      	mov	r1, r8
 8002682:	ebb2 0a01 	subs.w	sl, r2, r1
 8002686:	4649      	mov	r1, r9
 8002688:	eb63 0b01 	sbc.w	fp, r3, r1
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800269c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026a0:	ebb2 040a 	subs.w	r4, r2, sl
 80026a4:	eb63 050b 	sbc.w	r5, r3, fp
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	00eb      	lsls	r3, r5, #3
 80026b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b6:	00e2      	lsls	r2, r4, #3
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	4643      	mov	r3, r8
 80026be:	18e3      	adds	r3, r4, r3
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	464b      	mov	r3, r9
 80026c4:	eb45 0303 	adc.w	r3, r5, r3
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d6:	4629      	mov	r1, r5
 80026d8:	028b      	lsls	r3, r1, #10
 80026da:	4621      	mov	r1, r4
 80026dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e0:	4621      	mov	r1, r4
 80026e2:	028a      	lsls	r2, r1, #10
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ea:	2200      	movs	r2, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	61fa      	str	r2, [r7, #28]
 80026f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f4:	f7fd fdc4 	bl	8000280 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4613      	mov	r3, r2
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_GetSysClockFreq+0x200>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetSysClockFreq+0x204>)
 800271e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002724:	4618      	mov	r0, r3
 8002726:	3750      	adds	r7, #80	; 0x50
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	00f42400 	.word	0x00f42400
 8002738:	007a1200 	.word	0x007a1200

0800273c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_RCC_GetHCLKFreq+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000034 	.word	0x20000034

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002758:	f7ff fff0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0a9b      	lsrs	r3, r3, #10
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	08004fb0 	.word	0x08004fb0

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002780:	f7ff ffdc 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0b5b      	lsrs	r3, r3, #13
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	08004fb0 	.word	0x08004fb0

080027a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07b      	b.n	80028ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c6:	d009      	beq.n	80027dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
 80027ce:	e005      	b.n	80027dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fd5a 	bl	80012b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002812:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	ea42 0103 	orr.w	r1, r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	f003 0104 	and.w	r1, r3, #4
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f003 0210 	and.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b088      	sub	sp, #32
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_SPI_Transmit+0x22>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e126      	b.n	8002b26 <HAL_SPI_Transmit+0x270>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028e0:	f7fe ff18 	bl	8001714 <HAL_GetTick>
 80028e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028fa:	e10b      	b.n	8002b14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Transmit+0x52>
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800290c:	e102      	b.n	8002b14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2203      	movs	r2, #3
 8002912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002954:	d10f      	bne.n	8002976 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d007      	beq.n	8002994 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	d14b      	bne.n	8002a36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_SPI_Transmit+0xf6>
 80029a6:	8afb      	ldrh	r3, [r7, #22]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d13e      	bne.n	8002a2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	1c9a      	adds	r2, r3, #2
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029d0:	e02b      	b.n	8002a2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d112      	bne.n	8002a06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a04:	e011      	b.n	8002a2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a06:	f7fe fe85 	bl	8001714 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d803      	bhi.n	8002a1e <HAL_SPI_Transmit+0x168>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d102      	bne.n	8002a24 <HAL_SPI_Transmit+0x16e>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a28:	e074      	b.n	8002b14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ce      	bne.n	80029d2 <HAL_SPI_Transmit+0x11c>
 8002a34:	e04c      	b.n	8002ad0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_SPI_Transmit+0x18e>
 8002a3e:	8afb      	ldrh	r3, [r7, #22]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d140      	bne.n	8002ac6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	7812      	ldrb	r2, [r2, #0]
 8002a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a6a:	e02c      	b.n	8002ac6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d113      	bne.n	8002aa2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aa0:	e011      	b.n	8002ac6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa2:	f7fe fe37 	bl	8001714 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d803      	bhi.n	8002aba <HAL_SPI_Transmit+0x204>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d102      	bne.n	8002ac0 <HAL_SPI_Transmit+0x20a>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ac4:	e026      	b.n	8002b14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1cd      	bne.n	8002a6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fa55 	bl	8002f84 <SPI_EndRxTxTransaction>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e000      	b.n	8002b14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b08c      	sub	sp, #48	; 0x30
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x26>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e18a      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x33c>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b5c:	f7fe fdda 	bl	8001714 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d00f      	beq.n	8002b9e <HAL_SPI_TransmitReceive+0x70>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b84:	d107      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x68>
 8002b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d003      	beq.n	8002b9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b9c:	e15b      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x82>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x82>
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bb6:	e14e      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d003      	beq.n	8002bcc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2205      	movs	r2, #5
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	887a      	ldrh	r2, [r7, #2]
 8002be2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	887a      	ldrh	r2, [r7, #2]
 8002bee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d007      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c28:	d178      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x10a>
 8002c32:	8b7b      	ldrh	r3, [r7, #26]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d166      	bne.n	8002d06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	1c9a      	adds	r2, r3, #2
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c5c:	e053      	b.n	8002d06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x176>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <HAL_SPI_TransmitReceive+0x176>
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d113      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d119      	bne.n	8002ce6 <HAL_SPI_TransmitReceive+0x1b8>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d014      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	1c9a      	adds	r2, r3, #2
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ce6:	f7fe fd15 	bl	8001714 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d807      	bhi.n	8002d06 <HAL_SPI_TransmitReceive+0x1d8>
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d003      	beq.n	8002d06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d04:	e0a7      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1a6      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x130>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1a1      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x130>
 8002d1a:	e07c      	b.n	8002e16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x1fc>
 8002d24:	8b7b      	ldrh	r3, [r7, #26]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d16b      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d50:	e057      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d11c      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x26c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x26c>
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d114      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d119      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x2ae>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ddc:	f7fe fc9a 	bl	8001714 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d803      	bhi.n	8002df4 <HAL_SPI_TransmitReceive+0x2c6>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d102      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x2cc>
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e00:	e029      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1a2      	bne.n	8002d52 <HAL_SPI_TransmitReceive+0x224>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d19d      	bne.n	8002d52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8b2 	bl	8002f84 <SPI_EndRxTxTransaction>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e32:	e010      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	e000      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3730      	adds	r7, #48	; 0x30
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e84:	f7fe fc46 	bl	8001714 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e94:	f7fe fc3e 	bl	8001714 <HAL_GetTick>
 8002e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	015b      	lsls	r3, r3, #5
 8002ea0:	0d1b      	lsrs	r3, r3, #20
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eaa:	e054      	b.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d050      	beq.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eb4:	f7fe fc2e 	bl	8001714 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d902      	bls.n	8002eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d13d      	bne.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d111      	bne.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d004      	beq.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d107      	bne.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f10:	d10f      	bne.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e017      	b.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d19b      	bne.n	8002eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000034 	.word	0x20000034

08002f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <SPI_EndRxTxTransaction+0x7c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <SPI_EndRxTxTransaction+0x80>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0d5b      	lsrs	r3, r3, #21
 8002f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fae:	d112      	bne.n	8002fd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ff5a 	bl	8002e74 <SPI_WaitFlagStateUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d016      	beq.n	8002ff4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e00f      	b.n	8002ff6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d0f2      	beq.n	8002fd6 <SPI_EndRxTxTransaction+0x52>
 8002ff0:	e000      	b.n	8002ff4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ff2:	bf00      	nop
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000034 	.word	0x20000034
 8003004:	165e9f81 	.word	0x165e9f81

08003008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e041      	b.n	800309e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe f9a6 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 f8f4 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_ConfigClockSource+0x1c>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0b4      	b.n	800322c <HAL_TIM_ConfigClockSource+0x186>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fa:	d03e      	beq.n	800317a <HAL_TIM_ConfigClockSource+0xd4>
 80030fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003100:	f200 8087 	bhi.w	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	f000 8086 	beq.w	8003218 <HAL_TIM_ConfigClockSource+0x172>
 800310c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003110:	d87f      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	2b70      	cmp	r3, #112	; 0x70
 8003114:	d01a      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xa6>
 8003116:	2b70      	cmp	r3, #112	; 0x70
 8003118:	d87b      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d050      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0x11a>
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d877      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 8003122:	2b50      	cmp	r3, #80	; 0x50
 8003124:	d03c      	beq.n	80031a0 <HAL_TIM_ConfigClockSource+0xfa>
 8003126:	2b50      	cmp	r3, #80	; 0x50
 8003128:	d873      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d058      	beq.n	80031e0 <HAL_TIM_ConfigClockSource+0x13a>
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d86f      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 8003132:	2b30      	cmp	r3, #48	; 0x30
 8003134:	d064      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0x15a>
 8003136:	2b30      	cmp	r3, #48	; 0x30
 8003138:	d86b      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 800313a:	2b20      	cmp	r3, #32
 800313c:	d060      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0x15a>
 800313e:	2b20      	cmp	r3, #32
 8003140:	d867      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d05c      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0x15a>
 8003146:	2b10      	cmp	r3, #16
 8003148:	d05a      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0x15a>
 800314a:	e062      	b.n	8003212 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f000 f964 	bl	8003428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800316e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
      break;
 8003178:	e04f      	b.n	800321a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f000 f94d 	bl	8003428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319c:	609a      	str	r2, [r3, #8]
      break;
 800319e:	e03c      	b.n	800321a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f000 f8c1 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2150      	movs	r1, #80	; 0x50
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f91a 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031be:	e02c      	b.n	800321a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f000 f8e0 	bl	8003392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2160      	movs	r1, #96	; 0x60
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 f90a 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031de:	e01c      	b.n	800321a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	461a      	mov	r2, r3
 80031ee:	f000 f8a1 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2140      	movs	r1, #64	; 0x40
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f8fa 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031fe:	e00c      	b.n	800321a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 f8f1 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 8003210:	e003      	b.n	800321a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
      break;
 8003216:	e000      	b.n	800321a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003218:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a31      	ldr	r2, [pc, #196]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a30      	ldr	r2, [pc, #192]	; (8003320 <TIM_Base_SetConfig+0xec>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d017      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a21      	ldr	r2, [pc, #132]	; (8003320 <TIM_Base_SetConfig+0xec>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <TIM_Base_SetConfig+0xf4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <TIM_Base_SetConfig+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_Base_SetConfig+0xfc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d108      	bne.n	80032d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	615a      	str	r2, [r3, #20]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800

08003334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 030a 	bic.w	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0210 	bic.w	r2, r3, #16
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	031b      	lsls	r3, r3, #12
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	f043 0307 	orr.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	021a      	lsls	r2, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	431a      	orrs	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e050      	b.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034cc:	d013      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a15      	ldr	r2, [pc, #84]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10c      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4313      	orrs	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40014000 	.word	0x40014000

08003544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e03f      	b.n	80035d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd ff28 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	; 0x24
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fddf 	bl	800414c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800359c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d17c      	bne.n	80036f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_UART_Transmit+0x2c>
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e075      	b.n	80036fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_UART_Transmit+0x3e>
 8003618:	2302      	movs	r3, #2
 800361a:	e06e      	b.n	80036fa <HAL_UART_Transmit+0x11c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2221      	movs	r2, #33	; 0x21
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003632:	f7fe f86f 	bl	8001714 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	d108      	bne.n	8003660 <HAL_UART_Transmit+0x82>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	e003      	b.n	8003668 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003670:	e02a      	b.n	80036c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fb1f 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e036      	b.n	80036fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3302      	adds	r3, #2
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e007      	b.n	80036ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	3301      	adds	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1cf      	bne.n	8003672 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2140      	movs	r1, #64	; 0x40
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 faef 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e006      	b.n	80036fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	4613      	mov	r3, r2
 800370e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	d11d      	bne.n	8003758 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_UART_Receive_IT+0x26>
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e016      	b.n	800375a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_UART_Receive_IT+0x38>
 8003736:	2302      	movs	r3, #2
 8003738:	e00f      	b.n	800375a <HAL_UART_Receive_IT+0x58>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	461a      	mov	r2, r3
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fb24 	bl	8003d9c <UART_Start_Receive_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	e000      	b.n	800375a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b0ba      	sub	sp, #232	; 0xe8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_UART_IRQHandler+0x66>
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fc07 	bl	8003fd6 <UART_Receive_IT>
      return;
 80037c8:	e256      	b.n	8003c78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80de 	beq.w	8003990 <HAL_UART_IRQHandler+0x22c>
 80037d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80d1 	beq.w	8003990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_UART_IRQHandler+0xae>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_UART_IRQHandler+0xd2>
 800381e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_UART_IRQHandler+0xf6>
 8003842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f043 0204 	orr.w	r2, r3, #4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800385a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <HAL_UART_IRQHandler+0x126>
 8003866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0208 	orr.w	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 81ed 	beq.w	8003c6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_UART_IRQHandler+0x14e>
 80038a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fb92 	bl	8003fd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_UART_IRQHandler+0x17a>
 80038d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04f      	beq.n	800397e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa9a 	bl	8003e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d141      	bne.n	8003976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3314      	adds	r3, #20
 80038f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800390c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3314      	adds	r3, #20
 800391a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800391e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800392a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1d9      	bne.n	80038f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	2b00      	cmp	r3, #0
 8003944:	d013      	beq.n	800396e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	4a7d      	ldr	r2, [pc, #500]	; (8003b40 <HAL_UART_IRQHandler+0x3dc>)
 800394c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe f89d 	bl	8001a92 <HAL_DMA_Abort_IT>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003968:	4610      	mov	r0, r2
 800396a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e00e      	b.n	800398c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f990 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e00a      	b.n	800398c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f98c 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	e006      	b.n	800398c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f988 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800398a:	e170      	b.n	8003c6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	bf00      	nop
    return;
 800398e:	e16e      	b.n	8003c6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 814a 	bne.w	8003c2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8143 	beq.w	8003c2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 813c 	beq.w	8003c2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	f040 80b4 	bne.w	8003b44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8140 	beq.w	8003c72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039fa:	429a      	cmp	r2, r3
 80039fc:	f080 8139 	bcs.w	8003c72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	f000 8088 	beq.w	8003b26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1d9      	bne.n	8003a16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e1      	bne.n	8003a62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3314      	adds	r3, #20
 8003aa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3314      	adds	r3, #20
 8003abe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ac2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ac4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e3      	bne.n	8003a9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b08:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e3      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd ff46 	bl	80019b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8b6 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b3c:	e099      	b.n	8003c72 <HAL_UART_IRQHandler+0x50e>
 8003b3e:	bf00      	nop
 8003b40:	08003edf 	.word	0x08003edf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 808b 	beq.w	8003c76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8086 	beq.w	8003c76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b8e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e3      	bne.n	8003b6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3314      	adds	r3, #20
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3314      	adds	r3, #20
 8003bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e3      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0310 	bic.w	r3, r3, #16
 8003bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c0c:	61fa      	str	r2, [r7, #28]
 8003c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e3      	bne.n	8003be8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f83e 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c2c:	e023      	b.n	8003c76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_UART_IRQHandler+0x4ea>
 8003c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f95d 	bl	8003f06 <UART_Transmit_IT>
    return;
 8003c4c:	e014      	b.n	8003c78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00e      	beq.n	8003c78 <HAL_UART_IRQHandler+0x514>
 8003c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f99d 	bl	8003fa6 <UART_EndTransmit_IT>
    return;
 8003c6c:	e004      	b.n	8003c78 <HAL_UART_IRQHandler+0x514>
    return;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <HAL_UART_IRQHandler+0x514>
      return;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <HAL_UART_IRQHandler+0x514>
      return;
 8003c76:	bf00      	nop
  }
}
 8003c78:	37e8      	adds	r7, #232	; 0xe8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b090      	sub	sp, #64	; 0x40
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd0:	e050      	b.n	8003d74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d04c      	beq.n	8003d74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce0:	f7fd fd18 	bl	8001714 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d241      	bcs.n	8003d74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d10:	637a      	str	r2, [r7, #52]	; 0x34
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	613b      	str	r3, [r7, #16]
   return(result);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d44:	623a      	str	r2, [r7, #32]
 8003d46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	69f9      	ldr	r1, [r7, #28]
 8003d4a:	6a3a      	ldr	r2, [r7, #32]
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e5      	bne.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e00f      	b.n	8003d94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d09f      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3740      	adds	r7, #64	; 0x40
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2222      	movs	r2, #34	; 0x22
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0220 	orr.w	r2, r2, #32
 8003e08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b095      	sub	sp, #84	; 0x54
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e40:	643a      	str	r2, [r7, #64]	; 0x40
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d119      	bne.n	8003ec4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f023 0310 	bic.w	r3, r3, #16
 8003ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb0:	61ba      	str	r2, [r7, #24]
 8003eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6979      	ldr	r1, [r7, #20]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ed2:	bf00      	nop
 8003ed4:	3754      	adds	r7, #84	; 0x54
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff fecb 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b21      	cmp	r3, #33	; 0x21
 8003f18:	d13e      	bne.n	8003f98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f22:	d114      	bne.n	8003f4e <UART_Transmit_IT+0x48>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d110      	bne.n	8003f4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]
 8003f4c:	e008      	b.n	8003f60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6211      	str	r1, [r2, #32]
 8003f58:	781a      	ldrb	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10f      	bne.n	8003f94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e000      	b.n	8003f9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fe5a 	bl	8003c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b08c      	sub	sp, #48	; 0x30
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b22      	cmp	r3, #34	; 0x22
 8003fe8:	f040 80ab 	bne.w	8004142 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff4:	d117      	bne.n	8004026 <UART_Receive_IT+0x50>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d113      	bne.n	8004026 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004014:	b29a      	uxth	r2, r3
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	1c9a      	adds	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
 8004024:	e026      	b.n	8004074 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004038:	d007      	beq.n	800404a <UART_Receive_IT+0x74>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <UART_Receive_IT+0x82>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e008      	b.n	800406a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004064:	b2da      	uxtb	r2, r3
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4619      	mov	r1, r3
 8004082:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004084:	2b00      	cmp	r3, #0
 8004086:	d15a      	bne.n	800413e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0220 	bic.w	r2, r2, #32
 8004096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d135      	bne.n	8004134 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	613b      	str	r3, [r7, #16]
   return(result);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f023 0310 	bic.w	r3, r3, #16
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ee:	623a      	str	r2, [r7, #32]
 80040f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	69f9      	ldr	r1, [r7, #28]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e5      	bne.n	80040ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d10a      	bne.n	8004126 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff fdbb 	bl	8003ca8 <HAL_UARTEx_RxEventCallback>
 8004132:	e002      	b.n	800413a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7fc fbcd 	bl	80008d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e002      	b.n	8004144 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3730      	adds	r7, #48	; 0x30
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004150:	b0c0      	sub	sp, #256	; 0x100
 8004152:	af00      	add	r7, sp, #0
 8004154:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	68d9      	ldr	r1, [r3, #12]
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	ea40 0301 	orr.w	r3, r0, r1
 8004174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041a4:	f021 010c 	bic.w	r1, r1, #12
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041b2:	430b      	orrs	r3, r1
 80041b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c6:	6999      	ldr	r1, [r3, #24]
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	ea40 0301 	orr.w	r3, r0, r1
 80041d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b8f      	ldr	r3, [pc, #572]	; (8004418 <UART_SetConfig+0x2cc>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d005      	beq.n	80041ec <UART_SetConfig+0xa0>
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b8d      	ldr	r3, [pc, #564]	; (800441c <UART_SetConfig+0x2d0>)
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d104      	bne.n	80041f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041ec:	f7fe fac6 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 80041f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041f4:	e003      	b.n	80041fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041f6:	f7fe faad 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 80041fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	f040 810c 	bne.w	8004424 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800420c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004210:	2200      	movs	r2, #0
 8004212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004216:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800421a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800421e:	4622      	mov	r2, r4
 8004220:	462b      	mov	r3, r5
 8004222:	1891      	adds	r1, r2, r2
 8004224:	65b9      	str	r1, [r7, #88]	; 0x58
 8004226:	415b      	adcs	r3, r3
 8004228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800422e:	4621      	mov	r1, r4
 8004230:	eb12 0801 	adds.w	r8, r2, r1
 8004234:	4629      	mov	r1, r5
 8004236:	eb43 0901 	adc.w	r9, r3, r1
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800424e:	4690      	mov	r8, r2
 8004250:	4699      	mov	r9, r3
 8004252:	4623      	mov	r3, r4
 8004254:	eb18 0303 	adds.w	r3, r8, r3
 8004258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800425c:	462b      	mov	r3, r5
 800425e:	eb49 0303 	adc.w	r3, r9, r3
 8004262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004272:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800427a:	460b      	mov	r3, r1
 800427c:	18db      	adds	r3, r3, r3
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
 8004280:	4613      	mov	r3, r2
 8004282:	eb42 0303 	adc.w	r3, r2, r3
 8004286:	657b      	str	r3, [r7, #84]	; 0x54
 8004288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800428c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004290:	f7fb fff6 	bl	8000280 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4b61      	ldr	r3, [pc, #388]	; (8004420 <UART_SetConfig+0x2d4>)
 800429a:	fba3 2302 	umull	r2, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	011c      	lsls	r4, r3, #4
 80042a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	1891      	adds	r1, r2, r2
 80042ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80042bc:	415b      	adcs	r3, r3
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042c4:	4641      	mov	r1, r8
 80042c6:	eb12 0a01 	adds.w	sl, r2, r1
 80042ca:	4649      	mov	r1, r9
 80042cc:	eb43 0b01 	adc.w	fp, r3, r1
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e4:	4692      	mov	sl, r2
 80042e6:	469b      	mov	fp, r3
 80042e8:	4643      	mov	r3, r8
 80042ea:	eb1a 0303 	adds.w	r3, sl, r3
 80042ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042f2:	464b      	mov	r3, r9
 80042f4:	eb4b 0303 	adc.w	r3, fp, r3
 80042f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004308:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800430c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004310:	460b      	mov	r3, r1
 8004312:	18db      	adds	r3, r3, r3
 8004314:	643b      	str	r3, [r7, #64]	; 0x40
 8004316:	4613      	mov	r3, r2
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	647b      	str	r3, [r7, #68]	; 0x44
 800431e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004326:	f7fb ffab 	bl	8000280 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4611      	mov	r1, r2
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <UART_SetConfig+0x2d4>)
 8004332:	fba3 2301 	umull	r2, r3, r3, r1
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2264      	movs	r2, #100	; 0x64
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	1acb      	subs	r3, r1, r3
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <UART_SetConfig+0x2d4>)
 8004348:	fba3 2302 	umull	r2, r3, r3, r2
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004354:	441c      	add	r4, r3
 8004356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004360:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	1891      	adds	r1, r2, r2
 800436e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004370:	415b      	adcs	r3, r3
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004378:	4641      	mov	r1, r8
 800437a:	1851      	adds	r1, r2, r1
 800437c:	6339      	str	r1, [r7, #48]	; 0x30
 800437e:	4649      	mov	r1, r9
 8004380:	414b      	adcs	r3, r1
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004390:	4659      	mov	r1, fp
 8004392:	00cb      	lsls	r3, r1, #3
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439a:	4651      	mov	r1, sl
 800439c:	00ca      	lsls	r2, r1, #3
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	4642      	mov	r2, r8
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ac:	464b      	mov	r3, r9
 80043ae:	460a      	mov	r2, r1
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043cc:	460b      	mov	r3, r1
 80043ce:	18db      	adds	r3, r3, r3
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d2:	4613      	mov	r3, r2
 80043d4:	eb42 0303 	adc.w	r3, r2, r3
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043e2:	f7fb ff4d 	bl	8000280 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <UART_SetConfig+0x2d4>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <UART_SetConfig+0x2d4>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 0207 	and.w	r2, r3, #7
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4422      	add	r2, r4
 8004412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004414:	e105      	b.n	8004622 <UART_SetConfig+0x4d6>
 8004416:	bf00      	nop
 8004418:	40011000 	.word	0x40011000
 800441c:	40011400 	.word	0x40011400
 8004420:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800442e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004432:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004436:	4642      	mov	r2, r8
 8004438:	464b      	mov	r3, r9
 800443a:	1891      	adds	r1, r2, r2
 800443c:	6239      	str	r1, [r7, #32]
 800443e:	415b      	adcs	r3, r3
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004446:	4641      	mov	r1, r8
 8004448:	1854      	adds	r4, r2, r1
 800444a:	4649      	mov	r1, r9
 800444c:	eb43 0501 	adc.w	r5, r3, r1
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	00eb      	lsls	r3, r5, #3
 800445a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445e:	00e2      	lsls	r2, r4, #3
 8004460:	4614      	mov	r4, r2
 8004462:	461d      	mov	r5, r3
 8004464:	4643      	mov	r3, r8
 8004466:	18e3      	adds	r3, r4, r3
 8004468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800446c:	464b      	mov	r3, r9
 800446e:	eb45 0303 	adc.w	r3, r5, r3
 8004472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004482:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004492:	4629      	mov	r1, r5
 8004494:	008b      	lsls	r3, r1, #2
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800449c:	4621      	mov	r1, r4
 800449e:	008a      	lsls	r2, r1, #2
 80044a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044a4:	f7fb feec 	bl	8000280 <__aeabi_uldivmod>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4b60      	ldr	r3, [pc, #384]	; (8004630 <UART_SetConfig+0x4e4>)
 80044ae:	fba3 2302 	umull	r2, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	011c      	lsls	r4, r3, #4
 80044b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	61b9      	str	r1, [r7, #24]
 80044d0:	415b      	adcs	r3, r3
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d8:	4641      	mov	r1, r8
 80044da:	1851      	adds	r1, r2, r1
 80044dc:	6139      	str	r1, [r7, #16]
 80044de:	4649      	mov	r1, r9
 80044e0:	414b      	adcs	r3, r1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f0:	4659      	mov	r1, fp
 80044f2:	00cb      	lsls	r3, r1, #3
 80044f4:	4651      	mov	r1, sl
 80044f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fa:	4651      	mov	r1, sl
 80044fc:	00ca      	lsls	r2, r1, #3
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	4603      	mov	r3, r0
 8004504:	4642      	mov	r2, r8
 8004506:	189b      	adds	r3, r3, r2
 8004508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	67bb      	str	r3, [r7, #120]	; 0x78
 8004522:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004530:	4649      	mov	r1, r9
 8004532:	008b      	lsls	r3, r1, #2
 8004534:	4641      	mov	r1, r8
 8004536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453a:	4641      	mov	r1, r8
 800453c:	008a      	lsls	r2, r1, #2
 800453e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004542:	f7fb fe9d 	bl	8000280 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4b39      	ldr	r3, [pc, #228]	; (8004630 <UART_SetConfig+0x4e4>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	; 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	3332      	adds	r3, #50	; 0x32
 800455e:	4a34      	ldr	r2, [pc, #208]	; (8004630 <UART_SetConfig+0x4e4>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456a:	441c      	add	r4, r3
 800456c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004570:	2200      	movs	r2, #0
 8004572:	673b      	str	r3, [r7, #112]	; 0x70
 8004574:	677a      	str	r2, [r7, #116]	; 0x74
 8004576:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800457a:	4642      	mov	r2, r8
 800457c:	464b      	mov	r3, r9
 800457e:	1891      	adds	r1, r2, r2
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	415b      	adcs	r3, r3
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800458a:	4641      	mov	r1, r8
 800458c:	1851      	adds	r1, r2, r1
 800458e:	6039      	str	r1, [r7, #0]
 8004590:	4649      	mov	r1, r9
 8004592:	414b      	adcs	r3, r1
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045a2:	4659      	mov	r1, fp
 80045a4:	00cb      	lsls	r3, r1, #3
 80045a6:	4651      	mov	r1, sl
 80045a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ac:	4651      	mov	r1, sl
 80045ae:	00ca      	lsls	r2, r1, #3
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	4603      	mov	r3, r0
 80045b6:	4642      	mov	r2, r8
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80045bc:	464b      	mov	r3, r9
 80045be:	460a      	mov	r2, r1
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	663b      	str	r3, [r7, #96]	; 0x60
 80045d0:	667a      	str	r2, [r7, #100]	; 0x64
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045de:	4649      	mov	r1, r9
 80045e0:	008b      	lsls	r3, r1, #2
 80045e2:	4641      	mov	r1, r8
 80045e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e8:	4641      	mov	r1, r8
 80045ea:	008a      	lsls	r2, r1, #2
 80045ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045f0:	f7fb fe46 	bl	8000280 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <UART_SetConfig+0x4e4>)
 80045fa:	fba3 1302 	umull	r1, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2164      	movs	r1, #100	; 0x64
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	3332      	adds	r3, #50	; 0x32
 800460c:	4a08      	ldr	r2, [pc, #32]	; (8004630 <UART_SetConfig+0x4e4>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	f003 020f 	and.w	r2, r3, #15
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4422      	add	r2, r4
 8004620:	609a      	str	r2, [r3, #8]
}
 8004622:	bf00      	nop
 8004624:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004628:	46bd      	mov	sp, r7
 800462a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462e:	bf00      	nop
 8004630:	51eb851f 	.word	0x51eb851f

08004634 <__errno>:
 8004634:	4b01      	ldr	r3, [pc, #4]	; (800463c <__errno+0x8>)
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000040 	.word	0x20000040

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4d0d      	ldr	r5, [pc, #52]	; (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	; (800467c <__libc_init_array+0x3c>)
 8004646:	1b64      	subs	r4, r4, r5
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2600      	movs	r6, #0
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4d0b      	ldr	r5, [pc, #44]	; (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	; (8004684 <__libc_init_array+0x44>)
 8004654:	f000 fc8e 	bl	8004f74 <_init>
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2600      	movs	r6, #0
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f855 3b04 	ldr.w	r3, [r5], #4
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	08004ff4 	.word	0x08004ff4
 800467c:	08004ff4 	.word	0x08004ff4
 8004680:	08004ff4 	.word	0x08004ff4
 8004684:	08004ff8 	.word	0x08004ff8

08004688 <memset>:
 8004688:	4402      	add	r2, r0
 800468a:	4603      	mov	r3, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <siprintf>:
 8004698:	b40e      	push	{r1, r2, r3}
 800469a:	b500      	push	{lr}
 800469c:	b09c      	sub	sp, #112	; 0x70
 800469e:	ab1d      	add	r3, sp, #116	; 0x74
 80046a0:	9002      	str	r0, [sp, #8]
 80046a2:	9006      	str	r0, [sp, #24]
 80046a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046a8:	4809      	ldr	r0, [pc, #36]	; (80046d0 <siprintf+0x38>)
 80046aa:	9107      	str	r1, [sp, #28]
 80046ac:	9104      	str	r1, [sp, #16]
 80046ae:	4909      	ldr	r1, [pc, #36]	; (80046d4 <siprintf+0x3c>)
 80046b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b4:	9105      	str	r1, [sp, #20]
 80046b6:	6800      	ldr	r0, [r0, #0]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	a902      	add	r1, sp, #8
 80046bc:	f000 f868 	bl	8004790 <_svfiprintf_r>
 80046c0:	9b02      	ldr	r3, [sp, #8]
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	b01c      	add	sp, #112	; 0x70
 80046c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046cc:	b003      	add	sp, #12
 80046ce:	4770      	bx	lr
 80046d0:	20000040 	.word	0x20000040
 80046d4:	ffff0208 	.word	0xffff0208

080046d8 <__ssputs_r>:
 80046d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	688e      	ldr	r6, [r1, #8]
 80046de:	429e      	cmp	r6, r3
 80046e0:	4682      	mov	sl, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	4690      	mov	r8, r2
 80046e6:	461f      	mov	r7, r3
 80046e8:	d838      	bhi.n	800475c <__ssputs_r+0x84>
 80046ea:	898a      	ldrh	r2, [r1, #12]
 80046ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046f0:	d032      	beq.n	8004758 <__ssputs_r+0x80>
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	6909      	ldr	r1, [r1, #16]
 80046f6:	eba5 0901 	sub.w	r9, r5, r1
 80046fa:	6965      	ldr	r5, [r4, #20]
 80046fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004704:	3301      	adds	r3, #1
 8004706:	444b      	add	r3, r9
 8004708:	106d      	asrs	r5, r5, #1
 800470a:	429d      	cmp	r5, r3
 800470c:	bf38      	it	cc
 800470e:	461d      	movcc	r5, r3
 8004710:	0553      	lsls	r3, r2, #21
 8004712:	d531      	bpl.n	8004778 <__ssputs_r+0xa0>
 8004714:	4629      	mov	r1, r5
 8004716:	f000 fb63 	bl	8004de0 <_malloc_r>
 800471a:	4606      	mov	r6, r0
 800471c:	b950      	cbnz	r0, 8004734 <__ssputs_r+0x5c>
 800471e:	230c      	movs	r3, #12
 8004720:	f8ca 3000 	str.w	r3, [sl]
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472a:	81a3      	strh	r3, [r4, #12]
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004734:	6921      	ldr	r1, [r4, #16]
 8004736:	464a      	mov	r2, r9
 8004738:	f000 fabe 	bl	8004cb8 <memcpy>
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	6126      	str	r6, [r4, #16]
 800474a:	6165      	str	r5, [r4, #20]
 800474c:	444e      	add	r6, r9
 800474e:	eba5 0509 	sub.w	r5, r5, r9
 8004752:	6026      	str	r6, [r4, #0]
 8004754:	60a5      	str	r5, [r4, #8]
 8004756:	463e      	mov	r6, r7
 8004758:	42be      	cmp	r6, r7
 800475a:	d900      	bls.n	800475e <__ssputs_r+0x86>
 800475c:	463e      	mov	r6, r7
 800475e:	6820      	ldr	r0, [r4, #0]
 8004760:	4632      	mov	r2, r6
 8004762:	4641      	mov	r1, r8
 8004764:	f000 fab6 	bl	8004cd4 <memmove>
 8004768:	68a3      	ldr	r3, [r4, #8]
 800476a:	1b9b      	subs	r3, r3, r6
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	4433      	add	r3, r6
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	2000      	movs	r0, #0
 8004776:	e7db      	b.n	8004730 <__ssputs_r+0x58>
 8004778:	462a      	mov	r2, r5
 800477a:	f000 fba5 	bl	8004ec8 <_realloc_r>
 800477e:	4606      	mov	r6, r0
 8004780:	2800      	cmp	r0, #0
 8004782:	d1e1      	bne.n	8004748 <__ssputs_r+0x70>
 8004784:	6921      	ldr	r1, [r4, #16]
 8004786:	4650      	mov	r0, sl
 8004788:	f000 fabe 	bl	8004d08 <_free_r>
 800478c:	e7c7      	b.n	800471e <__ssputs_r+0x46>
	...

08004790 <_svfiprintf_r>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4698      	mov	r8, r3
 8004796:	898b      	ldrh	r3, [r1, #12]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	b09d      	sub	sp, #116	; 0x74
 800479c:	4607      	mov	r7, r0
 800479e:	460d      	mov	r5, r1
 80047a0:	4614      	mov	r4, r2
 80047a2:	d50e      	bpl.n	80047c2 <_svfiprintf_r+0x32>
 80047a4:	690b      	ldr	r3, [r1, #16]
 80047a6:	b963      	cbnz	r3, 80047c2 <_svfiprintf_r+0x32>
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	f000 fb19 	bl	8004de0 <_malloc_r>
 80047ae:	6028      	str	r0, [r5, #0]
 80047b0:	6128      	str	r0, [r5, #16]
 80047b2:	b920      	cbnz	r0, 80047be <_svfiprintf_r+0x2e>
 80047b4:	230c      	movs	r3, #12
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	e0d1      	b.n	8004962 <_svfiprintf_r+0x1d2>
 80047be:	2340      	movs	r3, #64	; 0x40
 80047c0:	616b      	str	r3, [r5, #20]
 80047c2:	2300      	movs	r3, #0
 80047c4:	9309      	str	r3, [sp, #36]	; 0x24
 80047c6:	2320      	movs	r3, #32
 80047c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d0:	2330      	movs	r3, #48	; 0x30
 80047d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800497c <_svfiprintf_r+0x1ec>
 80047d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047da:	f04f 0901 	mov.w	r9, #1
 80047de:	4623      	mov	r3, r4
 80047e0:	469a      	mov	sl, r3
 80047e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047e6:	b10a      	cbz	r2, 80047ec <_svfiprintf_r+0x5c>
 80047e8:	2a25      	cmp	r2, #37	; 0x25
 80047ea:	d1f9      	bne.n	80047e0 <_svfiprintf_r+0x50>
 80047ec:	ebba 0b04 	subs.w	fp, sl, r4
 80047f0:	d00b      	beq.n	800480a <_svfiprintf_r+0x7a>
 80047f2:	465b      	mov	r3, fp
 80047f4:	4622      	mov	r2, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	4638      	mov	r0, r7
 80047fa:	f7ff ff6d 	bl	80046d8 <__ssputs_r>
 80047fe:	3001      	adds	r0, #1
 8004800:	f000 80aa 	beq.w	8004958 <_svfiprintf_r+0x1c8>
 8004804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004806:	445a      	add	r2, fp
 8004808:	9209      	str	r2, [sp, #36]	; 0x24
 800480a:	f89a 3000 	ldrb.w	r3, [sl]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80a2 	beq.w	8004958 <_svfiprintf_r+0x1c8>
 8004814:	2300      	movs	r3, #0
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800481e:	f10a 0a01 	add.w	sl, sl, #1
 8004822:	9304      	str	r3, [sp, #16]
 8004824:	9307      	str	r3, [sp, #28]
 8004826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800482a:	931a      	str	r3, [sp, #104]	; 0x68
 800482c:	4654      	mov	r4, sl
 800482e:	2205      	movs	r2, #5
 8004830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004834:	4851      	ldr	r0, [pc, #324]	; (800497c <_svfiprintf_r+0x1ec>)
 8004836:	f7fb fcd3 	bl	80001e0 <memchr>
 800483a:	9a04      	ldr	r2, [sp, #16]
 800483c:	b9d8      	cbnz	r0, 8004876 <_svfiprintf_r+0xe6>
 800483e:	06d0      	lsls	r0, r2, #27
 8004840:	bf44      	itt	mi
 8004842:	2320      	movmi	r3, #32
 8004844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004848:	0711      	lsls	r1, r2, #28
 800484a:	bf44      	itt	mi
 800484c:	232b      	movmi	r3, #43	; 0x2b
 800484e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004852:	f89a 3000 	ldrb.w	r3, [sl]
 8004856:	2b2a      	cmp	r3, #42	; 0x2a
 8004858:	d015      	beq.n	8004886 <_svfiprintf_r+0xf6>
 800485a:	9a07      	ldr	r2, [sp, #28]
 800485c:	4654      	mov	r4, sl
 800485e:	2000      	movs	r0, #0
 8004860:	f04f 0c0a 	mov.w	ip, #10
 8004864:	4621      	mov	r1, r4
 8004866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800486a:	3b30      	subs	r3, #48	; 0x30
 800486c:	2b09      	cmp	r3, #9
 800486e:	d94e      	bls.n	800490e <_svfiprintf_r+0x17e>
 8004870:	b1b0      	cbz	r0, 80048a0 <_svfiprintf_r+0x110>
 8004872:	9207      	str	r2, [sp, #28]
 8004874:	e014      	b.n	80048a0 <_svfiprintf_r+0x110>
 8004876:	eba0 0308 	sub.w	r3, r0, r8
 800487a:	fa09 f303 	lsl.w	r3, r9, r3
 800487e:	4313      	orrs	r3, r2
 8004880:	9304      	str	r3, [sp, #16]
 8004882:	46a2      	mov	sl, r4
 8004884:	e7d2      	b.n	800482c <_svfiprintf_r+0x9c>
 8004886:	9b03      	ldr	r3, [sp, #12]
 8004888:	1d19      	adds	r1, r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	9103      	str	r1, [sp, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	bfbb      	ittet	lt
 8004892:	425b      	neglt	r3, r3
 8004894:	f042 0202 	orrlt.w	r2, r2, #2
 8004898:	9307      	strge	r3, [sp, #28]
 800489a:	9307      	strlt	r3, [sp, #28]
 800489c:	bfb8      	it	lt
 800489e:	9204      	strlt	r2, [sp, #16]
 80048a0:	7823      	ldrb	r3, [r4, #0]
 80048a2:	2b2e      	cmp	r3, #46	; 0x2e
 80048a4:	d10c      	bne.n	80048c0 <_svfiprintf_r+0x130>
 80048a6:	7863      	ldrb	r3, [r4, #1]
 80048a8:	2b2a      	cmp	r3, #42	; 0x2a
 80048aa:	d135      	bne.n	8004918 <_svfiprintf_r+0x188>
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	1d1a      	adds	r2, r3, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	9203      	str	r2, [sp, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bfb8      	it	lt
 80048b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80048bc:	3402      	adds	r4, #2
 80048be:	9305      	str	r3, [sp, #20]
 80048c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800498c <_svfiprintf_r+0x1fc>
 80048c4:	7821      	ldrb	r1, [r4, #0]
 80048c6:	2203      	movs	r2, #3
 80048c8:	4650      	mov	r0, sl
 80048ca:	f7fb fc89 	bl	80001e0 <memchr>
 80048ce:	b140      	cbz	r0, 80048e2 <_svfiprintf_r+0x152>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	eba0 000a 	sub.w	r0, r0, sl
 80048d6:	fa03 f000 	lsl.w	r0, r3, r0
 80048da:	9b04      	ldr	r3, [sp, #16]
 80048dc:	4303      	orrs	r3, r0
 80048de:	3401      	adds	r4, #1
 80048e0:	9304      	str	r3, [sp, #16]
 80048e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e6:	4826      	ldr	r0, [pc, #152]	; (8004980 <_svfiprintf_r+0x1f0>)
 80048e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ec:	2206      	movs	r2, #6
 80048ee:	f7fb fc77 	bl	80001e0 <memchr>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d038      	beq.n	8004968 <_svfiprintf_r+0x1d8>
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <_svfiprintf_r+0x1f4>)
 80048f8:	bb1b      	cbnz	r3, 8004942 <_svfiprintf_r+0x1b2>
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	3307      	adds	r3, #7
 80048fe:	f023 0307 	bic.w	r3, r3, #7
 8004902:	3308      	adds	r3, #8
 8004904:	9303      	str	r3, [sp, #12]
 8004906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004908:	4433      	add	r3, r6
 800490a:	9309      	str	r3, [sp, #36]	; 0x24
 800490c:	e767      	b.n	80047de <_svfiprintf_r+0x4e>
 800490e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004912:	460c      	mov	r4, r1
 8004914:	2001      	movs	r0, #1
 8004916:	e7a5      	b.n	8004864 <_svfiprintf_r+0xd4>
 8004918:	2300      	movs	r3, #0
 800491a:	3401      	adds	r4, #1
 800491c:	9305      	str	r3, [sp, #20]
 800491e:	4619      	mov	r1, r3
 8004920:	f04f 0c0a 	mov.w	ip, #10
 8004924:	4620      	mov	r0, r4
 8004926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800492a:	3a30      	subs	r2, #48	; 0x30
 800492c:	2a09      	cmp	r2, #9
 800492e:	d903      	bls.n	8004938 <_svfiprintf_r+0x1a8>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0c5      	beq.n	80048c0 <_svfiprintf_r+0x130>
 8004934:	9105      	str	r1, [sp, #20]
 8004936:	e7c3      	b.n	80048c0 <_svfiprintf_r+0x130>
 8004938:	fb0c 2101 	mla	r1, ip, r1, r2
 800493c:	4604      	mov	r4, r0
 800493e:	2301      	movs	r3, #1
 8004940:	e7f0      	b.n	8004924 <_svfiprintf_r+0x194>
 8004942:	ab03      	add	r3, sp, #12
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	462a      	mov	r2, r5
 8004948:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <_svfiprintf_r+0x1f8>)
 800494a:	a904      	add	r1, sp, #16
 800494c:	4638      	mov	r0, r7
 800494e:	f3af 8000 	nop.w
 8004952:	1c42      	adds	r2, r0, #1
 8004954:	4606      	mov	r6, r0
 8004956:	d1d6      	bne.n	8004906 <_svfiprintf_r+0x176>
 8004958:	89ab      	ldrh	r3, [r5, #12]
 800495a:	065b      	lsls	r3, r3, #25
 800495c:	f53f af2c 	bmi.w	80047b8 <_svfiprintf_r+0x28>
 8004960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004962:	b01d      	add	sp, #116	; 0x74
 8004964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004968:	ab03      	add	r3, sp, #12
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	462a      	mov	r2, r5
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <_svfiprintf_r+0x1f8>)
 8004970:	a904      	add	r1, sp, #16
 8004972:	4638      	mov	r0, r7
 8004974:	f000 f87a 	bl	8004a6c <_printf_i>
 8004978:	e7eb      	b.n	8004952 <_svfiprintf_r+0x1c2>
 800497a:	bf00      	nop
 800497c:	08004fb8 	.word	0x08004fb8
 8004980:	08004fc2 	.word	0x08004fc2
 8004984:	00000000 	.word	0x00000000
 8004988:	080046d9 	.word	0x080046d9
 800498c:	08004fbe 	.word	0x08004fbe

08004990 <_printf_common>:
 8004990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	4616      	mov	r6, r2
 8004996:	4699      	mov	r9, r3
 8004998:	688a      	ldr	r2, [r1, #8]
 800499a:	690b      	ldr	r3, [r1, #16]
 800499c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bfb8      	it	lt
 80049a4:	4613      	movlt	r3, r2
 80049a6:	6033      	str	r3, [r6, #0]
 80049a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049ac:	4607      	mov	r7, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	b10a      	cbz	r2, 80049b6 <_printf_common+0x26>
 80049b2:	3301      	adds	r3, #1
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	0699      	lsls	r1, r3, #26
 80049ba:	bf42      	ittt	mi
 80049bc:	6833      	ldrmi	r3, [r6, #0]
 80049be:	3302      	addmi	r3, #2
 80049c0:	6033      	strmi	r3, [r6, #0]
 80049c2:	6825      	ldr	r5, [r4, #0]
 80049c4:	f015 0506 	ands.w	r5, r5, #6
 80049c8:	d106      	bne.n	80049d8 <_printf_common+0x48>
 80049ca:	f104 0a19 	add.w	sl, r4, #25
 80049ce:	68e3      	ldr	r3, [r4, #12]
 80049d0:	6832      	ldr	r2, [r6, #0]
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	42ab      	cmp	r3, r5
 80049d6:	dc26      	bgt.n	8004a26 <_printf_common+0x96>
 80049d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049dc:	1e13      	subs	r3, r2, #0
 80049de:	6822      	ldr	r2, [r4, #0]
 80049e0:	bf18      	it	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	0692      	lsls	r2, r2, #26
 80049e6:	d42b      	bmi.n	8004a40 <_printf_common+0xb0>
 80049e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ec:	4649      	mov	r1, r9
 80049ee:	4638      	mov	r0, r7
 80049f0:	47c0      	blx	r8
 80049f2:	3001      	adds	r0, #1
 80049f4:	d01e      	beq.n	8004a34 <_printf_common+0xa4>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	68e5      	ldr	r5, [r4, #12]
 80049fa:	6832      	ldr	r2, [r6, #0]
 80049fc:	f003 0306 	and.w	r3, r3, #6
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	bf08      	it	eq
 8004a04:	1aad      	subeq	r5, r5, r2
 8004a06:	68a3      	ldr	r3, [r4, #8]
 8004a08:	6922      	ldr	r2, [r4, #16]
 8004a0a:	bf0c      	ite	eq
 8004a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a10:	2500      	movne	r5, #0
 8004a12:	4293      	cmp	r3, r2
 8004a14:	bfc4      	itt	gt
 8004a16:	1a9b      	subgt	r3, r3, r2
 8004a18:	18ed      	addgt	r5, r5, r3
 8004a1a:	2600      	movs	r6, #0
 8004a1c:	341a      	adds	r4, #26
 8004a1e:	42b5      	cmp	r5, r6
 8004a20:	d11a      	bne.n	8004a58 <_printf_common+0xc8>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e008      	b.n	8004a38 <_printf_common+0xa8>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4652      	mov	r2, sl
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	47c0      	blx	r8
 8004a30:	3001      	adds	r0, #1
 8004a32:	d103      	bne.n	8004a3c <_printf_common+0xac>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	e7c6      	b.n	80049ce <_printf_common+0x3e>
 8004a40:	18e1      	adds	r1, r4, r3
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	2030      	movs	r0, #48	; 0x30
 8004a46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a4a:	4422      	add	r2, r4
 8004a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a54:	3302      	adds	r3, #2
 8004a56:	e7c7      	b.n	80049e8 <_printf_common+0x58>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	4638      	mov	r0, r7
 8004a60:	47c0      	blx	r8
 8004a62:	3001      	adds	r0, #1
 8004a64:	d0e6      	beq.n	8004a34 <_printf_common+0xa4>
 8004a66:	3601      	adds	r6, #1
 8004a68:	e7d9      	b.n	8004a1e <_printf_common+0x8e>
	...

08004a6c <_printf_i>:
 8004a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	7e0f      	ldrb	r7, [r1, #24]
 8004a72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a74:	2f78      	cmp	r7, #120	; 0x78
 8004a76:	4691      	mov	r9, r2
 8004a78:	4680      	mov	r8, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	469a      	mov	sl, r3
 8004a7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a82:	d807      	bhi.n	8004a94 <_printf_i+0x28>
 8004a84:	2f62      	cmp	r7, #98	; 0x62
 8004a86:	d80a      	bhi.n	8004a9e <_printf_i+0x32>
 8004a88:	2f00      	cmp	r7, #0
 8004a8a:	f000 80d8 	beq.w	8004c3e <_printf_i+0x1d2>
 8004a8e:	2f58      	cmp	r7, #88	; 0x58
 8004a90:	f000 80a3 	beq.w	8004bda <_printf_i+0x16e>
 8004a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a9c:	e03a      	b.n	8004b14 <_printf_i+0xa8>
 8004a9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aa2:	2b15      	cmp	r3, #21
 8004aa4:	d8f6      	bhi.n	8004a94 <_printf_i+0x28>
 8004aa6:	a101      	add	r1, pc, #4	; (adr r1, 8004aac <_printf_i+0x40>)
 8004aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aac:	08004b05 	.word	0x08004b05
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004a95 	.word	0x08004a95
 8004ab8:	08004a95 	.word	0x08004a95
 8004abc:	08004a95 	.word	0x08004a95
 8004ac0:	08004a95 	.word	0x08004a95
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004a95 	.word	0x08004a95
 8004acc:	08004a95 	.word	0x08004a95
 8004ad0:	08004a95 	.word	0x08004a95
 8004ad4:	08004a95 	.word	0x08004a95
 8004ad8:	08004c25 	.word	0x08004c25
 8004adc:	08004b49 	.word	0x08004b49
 8004ae0:	08004c07 	.word	0x08004c07
 8004ae4:	08004a95 	.word	0x08004a95
 8004ae8:	08004a95 	.word	0x08004a95
 8004aec:	08004c47 	.word	0x08004c47
 8004af0:	08004a95 	.word	0x08004a95
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004a95 	.word	0x08004a95
 8004afc:	08004a95 	.word	0x08004a95
 8004b00:	08004c0f 	.word	0x08004c0f
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	1d1a      	adds	r2, r3, #4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	602a      	str	r2, [r5, #0]
 8004b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0a3      	b.n	8004c60 <_printf_i+0x1f4>
 8004b18:	6820      	ldr	r0, [r4, #0]
 8004b1a:	6829      	ldr	r1, [r5, #0]
 8004b1c:	0606      	lsls	r6, r0, #24
 8004b1e:	f101 0304 	add.w	r3, r1, #4
 8004b22:	d50a      	bpl.n	8004b3a <_printf_i+0xce>
 8004b24:	680e      	ldr	r6, [r1, #0]
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	da03      	bge.n	8004b34 <_printf_i+0xc8>
 8004b2c:	232d      	movs	r3, #45	; 0x2d
 8004b2e:	4276      	negs	r6, r6
 8004b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b34:	485e      	ldr	r0, [pc, #376]	; (8004cb0 <_printf_i+0x244>)
 8004b36:	230a      	movs	r3, #10
 8004b38:	e019      	b.n	8004b6e <_printf_i+0x102>
 8004b3a:	680e      	ldr	r6, [r1, #0]
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b42:	bf18      	it	ne
 8004b44:	b236      	sxthne	r6, r6
 8004b46:	e7ef      	b.n	8004b28 <_printf_i+0xbc>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	6820      	ldr	r0, [r4, #0]
 8004b4c:	1d19      	adds	r1, r3, #4
 8004b4e:	6029      	str	r1, [r5, #0]
 8004b50:	0601      	lsls	r1, r0, #24
 8004b52:	d501      	bpl.n	8004b58 <_printf_i+0xec>
 8004b54:	681e      	ldr	r6, [r3, #0]
 8004b56:	e002      	b.n	8004b5e <_printf_i+0xf2>
 8004b58:	0646      	lsls	r6, r0, #25
 8004b5a:	d5fb      	bpl.n	8004b54 <_printf_i+0xe8>
 8004b5c:	881e      	ldrh	r6, [r3, #0]
 8004b5e:	4854      	ldr	r0, [pc, #336]	; (8004cb0 <_printf_i+0x244>)
 8004b60:	2f6f      	cmp	r7, #111	; 0x6f
 8004b62:	bf0c      	ite	eq
 8004b64:	2308      	moveq	r3, #8
 8004b66:	230a      	movne	r3, #10
 8004b68:	2100      	movs	r1, #0
 8004b6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b6e:	6865      	ldr	r5, [r4, #4]
 8004b70:	60a5      	str	r5, [r4, #8]
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	bfa2      	ittt	ge
 8004b76:	6821      	ldrge	r1, [r4, #0]
 8004b78:	f021 0104 	bicge.w	r1, r1, #4
 8004b7c:	6021      	strge	r1, [r4, #0]
 8004b7e:	b90e      	cbnz	r6, 8004b84 <_printf_i+0x118>
 8004b80:	2d00      	cmp	r5, #0
 8004b82:	d04d      	beq.n	8004c20 <_printf_i+0x1b4>
 8004b84:	4615      	mov	r5, r2
 8004b86:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b8a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b8e:	5dc7      	ldrb	r7, [r0, r7]
 8004b90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b94:	4637      	mov	r7, r6
 8004b96:	42bb      	cmp	r3, r7
 8004b98:	460e      	mov	r6, r1
 8004b9a:	d9f4      	bls.n	8004b86 <_printf_i+0x11a>
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d10b      	bne.n	8004bb8 <_printf_i+0x14c>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	07de      	lsls	r6, r3, #31
 8004ba4:	d508      	bpl.n	8004bb8 <_printf_i+0x14c>
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	6861      	ldr	r1, [r4, #4]
 8004baa:	4299      	cmp	r1, r3
 8004bac:	bfde      	ittt	le
 8004bae:	2330      	movle	r3, #48	; 0x30
 8004bb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bb8:	1b52      	subs	r2, r2, r5
 8004bba:	6122      	str	r2, [r4, #16]
 8004bbc:	f8cd a000 	str.w	sl, [sp]
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	aa03      	add	r2, sp, #12
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	f7ff fee2 	bl	8004990 <_printf_common>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d14c      	bne.n	8004c6a <_printf_i+0x1fe>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	b004      	add	sp, #16
 8004bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bda:	4835      	ldr	r0, [pc, #212]	; (8004cb0 <_printf_i+0x244>)
 8004bdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004be0:	6829      	ldr	r1, [r5, #0]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004be8:	6029      	str	r1, [r5, #0]
 8004bea:	061d      	lsls	r5, r3, #24
 8004bec:	d514      	bpl.n	8004c18 <_printf_i+0x1ac>
 8004bee:	07df      	lsls	r7, r3, #31
 8004bf0:	bf44      	itt	mi
 8004bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8004bf6:	6023      	strmi	r3, [r4, #0]
 8004bf8:	b91e      	cbnz	r6, 8004c02 <_printf_i+0x196>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	f023 0320 	bic.w	r3, r3, #32
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	2310      	movs	r3, #16
 8004c04:	e7b0      	b.n	8004b68 <_printf_i+0xfc>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	f043 0320 	orr.w	r3, r3, #32
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	2378      	movs	r3, #120	; 0x78
 8004c10:	4828      	ldr	r0, [pc, #160]	; (8004cb4 <_printf_i+0x248>)
 8004c12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c16:	e7e3      	b.n	8004be0 <_printf_i+0x174>
 8004c18:	0659      	lsls	r1, r3, #25
 8004c1a:	bf48      	it	mi
 8004c1c:	b2b6      	uxthmi	r6, r6
 8004c1e:	e7e6      	b.n	8004bee <_printf_i+0x182>
 8004c20:	4615      	mov	r5, r2
 8004c22:	e7bb      	b.n	8004b9c <_printf_i+0x130>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	6826      	ldr	r6, [r4, #0]
 8004c28:	6961      	ldr	r1, [r4, #20]
 8004c2a:	1d18      	adds	r0, r3, #4
 8004c2c:	6028      	str	r0, [r5, #0]
 8004c2e:	0635      	lsls	r5, r6, #24
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	d501      	bpl.n	8004c38 <_printf_i+0x1cc>
 8004c34:	6019      	str	r1, [r3, #0]
 8004c36:	e002      	b.n	8004c3e <_printf_i+0x1d2>
 8004c38:	0670      	lsls	r0, r6, #25
 8004c3a:	d5fb      	bpl.n	8004c34 <_printf_i+0x1c8>
 8004c3c:	8019      	strh	r1, [r3, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	4615      	mov	r5, r2
 8004c44:	e7ba      	b.n	8004bbc <_printf_i+0x150>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	1d1a      	adds	r2, r3, #4
 8004c4a:	602a      	str	r2, [r5, #0]
 8004c4c:	681d      	ldr	r5, [r3, #0]
 8004c4e:	6862      	ldr	r2, [r4, #4]
 8004c50:	2100      	movs	r1, #0
 8004c52:	4628      	mov	r0, r5
 8004c54:	f7fb fac4 	bl	80001e0 <memchr>
 8004c58:	b108      	cbz	r0, 8004c5e <_printf_i+0x1f2>
 8004c5a:	1b40      	subs	r0, r0, r5
 8004c5c:	6060      	str	r0, [r4, #4]
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	2300      	movs	r3, #0
 8004c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c68:	e7a8      	b.n	8004bbc <_printf_i+0x150>
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	47d0      	blx	sl
 8004c74:	3001      	adds	r0, #1
 8004c76:	d0ab      	beq.n	8004bd0 <_printf_i+0x164>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	079b      	lsls	r3, r3, #30
 8004c7c:	d413      	bmi.n	8004ca6 <_printf_i+0x23a>
 8004c7e:	68e0      	ldr	r0, [r4, #12]
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	4298      	cmp	r0, r3
 8004c84:	bfb8      	it	lt
 8004c86:	4618      	movlt	r0, r3
 8004c88:	e7a4      	b.n	8004bd4 <_printf_i+0x168>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	47d0      	blx	sl
 8004c94:	3001      	adds	r0, #1
 8004c96:	d09b      	beq.n	8004bd0 <_printf_i+0x164>
 8004c98:	3501      	adds	r5, #1
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	9903      	ldr	r1, [sp, #12]
 8004c9e:	1a5b      	subs	r3, r3, r1
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dcf2      	bgt.n	8004c8a <_printf_i+0x21e>
 8004ca4:	e7eb      	b.n	8004c7e <_printf_i+0x212>
 8004ca6:	2500      	movs	r5, #0
 8004ca8:	f104 0619 	add.w	r6, r4, #25
 8004cac:	e7f5      	b.n	8004c9a <_printf_i+0x22e>
 8004cae:	bf00      	nop
 8004cb0:	08004fc9 	.word	0x08004fc9
 8004cb4:	08004fda 	.word	0x08004fda

08004cb8 <memcpy>:
 8004cb8:	440a      	add	r2, r1
 8004cba:	4291      	cmp	r1, r2
 8004cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc0:	d100      	bne.n	8004cc4 <memcpy+0xc>
 8004cc2:	4770      	bx	lr
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	d1f9      	bne.n	8004cc6 <memcpy+0xe>
 8004cd2:	bd10      	pop	{r4, pc}

08004cd4 <memmove>:
 8004cd4:	4288      	cmp	r0, r1
 8004cd6:	b510      	push	{r4, lr}
 8004cd8:	eb01 0402 	add.w	r4, r1, r2
 8004cdc:	d902      	bls.n	8004ce4 <memmove+0x10>
 8004cde:	4284      	cmp	r4, r0
 8004ce0:	4623      	mov	r3, r4
 8004ce2:	d807      	bhi.n	8004cf4 <memmove+0x20>
 8004ce4:	1e43      	subs	r3, r0, #1
 8004ce6:	42a1      	cmp	r1, r4
 8004ce8:	d008      	beq.n	8004cfc <memmove+0x28>
 8004cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cf2:	e7f8      	b.n	8004ce6 <memmove+0x12>
 8004cf4:	4402      	add	r2, r0
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	428a      	cmp	r2, r1
 8004cfa:	d100      	bne.n	8004cfe <memmove+0x2a>
 8004cfc:	bd10      	pop	{r4, pc}
 8004cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d06:	e7f7      	b.n	8004cf8 <memmove+0x24>

08004d08 <_free_r>:
 8004d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d0a:	2900      	cmp	r1, #0
 8004d0c:	d044      	beq.n	8004d98 <_free_r+0x90>
 8004d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d12:	9001      	str	r0, [sp, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f1a1 0404 	sub.w	r4, r1, #4
 8004d1a:	bfb8      	it	lt
 8004d1c:	18e4      	addlt	r4, r4, r3
 8004d1e:	f000 f913 	bl	8004f48 <__malloc_lock>
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <_free_r+0x94>)
 8004d24:	9801      	ldr	r0, [sp, #4]
 8004d26:	6813      	ldr	r3, [r2, #0]
 8004d28:	b933      	cbnz	r3, 8004d38 <_free_r+0x30>
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	6014      	str	r4, [r2, #0]
 8004d2e:	b003      	add	sp, #12
 8004d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d34:	f000 b90e 	b.w	8004f54 <__malloc_unlock>
 8004d38:	42a3      	cmp	r3, r4
 8004d3a:	d908      	bls.n	8004d4e <_free_r+0x46>
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	1961      	adds	r1, r4, r5
 8004d40:	428b      	cmp	r3, r1
 8004d42:	bf01      	itttt	eq
 8004d44:	6819      	ldreq	r1, [r3, #0]
 8004d46:	685b      	ldreq	r3, [r3, #4]
 8004d48:	1949      	addeq	r1, r1, r5
 8004d4a:	6021      	streq	r1, [r4, #0]
 8004d4c:	e7ed      	b.n	8004d2a <_free_r+0x22>
 8004d4e:	461a      	mov	r2, r3
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	b10b      	cbz	r3, 8004d58 <_free_r+0x50>
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d9fa      	bls.n	8004d4e <_free_r+0x46>
 8004d58:	6811      	ldr	r1, [r2, #0]
 8004d5a:	1855      	adds	r5, r2, r1
 8004d5c:	42a5      	cmp	r5, r4
 8004d5e:	d10b      	bne.n	8004d78 <_free_r+0x70>
 8004d60:	6824      	ldr	r4, [r4, #0]
 8004d62:	4421      	add	r1, r4
 8004d64:	1854      	adds	r4, r2, r1
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	d1e0      	bne.n	8004d2e <_free_r+0x26>
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	6053      	str	r3, [r2, #4]
 8004d72:	4421      	add	r1, r4
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	e7da      	b.n	8004d2e <_free_r+0x26>
 8004d78:	d902      	bls.n	8004d80 <_free_r+0x78>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	6003      	str	r3, [r0, #0]
 8004d7e:	e7d6      	b.n	8004d2e <_free_r+0x26>
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	1961      	adds	r1, r4, r5
 8004d84:	428b      	cmp	r3, r1
 8004d86:	bf04      	itt	eq
 8004d88:	6819      	ldreq	r1, [r3, #0]
 8004d8a:	685b      	ldreq	r3, [r3, #4]
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	bf04      	itt	eq
 8004d90:	1949      	addeq	r1, r1, r5
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	6054      	str	r4, [r2, #4]
 8004d96:	e7ca      	b.n	8004d2e <_free_r+0x26>
 8004d98:	b003      	add	sp, #12
 8004d9a:	bd30      	pop	{r4, r5, pc}
 8004d9c:	20000208 	.word	0x20000208

08004da0 <sbrk_aligned>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	4e0e      	ldr	r6, [pc, #56]	; (8004ddc <sbrk_aligned+0x3c>)
 8004da4:	460c      	mov	r4, r1
 8004da6:	6831      	ldr	r1, [r6, #0]
 8004da8:	4605      	mov	r5, r0
 8004daa:	b911      	cbnz	r1, 8004db2 <sbrk_aligned+0x12>
 8004dac:	f000 f8bc 	bl	8004f28 <_sbrk_r>
 8004db0:	6030      	str	r0, [r6, #0]
 8004db2:	4621      	mov	r1, r4
 8004db4:	4628      	mov	r0, r5
 8004db6:	f000 f8b7 	bl	8004f28 <_sbrk_r>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d00a      	beq.n	8004dd4 <sbrk_aligned+0x34>
 8004dbe:	1cc4      	adds	r4, r0, #3
 8004dc0:	f024 0403 	bic.w	r4, r4, #3
 8004dc4:	42a0      	cmp	r0, r4
 8004dc6:	d007      	beq.n	8004dd8 <sbrk_aligned+0x38>
 8004dc8:	1a21      	subs	r1, r4, r0
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 f8ac 	bl	8004f28 <_sbrk_r>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d101      	bne.n	8004dd8 <sbrk_aligned+0x38>
 8004dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8004dd8:	4620      	mov	r0, r4
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	2000020c 	.word	0x2000020c

08004de0 <_malloc_r>:
 8004de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de4:	1ccd      	adds	r5, r1, #3
 8004de6:	f025 0503 	bic.w	r5, r5, #3
 8004dea:	3508      	adds	r5, #8
 8004dec:	2d0c      	cmp	r5, #12
 8004dee:	bf38      	it	cc
 8004df0:	250c      	movcc	r5, #12
 8004df2:	2d00      	cmp	r5, #0
 8004df4:	4607      	mov	r7, r0
 8004df6:	db01      	blt.n	8004dfc <_malloc_r+0x1c>
 8004df8:	42a9      	cmp	r1, r5
 8004dfa:	d905      	bls.n	8004e08 <_malloc_r+0x28>
 8004dfc:	230c      	movs	r3, #12
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	2600      	movs	r6, #0
 8004e02:	4630      	mov	r0, r6
 8004e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e08:	4e2e      	ldr	r6, [pc, #184]	; (8004ec4 <_malloc_r+0xe4>)
 8004e0a:	f000 f89d 	bl	8004f48 <__malloc_lock>
 8004e0e:	6833      	ldr	r3, [r6, #0]
 8004e10:	461c      	mov	r4, r3
 8004e12:	bb34      	cbnz	r4, 8004e62 <_malloc_r+0x82>
 8004e14:	4629      	mov	r1, r5
 8004e16:	4638      	mov	r0, r7
 8004e18:	f7ff ffc2 	bl	8004da0 <sbrk_aligned>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	4604      	mov	r4, r0
 8004e20:	d14d      	bne.n	8004ebe <_malloc_r+0xde>
 8004e22:	6834      	ldr	r4, [r6, #0]
 8004e24:	4626      	mov	r6, r4
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	d140      	bne.n	8004eac <_malloc_r+0xcc>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4638      	mov	r0, r7
 8004e30:	eb04 0803 	add.w	r8, r4, r3
 8004e34:	f000 f878 	bl	8004f28 <_sbrk_r>
 8004e38:	4580      	cmp	r8, r0
 8004e3a:	d13a      	bne.n	8004eb2 <_malloc_r+0xd2>
 8004e3c:	6821      	ldr	r1, [r4, #0]
 8004e3e:	3503      	adds	r5, #3
 8004e40:	1a6d      	subs	r5, r5, r1
 8004e42:	f025 0503 	bic.w	r5, r5, #3
 8004e46:	3508      	adds	r5, #8
 8004e48:	2d0c      	cmp	r5, #12
 8004e4a:	bf38      	it	cc
 8004e4c:	250c      	movcc	r5, #12
 8004e4e:	4629      	mov	r1, r5
 8004e50:	4638      	mov	r0, r7
 8004e52:	f7ff ffa5 	bl	8004da0 <sbrk_aligned>
 8004e56:	3001      	adds	r0, #1
 8004e58:	d02b      	beq.n	8004eb2 <_malloc_r+0xd2>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	442b      	add	r3, r5
 8004e5e:	6023      	str	r3, [r4, #0]
 8004e60:	e00e      	b.n	8004e80 <_malloc_r+0xa0>
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	1b52      	subs	r2, r2, r5
 8004e66:	d41e      	bmi.n	8004ea6 <_malloc_r+0xc6>
 8004e68:	2a0b      	cmp	r2, #11
 8004e6a:	d916      	bls.n	8004e9a <_malloc_r+0xba>
 8004e6c:	1961      	adds	r1, r4, r5
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	6025      	str	r5, [r4, #0]
 8004e72:	bf18      	it	ne
 8004e74:	6059      	strne	r1, [r3, #4]
 8004e76:	6863      	ldr	r3, [r4, #4]
 8004e78:	bf08      	it	eq
 8004e7a:	6031      	streq	r1, [r6, #0]
 8004e7c:	5162      	str	r2, [r4, r5]
 8004e7e:	604b      	str	r3, [r1, #4]
 8004e80:	4638      	mov	r0, r7
 8004e82:	f104 060b 	add.w	r6, r4, #11
 8004e86:	f000 f865 	bl	8004f54 <__malloc_unlock>
 8004e8a:	f026 0607 	bic.w	r6, r6, #7
 8004e8e:	1d23      	adds	r3, r4, #4
 8004e90:	1af2      	subs	r2, r6, r3
 8004e92:	d0b6      	beq.n	8004e02 <_malloc_r+0x22>
 8004e94:	1b9b      	subs	r3, r3, r6
 8004e96:	50a3      	str	r3, [r4, r2]
 8004e98:	e7b3      	b.n	8004e02 <_malloc_r+0x22>
 8004e9a:	6862      	ldr	r2, [r4, #4]
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	bf0c      	ite	eq
 8004ea0:	6032      	streq	r2, [r6, #0]
 8004ea2:	605a      	strne	r2, [r3, #4]
 8004ea4:	e7ec      	b.n	8004e80 <_malloc_r+0xa0>
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	6864      	ldr	r4, [r4, #4]
 8004eaa:	e7b2      	b.n	8004e12 <_malloc_r+0x32>
 8004eac:	4634      	mov	r4, r6
 8004eae:	6876      	ldr	r6, [r6, #4]
 8004eb0:	e7b9      	b.n	8004e26 <_malloc_r+0x46>
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f000 f84c 	bl	8004f54 <__malloc_unlock>
 8004ebc:	e7a1      	b.n	8004e02 <_malloc_r+0x22>
 8004ebe:	6025      	str	r5, [r4, #0]
 8004ec0:	e7de      	b.n	8004e80 <_malloc_r+0xa0>
 8004ec2:	bf00      	nop
 8004ec4:	20000208 	.word	0x20000208

08004ec8 <_realloc_r>:
 8004ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ecc:	4680      	mov	r8, r0
 8004ece:	4614      	mov	r4, r2
 8004ed0:	460e      	mov	r6, r1
 8004ed2:	b921      	cbnz	r1, 8004ede <_realloc_r+0x16>
 8004ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	4611      	mov	r1, r2
 8004eda:	f7ff bf81 	b.w	8004de0 <_malloc_r>
 8004ede:	b92a      	cbnz	r2, 8004eec <_realloc_r+0x24>
 8004ee0:	f7ff ff12 	bl	8004d08 <_free_r>
 8004ee4:	4625      	mov	r5, r4
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eec:	f000 f838 	bl	8004f60 <_malloc_usable_size_r>
 8004ef0:	4284      	cmp	r4, r0
 8004ef2:	4607      	mov	r7, r0
 8004ef4:	d802      	bhi.n	8004efc <_realloc_r+0x34>
 8004ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004efa:	d812      	bhi.n	8004f22 <_realloc_r+0x5a>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4640      	mov	r0, r8
 8004f00:	f7ff ff6e 	bl	8004de0 <_malloc_r>
 8004f04:	4605      	mov	r5, r0
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d0ed      	beq.n	8004ee6 <_realloc_r+0x1e>
 8004f0a:	42bc      	cmp	r4, r7
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	4631      	mov	r1, r6
 8004f10:	bf28      	it	cs
 8004f12:	463a      	movcs	r2, r7
 8004f14:	f7ff fed0 	bl	8004cb8 <memcpy>
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	f7ff fef4 	bl	8004d08 <_free_r>
 8004f20:	e7e1      	b.n	8004ee6 <_realloc_r+0x1e>
 8004f22:	4635      	mov	r5, r6
 8004f24:	e7df      	b.n	8004ee6 <_realloc_r+0x1e>
	...

08004f28 <_sbrk_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4d06      	ldr	r5, [pc, #24]	; (8004f44 <_sbrk_r+0x1c>)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4608      	mov	r0, r1
 8004f32:	602b      	str	r3, [r5, #0]
 8004f34:	f7fc fb16 	bl	8001564 <_sbrk>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_sbrk_r+0x1a>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_sbrk_r+0x1a>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000210 	.word	0x20000210

08004f48 <__malloc_lock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	; (8004f50 <__malloc_lock+0x8>)
 8004f4a:	f000 b811 	b.w	8004f70 <__retarget_lock_acquire_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000214 	.word	0x20000214

08004f54 <__malloc_unlock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <__malloc_unlock+0x8>)
 8004f56:	f000 b80c 	b.w	8004f72 <__retarget_lock_release_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	20000214 	.word	0x20000214

08004f60 <_malloc_usable_size_r>:
 8004f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f64:	1f18      	subs	r0, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bfbc      	itt	lt
 8004f6a:	580b      	ldrlt	r3, [r1, r0]
 8004f6c:	18c0      	addlt	r0, r0, r3
 8004f6e:	4770      	bx	lr

08004f70 <__retarget_lock_acquire_recursive>:
 8004f70:	4770      	bx	lr

08004f72 <__retarget_lock_release_recursive>:
 8004f72:	4770      	bx	lr

08004f74 <_init>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	bf00      	nop
 8004f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	469e      	mov	lr, r3
 8004f7e:	4770      	bx	lr

08004f80 <_fini>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr
